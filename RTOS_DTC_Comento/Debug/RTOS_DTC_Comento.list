
RTOS_DTC_Comento.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbd8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800ddb8  0800ddb8  0000edb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df70  0800df70  0000f060  2**0
                  CONTENTS
  4 .ARM          00000008  0800df70  0800df70  0000ef70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df78  0800df78  0000f060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df78  0800df78  0000ef78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df7c  0800df7c  0000ef7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800df80  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005044  20000060  0800dfe0  0000f060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050a4  0800dfe0  0000f0a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ccef  00000000  00000000  0000f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040c7  00000000  00000000  0002bd7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  0002fe48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012c1  00000000  00000000  00031670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a8d  00000000  00000000  00032931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cd5c  00000000  00000000  000573be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e302f  00000000  00000000  0007411a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157149  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a18  00000000  00000000  0015718c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0015dba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800dda0 	.word	0x0800dda0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	0800dda0 	.word	0x0800dda0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <CAN_Manager_Init>:
static void Process_CAN_Response(uint8_t* data);

// --- Public API Functions ---

HAL_StatusTypeDef CAN_Manager_Init(CAN_HandleTypeDef* hcan)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08c      	sub	sp, #48	@ 0x30
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    CAN_FilterTypeDef sFilterConfig;

    // Configure CAN filter for diagnostic requests
    sFilterConfig.FilterBank = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000608:	2300      	movs	r3, #0
 800060a:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800060c:	2301      	movs	r3, #1
 800060e:	627b      	str	r3, [r7, #36]	@ 0x24
    sFilterConfig.FilterIdHigh = (CAN_DIAG_RECEIVE_ID >> 13) & 0xFFFF;
 8000610:	f24c 63d9 	movw	r3, #50905	@ 0xc6d9
 8000614:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterIdLow = ((CAN_DIAG_RECEIVE_ID << 3) | CAN_ID_EXT) & 0xFFF8;
 8000616:	f649 7388 	movw	r3, #40840	@ 0x9f88
 800061a:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = 0xFFFF;
 800061c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000620:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = 0xFFF8;
 8000622:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000626:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterActivation = ENABLE;
 800062c:	2301      	movs	r3, #1
 800062e:	62bb      	str	r3, [r7, #40]	@ 0x28
    sFilterConfig.SlaveStartFilterBank = 14; // Meaningless for single CAN
 8000630:	230e      	movs	r3, #14
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK) {
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	4619      	mov	r1, r3
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f002 f984 	bl	8002948 <HAL_CAN_ConfigFilter>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <CAN_Manager_Init+0x4e>
        return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	e020      	b.n	800068c <CAN_Manager_Init+0x90>
    }

    // Configure transmission header
    tx_header.ExtId = CAN_DTC_TRANSMIT_ID;
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <CAN_Manager_Init+0x98>)
 800064c:	4a12      	ldr	r2, [pc, #72]	@ (8000698 <CAN_Manager_Init+0x9c>)
 800064e:	605a      	str	r2, [r3, #4]
    tx_header.IDE = CAN_ID_EXT;
 8000650:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <CAN_Manager_Init+0x98>)
 8000652:	2204      	movs	r2, #4
 8000654:	609a      	str	r2, [r3, #8]
    tx_header.RTR = CAN_RTR_DATA;
 8000656:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <CAN_Manager_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
    tx_header.DLC = 8;
 800065c:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <CAN_Manager_Init+0x98>)
 800065e:	2208      	movs	r2, #8
 8000660:	611a      	str	r2, [r3, #16]
    tx_header.TransmitGlobalTime = DISABLE;
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <CAN_Manager_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	751a      	strb	r2, [r3, #20]

    if (HAL_CAN_Start(hcan) != HAL_OK) {
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f002 fa59 	bl	8002b20 <HAL_CAN_Start>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <CAN_Manager_Init+0x7c>
        return HAL_ERROR;
 8000674:	2301      	movs	r3, #1
 8000676:	e009      	b.n	800068c <CAN_Manager_Init+0x90>
    }

    // Activate both TX and RX notifications
    if (HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000678:	2103      	movs	r1, #3
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f002 fc81 	bl	8002f82 <HAL_CAN_ActivateNotification>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <CAN_Manager_Init+0x8e>
        return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	e000      	b.n	800068c <CAN_Manager_Init+0x90>
    }

    return HAL_OK;
 800068a:	2300      	movs	r3, #0
}
 800068c:	4618      	mov	r0, r3
 800068e:	3730      	adds	r7, #48	@ 0x30
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000007c 	.word	0x2000007c
 8000698:	18ff50e5 	.word	0x18ff50e5

0800069c <CAN_Manager_Transmit_DTC>:

HAL_StatusTypeDef CAN_Manager_Transmit_DTC(CAN_HandleTypeDef* hcan, uint8_t* dtc_data, uint16_t size)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	4613      	mov	r3, r2
 80006a8:	80fb      	strh	r3, [r7, #6]
    if (is_tx_in_progress) {
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <CAN_Manager_Transmit_DTC+0x54>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <CAN_Manager_Transmit_DTC+0x1c>
        return HAL_BUSY;
 80006b4:	2302      	movs	r3, #2
 80006b6:	e017      	b.n	80006e8 <CAN_Manager_Transmit_DTC+0x4c>
    }
    if (size == 0 || dtc_data == NULL) {
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d002      	beq.n	80006c4 <CAN_Manager_Transmit_DTC+0x28>
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d101      	bne.n	80006c8 <CAN_Manager_Transmit_DTC+0x2c>
        return HAL_ERROR;
 80006c4:	2301      	movs	r3, #1
 80006c6:	e00f      	b.n	80006e8 <CAN_Manager_Transmit_DTC+0x4c>
    }

    p_tx_data = dtc_data;
 80006c8:	4a0a      	ldr	r2, [pc, #40]	@ (80006f4 <CAN_Manager_Transmit_DTC+0x58>)
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	6013      	str	r3, [r2, #0]
    tx_data_size = size;
 80006ce:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <CAN_Manager_Transmit_DTC+0x5c>)
 80006d0:	88fb      	ldrh	r3, [r7, #6]
 80006d2:	8013      	strh	r3, [r2, #0]
    tx_data_sent_count = 0;
 80006d4:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <CAN_Manager_Transmit_DTC+0x60>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	801a      	strh	r2, [r3, #0]
    is_tx_in_progress = 1;
 80006da:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <CAN_Manager_Transmit_DTC+0x54>)
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]

    CAN_Send_Next_Frame(hcan);
 80006e0:	68f8      	ldr	r0, [r7, #12]
 80006e2:	f000 f825 	bl	8000730 <CAN_Send_Next_Frame>

    return HAL_OK;
 80006e6:	2300      	movs	r3, #0
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000c0 	.word	0x200000c0
 80006f4:	200000b8 	.word	0x200000b8
 80006f8:	200000bc 	.word	0x200000bc
 80006fc:	200000be 	.word	0x200000be

08000700 <CAN_Manager_Get_Command>:

CAN_Command_t CAN_Manager_Get_Command(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
    return received_command;
 8000704:	4b03      	ldr	r3, [pc, #12]	@ (8000714 <CAN_Manager_Get_Command+0x14>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b2db      	uxtb	r3, r3
}
 800070a:	4618      	mov	r0, r3
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	200000c1 	.word	0x200000c1

08000718 <CAN_Manager_Clear_Command>:

void CAN_Manager_Clear_Command(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
    received_command = CMD_NONE;
 800071c:	4b03      	ldr	r3, [pc, #12]	@ (800072c <CAN_Manager_Clear_Command+0x14>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	200000c1 	.word	0x200000c1

08000730 <CAN_Send_Next_Frame>:

// --- Private Helper Functions ---

static void CAN_Send_Next_Frame(CAN_HandleTypeDef* hcan)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    if (tx_data_sent_count >= tx_data_size) {
 8000738:	4b2f      	ldr	r3, [pc, #188]	@ (80007f8 <CAN_Send_Next_Frame+0xc8>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	b29a      	uxth	r2, r3
 800073e:	4b2f      	ldr	r3, [pc, #188]	@ (80007fc <CAN_Send_Next_Frame+0xcc>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	b29b      	uxth	r3, r3
 8000744:	429a      	cmp	r2, r3
 8000746:	d303      	bcc.n	8000750 <CAN_Send_Next_Frame+0x20>
        is_tx_in_progress = 0;
 8000748:	4b2d      	ldr	r3, [pc, #180]	@ (8000800 <CAN_Send_Next_Frame+0xd0>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
 800074e:	e050      	b.n	80007f2 <CAN_Send_Next_Frame+0xc2>
        return;
    }

    uint32_t tx_mailbox;
    uint8_t tx_payload[8] = {0};
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
    uint8_t bytes_to_send = (tx_data_size - tx_data_sent_count >= 8) ? 8 : (tx_data_size - tx_data_sent_count);
 800075a:	4b28      	ldr	r3, [pc, #160]	@ (80007fc <CAN_Send_Next_Frame+0xcc>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	b29b      	uxth	r3, r3
 8000760:	461a      	mov	r2, r3
 8000762:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <CAN_Send_Next_Frame+0xc8>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	b29b      	uxth	r3, r3
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	2b07      	cmp	r3, #7
 800076c:	dc0a      	bgt.n	8000784 <CAN_Send_Next_Frame+0x54>
 800076e:	4b23      	ldr	r3, [pc, #140]	@ (80007fc <CAN_Send_Next_Frame+0xcc>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	b29b      	uxth	r3, r3
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <CAN_Send_Next_Frame+0xc8>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	b29b      	uxth	r3, r3
 800077c:	b2db      	uxtb	r3, r3
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	b2db      	uxtb	r3, r3
 8000782:	e000      	b.n	8000786 <CAN_Send_Next_Frame+0x56>
 8000784:	2308      	movs	r3, #8
 8000786:	76fb      	strb	r3, [r7, #27]

    for (int i = 0; i < bytes_to_send; i++) {
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
 800078c:	e012      	b.n	80007b4 <CAN_Send_Next_Frame+0x84>
        tx_payload[i] = p_tx_data[tx_data_sent_count + i];
 800078e:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <CAN_Send_Next_Frame+0xd4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a19      	ldr	r2, [pc, #100]	@ (80007f8 <CAN_Send_Next_Frame+0xc8>)
 8000794:	8812      	ldrh	r2, [r2, #0]
 8000796:	b292      	uxth	r2, r2
 8000798:	4611      	mov	r1, r2
 800079a:	69fa      	ldr	r2, [r7, #28]
 800079c:	440a      	add	r2, r1
 800079e:	4413      	add	r3, r2
 80007a0:	7819      	ldrb	r1, [r3, #0]
 80007a2:	f107 020c 	add.w	r2, r7, #12
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	4413      	add	r3, r2
 80007aa:	460a      	mov	r2, r1
 80007ac:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < bytes_to_send; i++) {
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3301      	adds	r3, #1
 80007b2:	61fb      	str	r3, [r7, #28]
 80007b4:	7efb      	ldrb	r3, [r7, #27]
 80007b6:	69fa      	ldr	r2, [r7, #28]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	dbe8      	blt.n	800078e <CAN_Send_Next_Frame+0x5e>
    }
    tx_header.DLC = bytes_to_send;
 80007bc:	7efb      	ldrb	r3, [r7, #27]
 80007be:	4a12      	ldr	r2, [pc, #72]	@ (8000808 <CAN_Send_Next_Frame+0xd8>)
 80007c0:	6113      	str	r3, [r2, #16]

    if (HAL_CAN_AddTxMessage(hcan, &tx_header, tx_payload, &tx_mailbox) == HAL_OK) {
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	f107 020c 	add.w	r2, r7, #12
 80007ca:	490f      	ldr	r1, [pc, #60]	@ (8000808 <CAN_Send_Next_Frame+0xd8>)
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f002 f9eb 	bl	8002ba8 <HAL_CAN_AddTxMessage>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d109      	bne.n	80007ec <CAN_Send_Next_Frame+0xbc>
        tx_data_sent_count += bytes_to_send;
 80007d8:	7efb      	ldrb	r3, [r7, #27]
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <CAN_Send_Next_Frame+0xc8>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	4413      	add	r3, r2
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <CAN_Send_Next_Frame+0xc8>)
 80007e8:	801a      	strh	r2, [r3, #0]
 80007ea:	e002      	b.n	80007f2 <CAN_Send_Next_Frame+0xc2>
    } else {
        is_tx_in_progress = 0;
 80007ec:	4b04      	ldr	r3, [pc, #16]	@ (8000800 <CAN_Send_Next_Frame+0xd0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
    }
}
 80007f2:	3720      	adds	r7, #32
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000be 	.word	0x200000be
 80007fc:	200000bc 	.word	0x200000bc
 8000800:	200000c0 	.word	0x200000c0
 8000804:	200000b8 	.word	0x200000b8
 8000808:	2000007c 	.word	0x2000007c

0800080c <Process_CAN_Response>:

/**
 * @brief Processes the data received from the diagnostic tool.
 */
static void Process_CAN_Response(uint8_t* data)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
    // Example diagnostic frame: data[0] is command type
    // 0x31: Clear DTC, 0x19: Read DTC
    if (data[0] == 0x31) { // A simplified UDS-like command
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b31      	cmp	r3, #49	@ 0x31
 800081a:	d103      	bne.n	8000824 <Process_CAN_Response+0x18>
        received_command = CMD_CLEAR_DTC;
 800081c:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <Process_CAN_Response+0x34>)
 800081e:	2201      	movs	r2, #1
 8000820:	701a      	strb	r2, [r3, #0]
    } else if (data[0] == 0x19) {
        received_command = CMD_READ_DTC;
    }
}
 8000822:	e006      	b.n	8000832 <Process_CAN_Response+0x26>
    } else if (data[0] == 0x19) {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b19      	cmp	r3, #25
 800082a:	d102      	bne.n	8000832 <Process_CAN_Response+0x26>
        received_command = CMD_READ_DTC;
 800082c:	4b04      	ldr	r3, [pc, #16]	@ (8000840 <Process_CAN_Response+0x34>)
 800082e:	2202      	movs	r2, #2
 8000830:	701a      	strb	r2, [r3, #0]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	200000c1 	.word	0x200000c1

08000844 <HAL_CAN_TxMailbox0CompleteCallback>:

// --- HAL CAN Callback Functions ---

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
    if (is_tx_in_progress) CAN_Send_Next_Frame(hcan);
 800084c:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <HAL_CAN_TxMailbox0CompleteCallback+0x18>
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ff6a 	bl	8000730 <CAN_Send_Next_Frame>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200000c0 	.word	0x200000c0

08000868 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
    if (is_tx_in_progress) CAN_Send_Next_Frame(hcan);
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d002      	beq.n	8000880 <HAL_CAN_TxMailbox1CompleteCallback+0x18>
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff58 	bl	8000730 <CAN_Send_Next_Frame>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000c0 	.word	0x200000c0

0800088c <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    if (is_tx_in_progress) CAN_Send_Next_Frame(hcan);
 8000894:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d002      	beq.n	80008a4 <HAL_CAN_TxMailbox2CompleteCallback+0x18>
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff ff46 	bl	8000730 <CAN_Send_Next_Frame>
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200000c0 	.word	0x200000c0

080008b0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @brief  FIFO 0 message pending callback.
  * @param  hcan: pointer to a CAN_HandleTypeDef structure.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK) {
 80008b8:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80008ba:	4a0b      	ldr	r2, [pc, #44]	@ (80008e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80008bc:	2100      	movs	r1, #0
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f002 fa4d 	bl	8002d5e <HAL_CAN_GetRxMessage>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d107      	bne.n	80008da <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
        // Check if the message is for us (optional, as filter should handle it)
        if (rx_header.ExtId == CAN_DIAG_RECEIVE_ID) {
 80008ca:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	4a07      	ldr	r2, [pc, #28]	@ (80008ec <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d102      	bne.n	80008da <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
            Process_CAN_Response(rx_data);
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80008d6:	f7ff ff99 	bl	800080c <Process_CAN_Response>
        }
    }
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000b0 	.word	0x200000b0
 80008e8:	20000094 	.word	0x20000094
 80008ec:	18db33f1 	.word	0x18db33f1

080008f0 <DTC_Set>:
/**
 * @brief Sets a specific DTC to indicate a fault has occurred.
 * @param code The DTC to set.
 */
void DTC_Set(DTC_Code_t code)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
    if (code < DTC_CODE_COUNT) {
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d80a      	bhi.n	8000916 <DTC_Set+0x26>
        uint32_t old_bitmask = dtc_status_bitmask;
 8000900:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <DTC_Set+0x34>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	60fb      	str	r3, [r7, #12]
        dtc_status_bitmask |= (1UL << code);
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2201      	movs	r2, #1
 800090a:	409a      	lsls	r2, r3
 800090c:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <DTC_Set+0x34>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4313      	orrs	r3, r2
 8000912:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <DTC_Set+0x34>)
 8000914:	6013      	str	r3, [r2, #0]
        // If the status has changed, save it to non-volatile memory.
        if (old_bitmask != dtc_status_bitmask) {
            // Example: EEPROM_Write(DTC_STATUS_ADDRESS, dtc_status_bitmask);
        }
    }
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	200000c4 	.word	0x200000c4

08000928 <DTC_Clear>:
/**
 * @brief Clears a specific DTC, indicating a fault is resolved.
 * @param code The DTC to clear.
 */
void DTC_Clear(DTC_Code_t code)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
    if (code < DTC_CODE_COUNT) {
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b03      	cmp	r3, #3
 8000936:	d80c      	bhi.n	8000952 <DTC_Clear+0x2a>
        uint32_t old_bitmask = dtc_status_bitmask;
 8000938:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <DTC_Clear+0x38>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	60fb      	str	r3, [r7, #12]
        dtc_status_bitmask &= ~(1UL << code);
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2201      	movs	r2, #1
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	43da      	mvns	r2, r3
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <DTC_Clear+0x38>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4013      	ands	r3, r2
 800094e:	4a04      	ldr	r2, [pc, #16]	@ (8000960 <DTC_Clear+0x38>)
 8000950:	6013      	str	r3, [r2, #0]
        // If the status has changed, save it to non-volatile memory.
        if (old_bitmask != dtc_status_bitmask) {
            // Example: EEPROM_Write(DTC_STATUS_ADDRESS, dtc_status_bitmask);
        }
    }
}
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	200000c4 	.word	0x200000c4

08000964 <DTC_ClearAll>:

/**
 * @brief Clears all DTCs.
 */
void DTC_ClearAll(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
    dtc_status_bitmask = 0;
 8000968:	4b03      	ldr	r3, [pc, #12]	@ (8000978 <DTC_ClearAll+0x14>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
    // Example: EEPROM_Write(DTC_STATUS_ADDRESS, dtc_status_bitmask);
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	200000c4 	.word	0x200000c4

0800097c <DTC_GetStatusBitmask>:
/**
 * @brief Gets the entire DTC status bitmask.
 * @return The 32-bit bitmask representing all DTC statuses.
 */
uint32_t DTC_GetStatusBitmask(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
    return dtc_status_bitmask;
 8000980:	4b03      	ldr	r3, [pc, #12]	@ (8000990 <DTC_GetStatusBitmask+0x14>)
 8000982:	681b      	ldr	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	200000c4 	.word	0x200000c4

08000994 <EEPROM_CS_Low>:

/**
 * @brief Pulls the Chip Select (CS) pin LOW.
 */
static void EEPROM_CS_Low(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(s_cs_port, s_cs_pin, GPIO_PIN_RESET);
 8000998:	4b04      	ldr	r3, [pc, #16]	@ (80009ac <EEPROM_CS_Low+0x18>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a04      	ldr	r2, [pc, #16]	@ (80009b0 <EEPROM_CS_Low+0x1c>)
 800099e:	8811      	ldrh	r1, [r2, #0]
 80009a0:	2200      	movs	r2, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 fbe6 	bl	8004174 <HAL_GPIO_WritePin>
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000cc 	.word	0x200000cc
 80009b0:	200000d0 	.word	0x200000d0

080009b4 <EEPROM_CS_High>:

/**
 * @brief Pulls the Chip Select (CS) pin HIGH.
 */
static void EEPROM_CS_High(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(s_cs_port, s_cs_pin, GPIO_PIN_SET);
 80009b8:	4b04      	ldr	r3, [pc, #16]	@ (80009cc <EEPROM_CS_High+0x18>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a04      	ldr	r2, [pc, #16]	@ (80009d0 <EEPROM_CS_High+0x1c>)
 80009be:	8811      	ldrh	r1, [r2, #0]
 80009c0:	2201      	movs	r2, #1
 80009c2:	4618      	mov	r0, r3
 80009c4:	f003 fbd6 	bl	8004174 <HAL_GPIO_WritePin>
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000cc 	.word	0x200000cc
 80009d0:	200000d0 	.word	0x200000d0

080009d4 <EEPROM_WriteEnable>:

/**
 * @brief Sends the Write Enable (WREN) command to the EEPROM.
 */
static void EEPROM_WriteEnable(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
    uint8_t cmd = EEPROM_CMD_WREN;
 80009da:	2306      	movs	r3, #6
 80009dc:	71fb      	strb	r3, [r7, #7]
    EEPROM_CS_Low();
 80009de:	f7ff ffd9 	bl	8000994 <EEPROM_CS_Low>
    HAL_SPI_Transmit(s_hspi, &cmd, 1, HAL_MAX_DELAY);
 80009e2:	4b07      	ldr	r3, [pc, #28]	@ (8000a00 <EEPROM_WriteEnable+0x2c>)
 80009e4:	6818      	ldr	r0, [r3, #0]
 80009e6:	1df9      	adds	r1, r7, #7
 80009e8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ec:	2201      	movs	r2, #1
 80009ee:	f006 fd8e 	bl	800750e <HAL_SPI_Transmit>
    EEPROM_CS_High();
 80009f2:	f7ff ffdf 	bl	80009b4 <EEPROM_CS_High>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000c8 	.word	0x200000c8

08000a04 <EEPROM_WaitForWriteComplete>:

/**
 * @brief Polls the EEPROM's status register until the Write-In-Progress (WIP) bit is cleared.
 */
static void EEPROM_WaitForWriteComplete(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
    uint8_t cmd = EEPROM_CMD_RDSR;
 8000a0a:	2305      	movs	r3, #5
 8000a0c:	71fb      	strb	r3, [r7, #7]
    uint8_t status = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71bb      	strb	r3, [r7, #6]

    EEPROM_CS_Low();
 8000a12:	f7ff ffbf 	bl	8000994 <EEPROM_CS_Low>
    HAL_SPI_Transmit(s_hspi, &cmd, 1, HAL_MAX_DELAY);
 8000a16:	4b0d      	ldr	r3, [pc, #52]	@ (8000a4c <EEPROM_WaitForWriteComplete+0x48>)
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	1df9      	adds	r1, r7, #7
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a20:	2201      	movs	r2, #1
 8000a22:	f006 fd74 	bl	800750e <HAL_SPI_Transmit>
    do {
        HAL_SPI_Receive(s_hspi, &status, 1, HAL_MAX_DELAY);
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <EEPROM_WaitForWriteComplete+0x48>)
 8000a28:	6818      	ldr	r0, [r3, #0]
 8000a2a:	1db9      	adds	r1, r7, #6
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a30:	2201      	movs	r2, #1
 8000a32:	f006 fea8 	bl	8007786 <HAL_SPI_Receive>
    } while (status & EEPROM_WIP_BIT);
 8000a36:	79bb      	ldrb	r3, [r7, #6]
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d1f2      	bne.n	8000a26 <EEPROM_WaitForWriteComplete+0x22>
    EEPROM_CS_High();
 8000a40:	f7ff ffb8 	bl	80009b4 <EEPROM_CS_High>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200000c8 	.word	0x200000c8

08000a50 <EEPROM_Init>:

// --- Public API Functions ---

void EEPROM_Init(SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	80fb      	strh	r3, [r7, #6]
    s_hspi = hspi;
 8000a5e:	4a07      	ldr	r2, [pc, #28]	@ (8000a7c <EEPROM_Init+0x2c>)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	6013      	str	r3, [r2, #0]
    s_cs_port = cs_port;
 8000a64:	4a06      	ldr	r2, [pc, #24]	@ (8000a80 <EEPROM_Init+0x30>)
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	6013      	str	r3, [r2, #0]
    s_cs_pin = cs_pin;
 8000a6a:	4a06      	ldr	r2, [pc, #24]	@ (8000a84 <EEPROM_Init+0x34>)
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	8013      	strh	r3, [r2, #0]

    // Ensure CS is high initially
    EEPROM_CS_High();
 8000a70:	f7ff ffa0 	bl	80009b4 <EEPROM_CS_High>
}
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200000c8 	.word	0x200000c8
 8000a80:	200000cc 	.word	0x200000cc
 8000a84:	200000d0 	.word	0x200000d0

08000a88 <EEPROM_Read_DMA>:

HAL_StatusTypeDef EEPROM_Read_DMA(uint16_t address, uint8_t* p_data, uint16_t size)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	80fb      	strh	r3, [r7, #6]
 8000a94:	4613      	mov	r3, r2
 8000a96:	80bb      	strh	r3, [r7, #4]
    uint8_t header[3];
    header[0] = EEPROM_CMD_READ;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	733b      	strb	r3, [r7, #12]
    header[1] = (address >> 8) & 0xFF; // MSB
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	0a1b      	lsrs	r3, r3, #8
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	737b      	strb	r3, [r7, #13]
    header[2] = address & 0xFF;        // LSB
 8000aa6:	88fb      	ldrh	r3, [r7, #6]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	73bb      	strb	r3, [r7, #14]

    spi_dma_rx_complete = 0;
 8000aac:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <EEPROM_Read_DMA+0x84>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]

    EEPROM_CS_Low();
 8000ab2:	f7ff ff6f 	bl	8000994 <EEPROM_CS_Low>
    // Send Read command and address
    if (HAL_SPI_Transmit(s_hspi, header, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000ab6:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <EEPROM_Read_DMA+0x88>)
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	f107 010c 	add.w	r1, r7, #12
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	f006 fd23 	bl	800750e <HAL_SPI_Transmit>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <EEPROM_Read_DMA+0x4e>
        EEPROM_CS_High();
 8000ace:	f7ff ff71 	bl	80009b4 <EEPROM_CS_High>
        return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e016      	b.n	8000b04 <EEPROM_Read_DMA+0x7c>
    }

    // Receive data using DMA
    if (HAL_SPI_Receive_DMA(s_hspi, p_data, size) != HAL_OK) {
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <EEPROM_Read_DMA+0x88>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	88ba      	ldrh	r2, [r7, #4]
 8000adc:	6839      	ldr	r1, [r7, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f007 f9ba 	bl	8007e58 <HAL_SPI_Receive_DMA>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <EEPROM_Read_DMA+0x6a>
        EEPROM_CS_High();
 8000aea:	f7ff ff63 	bl	80009b4 <EEPROM_CS_High>
        return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e008      	b.n	8000b04 <EEPROM_Read_DMA+0x7c>
    }

    // Wait for DMA transfer to complete
    while (spi_dma_rx_complete == 0) {
 8000af2:	bf00      	nop
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <EEPROM_Read_DMA+0x84>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0fa      	beq.n	8000af4 <EEPROM_Read_DMA+0x6c>
        // You can add a timeout mechanism here if needed
    }

    EEPROM_CS_High();
 8000afe:	f7ff ff59 	bl	80009b4 <EEPROM_CS_High>
    return HAL_OK;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200000d3 	.word	0x200000d3
 8000b10:	200000c8 	.word	0x200000c8

08000b14 <EEPROM_Write_DMA>:

HAL_StatusTypeDef EEPROM_Write_DMA(uint16_t address, uint8_t* p_data, uint16_t size)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	80fb      	strh	r3, [r7, #6]
 8000b20:	4613      	mov	r3, r2
 8000b22:	80bb      	strh	r3, [r7, #4]
    uint8_t header[3];
    uint16_t bytes_to_write;

    while (size > 0) {
 8000b24:	e052      	b.n	8000bcc <EEPROM_Write_DMA+0xb8>
        EEPROM_WriteEnable();
 8000b26:	f7ff ff55 	bl	80009d4 <EEPROM_WriteEnable>

        uint16_t page_offset = address % EEPROM_PAGE_SIZE;
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b30:	82fb      	strh	r3, [r7, #22]
        uint16_t bytes_left_in_page = EEPROM_PAGE_SIZE - page_offset;
 8000b32:	8afb      	ldrh	r3, [r7, #22]
 8000b34:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000b38:	82bb      	strh	r3, [r7, #20]
        bytes_to_write = (size > bytes_left_in_page) ? bytes_left_in_page : size;
 8000b3a:	88ba      	ldrh	r2, [r7, #4]
 8000b3c:	8abb      	ldrh	r3, [r7, #20]
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	bf28      	it	cs
 8000b42:	4613      	movcs	r3, r2
 8000b44:	827b      	strh	r3, [r7, #18]

        header[0] = EEPROM_CMD_WRITE;
 8000b46:	2302      	movs	r3, #2
 8000b48:	733b      	strb	r3, [r7, #12]
        header[1] = (address >> 8) & 0xFF; // MSB
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	737b      	strb	r3, [r7, #13]
        header[2] = address & 0xFF;        // LSB
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	73bb      	strb	r3, [r7, #14]

        spi_dma_tx_complete = 0;
 8000b5a:	4b20      	ldr	r3, [pc, #128]	@ (8000bdc <EEPROM_Write_DMA+0xc8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]

        EEPROM_CS_Low();
 8000b60:	f7ff ff18 	bl	8000994 <EEPROM_CS_Low>

        // Send Write command and address
        if (HAL_SPI_Transmit(s_hspi, header, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000b64:	4b1e      	ldr	r3, [pc, #120]	@ (8000be0 <EEPROM_Write_DMA+0xcc>)
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	f107 010c 	add.w	r1, r7, #12
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b70:	2203      	movs	r2, #3
 8000b72:	f006 fccc 	bl	800750e <HAL_SPI_Transmit>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <EEPROM_Write_DMA+0x70>
            EEPROM_CS_High();
 8000b7c:	f7ff ff1a 	bl	80009b4 <EEPROM_CS_High>
            return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e027      	b.n	8000bd4 <EEPROM_Write_DMA+0xc0>
        }

        // Transmit data using DMA
        if (HAL_SPI_Transmit_DMA(s_hspi, p_data, bytes_to_write) != HAL_OK) {
 8000b84:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <EEPROM_Write_DMA+0xcc>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	8a7a      	ldrh	r2, [r7, #18]
 8000b8a:	6839      	ldr	r1, [r7, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f007 f8ad 	bl	8007cec <HAL_SPI_Transmit_DMA>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d003      	beq.n	8000ba0 <EEPROM_Write_DMA+0x8c>
            EEPROM_CS_High();
 8000b98:	f7ff ff0c 	bl	80009b4 <EEPROM_CS_High>
            return HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e019      	b.n	8000bd4 <EEPROM_Write_DMA+0xc0>
        }

        // Wait for DMA transfer to complete
        while (spi_dma_tx_complete == 0) {
 8000ba0:	bf00      	nop
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <EEPROM_Write_DMA+0xc8>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0fa      	beq.n	8000ba2 <EEPROM_Write_DMA+0x8e>
            // You can add a timeout mechanism here if needed
        }

        EEPROM_CS_High();
 8000bac:	f7ff ff02 	bl	80009b4 <EEPROM_CS_High>

        // Wait for the internal write cycle of the EEPROM to finish
        EEPROM_WaitForWriteComplete();
 8000bb0:	f7ff ff28 	bl	8000a04 <EEPROM_WaitForWriteComplete>

        address += bytes_to_write;
 8000bb4:	88fa      	ldrh	r2, [r7, #6]
 8000bb6:	8a7b      	ldrh	r3, [r7, #18]
 8000bb8:	4413      	add	r3, r2
 8000bba:	80fb      	strh	r3, [r7, #6]
        p_data += bytes_to_write;
 8000bbc:	8a7b      	ldrh	r3, [r7, #18]
 8000bbe:	683a      	ldr	r2, [r7, #0]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	603b      	str	r3, [r7, #0]
        size -= bytes_to_write;
 8000bc4:	88ba      	ldrh	r2, [r7, #4]
 8000bc6:	8a7b      	ldrh	r3, [r7, #18]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	80bb      	strh	r3, [r7, #4]
    while (size > 0) {
 8000bcc:	88bb      	ldrh	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1a9      	bne.n	8000b26 <EEPROM_Write_DMA+0x12>
    }

    return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200000d2 	.word	0x200000d2
 8000be0:	200000c8 	.word	0x200000c8

08000be4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == s_hspi->Instance) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <HAL_SPI_TxCpltCallback+0x28>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d102      	bne.n	8000c00 <HAL_SPI_TxCpltCallback+0x1c>
        spi_dma_tx_complete = 1;
 8000bfa:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <HAL_SPI_TxCpltCallback+0x2c>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
    }
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	200000c8 	.word	0x200000c8
 8000c10:	200000d2 	.word	0x200000d2

08000c14 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == s_hspi->Instance) {
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_SPI_RxCpltCallback+0x28>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d102      	bne.n	8000c30 <HAL_SPI_RxCpltCallback+0x1c>
        spi_dma_rx_complete = 1;
 8000c2a:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <HAL_SPI_RxCpltCallback+0x2c>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
    }
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	200000c8 	.word	0x200000c8
 8000c40:	200000d3 	.word	0x200000d3

08000c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c48:	f001 fa9e 	bl	8002188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4c:	f000 f884 	bl	8000d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c50:	f000 fabe 	bl	80011d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c54:	f000 fa56 	bl	8001104 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c58:	f000 f8dc 	bl	8000e14 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000c5c:	f000 f92c 	bl	8000eb8 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000c60:	f000 f95e 	bl	8000f20 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000c64:	f000 f98a 	bl	8000f7c <MX_I2C2_Init>
  MX_SPI1_Init();
 8000c68:	f000 f9b6 	bl	8000fd8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000c6c:	f000 f9ea 	bl	8001044 <MX_SPI2_Init>
  MX_UART4_Init();
 8000c70:	f000 fa1e 	bl	80010b0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  mp5475gu_init();
 8000c74:	f000 fc64 	bl	8001540 <mp5475gu_init>
  EEPROM_Init(&hspi1, GPIOC, GPIO_PIN_4);
 8000c78:	2210      	movs	r2, #16
 8000c7a:	4921      	ldr	r1, [pc, #132]	@ (8000d00 <main+0xbc>)
 8000c7c:	4821      	ldr	r0, [pc, #132]	@ (8000d04 <main+0xc0>)
 8000c7e:	f7ff fee7 	bl	8000a50 <EEPROM_Init>
  CAN_Manager_Init(&hcan1);
 8000c82:	4821      	ldr	r0, [pc, #132]	@ (8000d08 <main+0xc4>)
 8000c84:	f7ff fcba 	bl	80005fc <CAN_Manager_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c88:	f008 feb8 	bl	80099fc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of CommMutexHandle */
  CommMutexHandleHandle = osMutexNew(&CommMutexHandle_attributes);
 8000c8c:	481f      	ldr	r0, [pc, #124]	@ (8000d0c <main+0xc8>)
 8000c8e:	f008 ffac 	bl	8009bea <osMutexNew>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4a1e      	ldr	r2, [pc, #120]	@ (8000d10 <main+0xcc>)
 8000c96:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CanQueue */
  CanQueueHandle = osMessageQueueNew (8, 8, &CanQueue_attributes);
 8000c98:	4a1e      	ldr	r2, [pc, #120]	@ (8000d14 <main+0xd0>)
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	2008      	movs	r0, #8
 8000c9e:	f009 f9d1 	bl	800a044 <osMessageQueueNew>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d18 <main+0xd4>)
 8000ca6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8000d1c <main+0xd8>)
 8000caa:	2100      	movs	r1, #0
 8000cac:	481c      	ldr	r0, [pc, #112]	@ (8000d20 <main+0xdc>)
 8000cae:	f008 feef 	bl	8009a90 <osThreadNew>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d24 <main+0xe0>)
 8000cb6:	6013      	str	r3, [r2, #0]

  /* creation of I2CTask */
  I2CTaskHandle = osThreadNew(StartI2CTask, NULL, &I2CTask_attributes);
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d28 <main+0xe4>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	481b      	ldr	r0, [pc, #108]	@ (8000d2c <main+0xe8>)
 8000cbe:	f008 fee7 	bl	8009a90 <osThreadNew>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d30 <main+0xec>)
 8000cc6:	6013      	str	r3, [r2, #0]

  /* creation of SPITask */
  SPITaskHandle = osThreadNew(StartSPITask, NULL, &SPITask_attributes);
 8000cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8000d34 <main+0xf0>)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	481a      	ldr	r0, [pc, #104]	@ (8000d38 <main+0xf4>)
 8000cce:	f008 fedf 	bl	8009a90 <osThreadNew>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a19      	ldr	r2, [pc, #100]	@ (8000d3c <main+0xf8>)
 8000cd6:	6013      	str	r3, [r2, #0]

  /* creation of CANTask */
  CANTaskHandle = osThreadNew(StartCANTask, NULL, &CANTask_attributes);
 8000cd8:	4a19      	ldr	r2, [pc, #100]	@ (8000d40 <main+0xfc>)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4819      	ldr	r0, [pc, #100]	@ (8000d44 <main+0x100>)
 8000cde:	f008 fed7 	bl	8009a90 <osThreadNew>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4a18      	ldr	r2, [pc, #96]	@ (8000d48 <main+0x104>)
 8000ce6:	6013      	str	r3, [r2, #0]

  /* creation of UARTTask */
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 8000ce8:	4a18      	ldr	r2, [pc, #96]	@ (8000d4c <main+0x108>)
 8000cea:	2100      	movs	r1, #0
 8000cec:	4818      	ldr	r0, [pc, #96]	@ (8000d50 <main+0x10c>)
 8000cee:	f008 fecf 	bl	8009a90 <osThreadNew>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4a17      	ldr	r2, [pc, #92]	@ (8000d54 <main+0x110>)
 8000cf6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cf8:	f008 fea4 	bl	8009a44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <main+0xb8>
 8000d00:	40020800 	.word	0x40020800
 8000d04:	2000036c 	.word	0x2000036c
 8000d08:	2000011c 	.word	0x2000011c
 8000d0c:	0800df0c 	.word	0x0800df0c
 8000d10:	200005f8 	.word	0x200005f8
 8000d14:	0800def4 	.word	0x0800def4
 8000d18:	200005f4 	.word	0x200005f4
 8000d1c:	0800de40 	.word	0x0800de40
 8000d20:	080012c5 	.word	0x080012c5
 8000d24:	200005e0 	.word	0x200005e0
 8000d28:	0800de64 	.word	0x0800de64
 8000d2c:	080012d5 	.word	0x080012d5
 8000d30:	200005e4 	.word	0x200005e4
 8000d34:	0800de88 	.word	0x0800de88
 8000d38:	080013a1 	.word	0x080013a1
 8000d3c:	200005e8 	.word	0x200005e8
 8000d40:	0800deac 	.word	0x0800deac
 8000d44:	080013f1 	.word	0x080013f1
 8000d48:	200005ec 	.word	0x200005ec
 8000d4c:	0800ded0 	.word	0x0800ded0
 8000d50:	08001451 	.word	0x08001451
 8000d54:	200005f0 	.word	0x200005f0

08000d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b094      	sub	sp, #80	@ 0x50
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	2234      	movs	r2, #52	@ 0x34
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f00c fb9c 	bl	800d4a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	f107 0308 	add.w	r3, r7, #8
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	4b22      	ldr	r3, [pc, #136]	@ (8000e0c <SystemClock_Config+0xb4>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d84:	4a21      	ldr	r2, [pc, #132]	@ (8000e0c <SystemClock_Config+0xb4>)
 8000d86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <SystemClock_Config+0xb4>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d98:	2300      	movs	r3, #0
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e10 <SystemClock_Config+0xb8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e10 <SystemClock_Config+0xb8>)
 8000da2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <SystemClock_Config+0xb8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dbc:	2310      	movs	r3, #16
 8000dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f006 f893 	bl	8006ef4 <HAL_RCC_OscConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000dd4:	f000 fbae 	bl	8001534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd8:	230f      	movs	r3, #15
 8000dda:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dec:	f107 0308 	add.w	r3, r7, #8
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f005 fe9e 	bl	8006b34 <HAL_RCC_ClockConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000dfe:	f000 fb99 	bl	8001534 <Error_Handler>
  }
}
 8000e02:	bf00      	nop
 8000e04:	3750      	adds	r7, #80	@ 0x50
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40007000 	.word	0x40007000

08000e14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e26:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <MX_ADC1_Init+0x98>)
 8000e28:	4a21      	ldr	r2, [pc, #132]	@ (8000eb0 <MX_ADC1_Init+0x9c>)
 8000e2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <MX_ADC1_Init+0x98>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e32:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <MX_ADC1_Init+0x98>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e38:	4b1c      	ldr	r3, [pc, #112]	@ (8000eac <MX_ADC1_Init+0x98>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <MX_ADC1_Init+0x98>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e44:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <MX_ADC1_Init+0x98>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e4c:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <MX_ADC1_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e52:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <MX_ADC1_Init+0x98>)
 8000e54:	4a17      	ldr	r2, [pc, #92]	@ (8000eb4 <MX_ADC1_Init+0xa0>)
 8000e56:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e58:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <MX_ADC1_Init+0x98>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <MX_ADC1_Init+0x98>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e64:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <MX_ADC1_Init+0x98>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <MX_ADC1_Init+0x98>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e72:	480e      	ldr	r0, [pc, #56]	@ (8000eac <MX_ADC1_Init+0x98>)
 8000e74:	f001 f9fa 	bl	800226c <HAL_ADC_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e7e:	f000 fb59 	bl	8001534 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e86:	2301      	movs	r3, #1
 8000e88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4619      	mov	r1, r3
 8000e92:	4806      	ldr	r0, [pc, #24]	@ (8000eac <MX_ADC1_Init+0x98>)
 8000e94:	f001 fa2e 	bl	80022f4 <HAL_ADC_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e9e:	f000 fb49 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000d4 	.word	0x200000d4
 8000eb0:	40012000 	.word	0x40012000
 8000eb4:	0f000001 	.word	0x0f000001

08000eb8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ebc:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <MX_CAN1_Init+0x60>)
 8000ebe:	4a17      	ldr	r2, [pc, #92]	@ (8000f1c <MX_CAN1_Init+0x64>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <MX_CAN1_Init+0x60>)
 8000ec4:	2210      	movs	r2, #16
 8000ec6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ec8:	4b13      	ldr	r3, [pc, #76]	@ (8000f18 <MX_CAN1_Init+0x60>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ece:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <MX_CAN1_Init+0x60>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000ed4:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <MX_CAN1_Init+0x60>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000eda:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <MX_CAN1_Init+0x60>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <MX_CAN1_Init+0x60>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <MX_CAN1_Init+0x60>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <MX_CAN1_Init+0x60>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <MX_CAN1_Init+0x60>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <MX_CAN1_Init+0x60>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <MX_CAN1_Init+0x60>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	@ (8000f18 <MX_CAN1_Init+0x60>)
 8000f06:	f001 fc23 	bl	8002750 <HAL_CAN_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000f10:	f000 fb10 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2000011c 	.word	0x2000011c
 8000f1c:	40006400 	.word	0x40006400

08000f20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f26:	4a13      	ldr	r2, [pc, #76]	@ (8000f74 <MX_I2C1_Init+0x54>)
 8000f28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f2c:	4a12      	ldr	r2, [pc, #72]	@ (8000f78 <MX_I2C1_Init+0x58>)
 8000f2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f50:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f5c:	4804      	ldr	r0, [pc, #16]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f5e:	f003 f923 	bl	80041a8 <HAL_I2C_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f68:	f000 fae4 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000144 	.word	0x20000144
 8000f74:	40005400 	.word	0x40005400
 8000f78:	000186a0 	.word	0x000186a0

08000f7c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f80:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <MX_I2C2_Init+0x50>)
 8000f82:	4a13      	ldr	r2, [pc, #76]	@ (8000fd0 <MX_I2C2_Init+0x54>)
 8000f84:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f86:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <MX_I2C2_Init+0x50>)
 8000f88:	4a12      	ldr	r2, [pc, #72]	@ (8000fd4 <MX_I2C2_Init+0x58>)
 8000f8a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <MX_I2C2_Init+0x50>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <MX_I2C2_Init+0x50>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <MX_I2C2_Init+0x50>)
 8000f9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f9e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <MX_I2C2_Init+0x50>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <MX_I2C2_Init+0x50>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fac:	4b07      	ldr	r3, [pc, #28]	@ (8000fcc <MX_I2C2_Init+0x50>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <MX_I2C2_Init+0x50>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fb8:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <MX_I2C2_Init+0x50>)
 8000fba:	f003 f8f5 	bl	80041a8 <HAL_I2C_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fc4:	f000 fab6 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000198 	.word	0x20000198
 8000fd0:	40005800 	.word	0x40005800
 8000fd4:	000186a0 	.word	0x000186a0

08000fd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	@ (800103c <MX_SPI1_Init+0x64>)
 8000fde:	4a18      	ldr	r2, [pc, #96]	@ (8001040 <MX_SPI1_Init+0x68>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	@ (800103c <MX_SPI1_Init+0x64>)
 8000fe4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fe8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fea:	4b14      	ldr	r3, [pc, #80]	@ (800103c <MX_SPI1_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <MX_SPI1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <MX_SPI1_Init+0x64>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <MX_SPI1_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <MX_SPI1_Init+0x64>)
 8001004:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001008:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <MX_SPI1_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001010:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <MX_SPI1_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <MX_SPI1_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800101c:	4b07      	ldr	r3, [pc, #28]	@ (800103c <MX_SPI1_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <MX_SPI1_Init+0x64>)
 8001024:	220a      	movs	r2, #10
 8001026:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001028:	4804      	ldr	r0, [pc, #16]	@ (800103c <MX_SPI1_Init+0x64>)
 800102a:	f006 f9e7 	bl	80073fc <HAL_SPI_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001034:	f000 fa7e 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000036c 	.word	0x2000036c
 8001040:	40013000 	.word	0x40013000

08001044 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001048:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <MX_SPI2_Init+0x64>)
 800104a:	4a18      	ldr	r2, [pc, #96]	@ (80010ac <MX_SPI2_Init+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800104e:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <MX_SPI2_Init+0x64>)
 8001050:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001054:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <MX_SPI2_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <MX_SPI2_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <MX_SPI2_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001068:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <MX_SPI2_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <MX_SPI2_Init+0x64>)
 8001070:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001074:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001076:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <MX_SPI2_Init+0x64>)
 8001078:	2200      	movs	r2, #0
 800107a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107c:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <MX_SPI2_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001082:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <MX_SPI2_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001088:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <MX_SPI2_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <MX_SPI2_Init+0x64>)
 8001090:	220a      	movs	r2, #10
 8001092:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <MX_SPI2_Init+0x64>)
 8001096:	f006 f9b1 	bl	80073fc <HAL_SPI_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010a0:	f000 fa48 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200003c4 	.word	0x200003c4
 80010ac:	40003800 	.word	0x40003800

080010b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <MX_UART4_Init+0x4c>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <MX_UART4_Init+0x50>)
 80010b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80010ba:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <MX_UART4_Init+0x4c>)
 80010bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <MX_UART4_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <MX_UART4_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <MX_UART4_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <MX_UART4_Init+0x4c>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <MX_UART4_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <MX_UART4_Init+0x4c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_UART4_Init+0x4c>)
 80010e8:	f007 fc30 	bl	800894c <HAL_UART_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80010f2:	f000 fa1f 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000059c 	.word	0x2000059c
 8001100:	40004c00 	.word	0x40004c00

08001104 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4b2f      	ldr	r3, [pc, #188]	@ (80011cc <MX_DMA_Init+0xc8>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a2e      	ldr	r2, [pc, #184]	@ (80011cc <MX_DMA_Init+0xc8>)
 8001114:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b2c      	ldr	r3, [pc, #176]	@ (80011cc <MX_DMA_Init+0xc8>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	4b28      	ldr	r3, [pc, #160]	@ (80011cc <MX_DMA_Init+0xc8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	4a27      	ldr	r2, [pc, #156]	@ (80011cc <MX_DMA_Init+0xc8>)
 8001130:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001134:	6313      	str	r3, [r2, #48]	@ 0x30
 8001136:	4b25      	ldr	r3, [pc, #148]	@ (80011cc <MX_DMA_Init+0xc8>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2105      	movs	r1, #5
 8001146:	200b      	movs	r0, #11
 8001148:	f002 fa2d 	bl	80035a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800114c:	200b      	movs	r0, #11
 800114e:	f002 fa46 	bl	80035de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2105      	movs	r1, #5
 8001156:	200d      	movs	r0, #13
 8001158:	f002 fa25 	bl	80035a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800115c:	200d      	movs	r0, #13
 800115e:	f002 fa3e 	bl	80035de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2105      	movs	r1, #5
 8001166:	200e      	movs	r0, #14
 8001168:	f002 fa1d 	bl	80035a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800116c:	200e      	movs	r0, #14
 800116e:	f002 fa36 	bl	80035de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2105      	movs	r1, #5
 8001176:	200f      	movs	r0, #15
 8001178:	f002 fa15 	bl	80035a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800117c:	200f      	movs	r0, #15
 800117e:	f002 fa2e 	bl	80035de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2011      	movs	r0, #17
 8001188:	f002 fa0d 	bl	80035a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800118c:	2011      	movs	r0, #17
 800118e:	f002 fa26 	bl	80035de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2105      	movs	r1, #5
 8001196:	202f      	movs	r0, #47	@ 0x2f
 8001198:	f002 fa05 	bl	80035a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800119c:	202f      	movs	r0, #47	@ 0x2f
 800119e:	f002 fa1e 	bl	80035de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2105      	movs	r1, #5
 80011a6:	2038      	movs	r0, #56	@ 0x38
 80011a8:	f002 f9fd 	bl	80035a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011ac:	2038      	movs	r0, #56	@ 0x38
 80011ae:	f002 fa16 	bl	80035de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	203b      	movs	r0, #59	@ 0x3b
 80011b8:	f002 f9f5 	bl	80035a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80011bc:	203b      	movs	r0, #59	@ 0x3b
 80011be:	f002 fa0e 	bl	80035de <HAL_NVIC_EnableIRQ>

}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800

080011d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	@ 0x28
 80011d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b34      	ldr	r3, [pc, #208]	@ (80012bc <MX_GPIO_Init+0xec>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a33      	ldr	r2, [pc, #204]	@ (80012bc <MX_GPIO_Init+0xec>)
 80011f0:	f043 0320 	orr.w	r3, r3, #32
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b31      	ldr	r3, [pc, #196]	@ (80012bc <MX_GPIO_Init+0xec>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0320 	and.w	r3, r3, #32
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b2d      	ldr	r3, [pc, #180]	@ (80012bc <MX_GPIO_Init+0xec>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a2c      	ldr	r2, [pc, #176]	@ (80012bc <MX_GPIO_Init+0xec>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b2a      	ldr	r3, [pc, #168]	@ (80012bc <MX_GPIO_Init+0xec>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	4b26      	ldr	r3, [pc, #152]	@ (80012bc <MX_GPIO_Init+0xec>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a25      	ldr	r2, [pc, #148]	@ (80012bc <MX_GPIO_Init+0xec>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b23      	ldr	r3, [pc, #140]	@ (80012bc <MX_GPIO_Init+0xec>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <MX_GPIO_Init+0xec>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a1e      	ldr	r2, [pc, #120]	@ (80012bc <MX_GPIO_Init+0xec>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <MX_GPIO_Init+0xec>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <MX_GPIO_Init+0xec>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a17      	ldr	r2, [pc, #92]	@ (80012bc <MX_GPIO_Init+0xec>)
 8001260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <MX_GPIO_Init+0xec>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	2107      	movs	r1, #7
 8001276:	4812      	ldr	r0, [pc, #72]	@ (80012c0 <MX_GPIO_Init+0xf0>)
 8001278:	f002 ff7c 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800127c:	2303      	movs	r3, #3
 800127e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001288:	2301      	movs	r3, #1
 800128a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	480b      	ldr	r0, [pc, #44]	@ (80012c0 <MX_GPIO_Init+0xf0>)
 8001294:	f002 fdda 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001298:	2304      	movs	r3, #4
 800129a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800129c:	2311      	movs	r3, #17
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012a4:	2301      	movs	r3, #1
 80012a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <MX_GPIO_Init+0xf0>)
 80012b0:	f002 fdcc 	bl	8003e4c <HAL_GPIO_Init>

}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	@ 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020400 	.word	0x40020400

080012c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f008 fc71 	bl	8009bb4 <osDelay>
 80012d2:	e7fb      	b.n	80012cc <StartDefaultTask+0x8>

080012d4 <StartI2CTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartI2CTask */
void StartI2CTask(void *argument)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  MP5475GU_StatusUV_t uv_status;
  HAL_StatusTypeDef ret;
  /* Infinite loop */
  for(;;)
  {
    if (osMutexAcquire(CommMutexHandleHandle, osWaitForever) == osOK){
 80012dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001394 <StartI2CTask+0xc0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	4618      	mov	r0, r3
 80012e6:	f008 fd06 	bl	8009cf6 <osMutexAcquire>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f5      	bne.n	80012dc <StartI2CTask+0x8>

      // TODO: Add I2C communication code here.
      mp5475gu_set_vout(&hi2c1, BUCK_A, 1.2f);
 80012f0:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8001398 <StartI2CTask+0xc4>
 80012f4:	2100      	movs	r1, #0
 80012f6:	4829      	ldr	r0, [pc, #164]	@ (800139c <StartI2CTask+0xc8>)
 80012f8:	f000 f930 	bl	800155c <mp5475gu_set_vout>
      osDelay(100);
 80012fc:	2064      	movs	r0, #100	@ 0x64
 80012fe:	f008 fc59 	bl	8009bb4 <osDelay>
      
      // 1. Read the UV status from the PMIC
      ret = mp5475gu_read_uv_status(&hi2c1, &uv_status);
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4619      	mov	r1, r3
 8001308:	4824      	ldr	r0, [pc, #144]	@ (800139c <StartI2CTask+0xc8>)
 800130a:	f000 f9a7 	bl	800165c <mp5475gu_read_uv_status>
 800130e:	4603      	mov	r3, r0
 8001310:	73fb      	strb	r3, [r7, #15]
      if (ret == HAL_OK) {
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d133      	bne.n	8001380 <StartI2CTask+0xac>
        // 2. Update DTCs based on the read status

        // Check Buck A
        if (uv_status.bits.BUCKA_UV) {
 8001318:	7b3b      	ldrb	r3, [r7, #12]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <StartI2CTask+0x58>
          DTC_Set(DTC_PMIC_BUCK_A_UNDERVOLTAGE);
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff fae3 	bl	80008f0 <DTC_Set>
 800132a:	e002      	b.n	8001332 <StartI2CTask+0x5e>
        } else {
          DTC_Clear(DTC_PMIC_BUCK_A_UNDERVOLTAGE);
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff fafb 	bl	8000928 <DTC_Clear>
        }
  
        // Check Buck B
        if (uv_status.bits.BUCKB_UV) {
 8001332:	7b3b      	ldrb	r3, [r7, #12]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <StartI2CTask+0x72>
          DTC_Set(DTC_PMIC_BUCK_B_UNDERVOLTAGE);
 800133e:	2001      	movs	r0, #1
 8001340:	f7ff fad6 	bl	80008f0 <DTC_Set>
 8001344:	e002      	b.n	800134c <StartI2CTask+0x78>
        } else {
          DTC_Clear(DTC_PMIC_BUCK_B_UNDERVOLTAGE);
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff faee 	bl	8000928 <DTC_Clear>
        }
  
        // Check Buck C
        if (uv_status.bits.BUCKC_UV) {
 800134c:	7b3b      	ldrb	r3, [r7, #12]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <StartI2CTask+0x8c>
          DTC_Set(DTC_PMIC_BUCK_C_UNDERVOLTAGE);
 8001358:	2002      	movs	r0, #2
 800135a:	f7ff fac9 	bl	80008f0 <DTC_Set>
 800135e:	e002      	b.n	8001366 <StartI2CTask+0x92>
        } else {
          DTC_Clear(DTC_PMIC_BUCK_C_UNDERVOLTAGE);
 8001360:	2002      	movs	r0, #2
 8001362:	f7ff fae1 	bl	8000928 <DTC_Clear>
        }
  
        // Check Buck D
        if (uv_status.bits.BUCKD_UV) {
 8001366:	7b3b      	ldrb	r3, [r7, #12]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <StartI2CTask+0xa6>
          DTC_Set(DTC_PMIC_BUCK_D_UNDERVOLTAGE);
 8001372:	2003      	movs	r0, #3
 8001374:	f7ff fabc 	bl	80008f0 <DTC_Set>
 8001378:	e002      	b.n	8001380 <StartI2CTask+0xac>
        } else {
          DTC_Clear(DTC_PMIC_BUCK_D_UNDERVOLTAGE);
 800137a:	2003      	movs	r0, #3
 800137c:	f7ff fad4 	bl	8000928 <DTC_Clear>
        }
      }

      osMutexRelease(CommMutexHandleHandle);
 8001380:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <StartI2CTask+0xc0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f008 fd01 	bl	8009d8c <osMutexRelease>

      // Wait for the next monitoring cycle
      osDelay(100); // Check every 100ms
 800138a:	2064      	movs	r0, #100	@ 0x64
 800138c:	f008 fc12 	bl	8009bb4 <osDelay>
    if (osMutexAcquire(CommMutexHandleHandle, osWaitForever) == osOK){
 8001390:	e7a4      	b.n	80012dc <StartI2CTask+0x8>
 8001392:	bf00      	nop
 8001394:	200005f8 	.word	0x200005f8
 8001398:	3f99999a 	.word	0x3f99999a
 800139c:	20000144 	.word	0x20000144

080013a0 <StartSPITask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSPITask */
void StartSPITask(void *argument)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint8_t dtc_data;
  uint16_t dtc_address;
  /* Infinite loop */
  for(;;)
  {
    if (osMutexAcquire(CommMutexHandleHandle, osWaitForever) == osOK){
 80013a8:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <StartSPITask+0x4c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	4618      	mov	r0, r3
 80013b2:	f008 fca0 	bl	8009cf6 <osMutexAcquire>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d112      	bne.n	80013e2 <StartSPITask+0x42>

      // TODO: Add SPI communication code here.
      dtc_data = DTC_GetStatusBitmask();
 80013bc:	f7ff fade 	bl	800097c <DTC_GetStatusBitmask>
 80013c0:	4603      	mov	r3, r0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	737b      	strb	r3, [r7, #13]
      dtc_address = 0x0000;
 80013c6:	2300      	movs	r3, #0
 80013c8:	81fb      	strh	r3, [r7, #14]
      if (EEPROM_Write_DMA(dtc_address, &dtc_data, 1) == HAL_OK) {
 80013ca:	f107 010d 	add.w	r1, r7, #13
 80013ce:	89fb      	ldrh	r3, [r7, #14]
 80013d0:	2201      	movs	r2, #1
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fb9e 	bl	8000b14 <EEPROM_Write_DMA>
        // 쓰기 성공
      } else {
        // 쓰기 실패
      }

      osMutexRelease(CommMutexHandleHandle);
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <StartSPITask+0x4c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f008 fcd5 	bl	8009d8c <osMutexRelease>
    }
    osDelay(100);
 80013e2:	2064      	movs	r0, #100	@ 0x64
 80013e4:	f008 fbe6 	bl	8009bb4 <osDelay>
    if (osMutexAcquire(CommMutexHandleHandle, osWaitForever) == osOK){
 80013e8:	e7de      	b.n	80013a8 <StartSPITask+0x8>
 80013ea:	bf00      	nop
 80013ec:	200005f8 	.word	0x200005f8

080013f0 <StartCANTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANTask */
void StartCANTask(void *argument)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANTask */
  uint8_t dtc_data;
  uint16_t dtc_address = 0x0000;
 80013f8:	2300      	movs	r3, #0
 80013fa:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
    if (osMutexAcquire(CommMutexHandleHandle, osWaitForever) == osOK){
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <StartCANTask+0x58>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	4618      	mov	r0, r3
 8001406:	f008 fc76 	bl	8009cf6 <osMutexAcquire>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d115      	bne.n	800143c <StartCANTask+0x4c>

      if (EEPROM_Read_DMA(dtc_address, &dtc_data, 1) == HAL_OK) {
 8001410:	f107 010d 	add.w	r1, r7, #13
 8001414:	89fb      	ldrh	r3, [r7, #14]
 8001416:	2201      	movs	r2, #1
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fb35 	bl	8000a88 <EEPROM_Read_DMA>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d106      	bne.n	8001432 <StartCANTask+0x42>
        CAN_Manager_Transmit_DTC(&hcan1, &dtc_data, 1);
 8001424:	f107 030d 	add.w	r3, r7, #13
 8001428:	2201      	movs	r2, #1
 800142a:	4619      	mov	r1, r3
 800142c:	4807      	ldr	r0, [pc, #28]	@ (800144c <StartCANTask+0x5c>)
 800142e:	f7ff f935 	bl	800069c <CAN_Manager_Transmit_DTC>
      }
      
      osMutexRelease(CommMutexHandleHandle);
 8001432:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <StartCANTask+0x58>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f008 fca8 	bl	8009d8c <osMutexRelease>
    }
    osDelay(1000); // Transmit every 1 second
 800143c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001440:	f008 fbb8 	bl	8009bb4 <osDelay>
    if (osMutexAcquire(CommMutexHandleHandle, osWaitForever) == osOK){
 8001444:	e7da      	b.n	80013fc <StartCANTask+0xc>
 8001446:	bf00      	nop
 8001448:	200005f8 	.word	0x200005f8
 800144c:	2000011c 	.word	0x2000011c

08001450 <StartUARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void *argument)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b090      	sub	sp, #64	@ 0x40
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTTask */
  CAN_Command_t cmd;
  uint8_t dtc_value;
  uint16_t dtc_address = 0x0000;
 8001458:	2300      	movs	r3, #0
 800145a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  char uart_msg[50];

  /* Infinite loop */
  for(;;)
  {
    cmd = CAN_Manager_Get_Command();
 800145c:	f7ff f950 	bl	8000700 <CAN_Manager_Get_Command>
 8001460:	4603      	mov	r3, r0
 8001462:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    if (cmd != CMD_NONE) {
 8001466:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800146a:	2b00      	cmp	r3, #0
 800146c:	d055      	beq.n	800151a <StartUARTTask+0xca>
      if (osMutexAcquire(CommMutexHandleHandle, osWaitForever) == osOK) {
 800146e:	4b2d      	ldr	r3, [pc, #180]	@ (8001524 <StartUARTTask+0xd4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f04f 31ff 	mov.w	r1, #4294967295
 8001476:	4618      	mov	r0, r3
 8001478:	f008 fc3d 	bl	8009cf6 <osMutexAcquire>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d14b      	bne.n	800151a <StartUARTTask+0xca>
        switch (cmd) {
 8001482:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001486:	2b01      	cmp	r3, #1
 8001488:	d002      	beq.n	8001490 <StartUARTTask+0x40>
 800148a:	2b02      	cmp	r3, #2
 800148c:	d021      	beq.n	80014d2 <StartUARTTask+0x82>
            snprintf(uart_msg, sizeof(uart_msg), "DTC Value: 0x%02X\r\n", dtc_value);
            HAL_UART_Transmit(&huart4, (uint8_t*)uart_msg, strlen(uart_msg), 100);
            break;

          default:
            break;
 800148e:	e03d      	b.n	800150c <StartUARTTask+0xbc>
            dtc_value = 0x00; // Clear DTCs
 8001490:	2300      	movs	r3, #0
 8001492:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            EEPROM_Write_DMA(dtc_address, &dtc_value, 1);
 8001496:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800149a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800149c:	2201      	movs	r2, #1
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fb38 	bl	8000b14 <EEPROM_Write_DMA>
            DTC_ClearAll(); // Also clear in-memory representation
 80014a4:	f7ff fa5e 	bl	8000964 <DTC_ClearAll>
            snprintf(uart_msg, sizeof(uart_msg), "DTCs Cleared.\r\n");
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001528 <StartUARTTask+0xd8>)
 80014ae:	2132      	movs	r1, #50	@ 0x32
 80014b0:	4618      	mov	r0, r3
 80014b2:	f00b ffc1 	bl	800d438 <sniprintf>
            HAL_UART_Transmit(&huart4, (uint8_t*)uart_msg, strlen(uart_msg), 100);
 80014b6:	f107 0308 	add.w	r3, r7, #8
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7fe feb0 	bl	8000220 <strlen>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	f107 0108 	add.w	r1, r7, #8
 80014c8:	2364      	movs	r3, #100	@ 0x64
 80014ca:	4818      	ldr	r0, [pc, #96]	@ (800152c <StartUARTTask+0xdc>)
 80014cc:	f007 fa8b 	bl	80089e6 <HAL_UART_Transmit>
            break;
 80014d0:	e01c      	b.n	800150c <StartUARTTask+0xbc>
            EEPROM_Read_DMA(dtc_address, &dtc_value, 1);
 80014d2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80014d6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80014d8:	2201      	movs	r2, #1
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fad4 	bl	8000a88 <EEPROM_Read_DMA>
            snprintf(uart_msg, sizeof(uart_msg), "DTC Value: 0x%02X\r\n", dtc_value);
 80014e0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80014e4:	f107 0008 	add.w	r0, r7, #8
 80014e8:	4a11      	ldr	r2, [pc, #68]	@ (8001530 <StartUARTTask+0xe0>)
 80014ea:	2132      	movs	r1, #50	@ 0x32
 80014ec:	f00b ffa4 	bl	800d438 <sniprintf>
            HAL_UART_Transmit(&huart4, (uint8_t*)uart_msg, strlen(uart_msg), 100);
 80014f0:	f107 0308 	add.w	r3, r7, #8
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe fe93 	bl	8000220 <strlen>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	f107 0108 	add.w	r1, r7, #8
 8001502:	2364      	movs	r3, #100	@ 0x64
 8001504:	4809      	ldr	r0, [pc, #36]	@ (800152c <StartUARTTask+0xdc>)
 8001506:	f007 fa6e 	bl	80089e6 <HAL_UART_Transmit>
            break;
 800150a:	bf00      	nop
        }
        CAN_Manager_Clear_Command(); // Reset command after processing
 800150c:	f7ff f904 	bl	8000718 <CAN_Manager_Clear_Command>
        osMutexRelease(CommMutexHandleHandle);
 8001510:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <StartUARTTask+0xd4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f008 fc39 	bl	8009d8c <osMutexRelease>
      }
    }

    osDelay(200); // Poll for commands every 200ms
 800151a:	20c8      	movs	r0, #200	@ 0xc8
 800151c:	f008 fb4a 	bl	8009bb4 <osDelay>
    cmd = CAN_Manager_Get_Command();
 8001520:	e79c      	b.n	800145c <StartUARTTask+0xc>
 8001522:	bf00      	nop
 8001524:	200005f8 	.word	0x200005f8
 8001528:	0800de04 	.word	0x0800de04
 800152c:	2000059c 	.word	0x2000059c
 8001530:	0800de14 	.word	0x0800de14

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
}
 800153a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <Error_Handler+0x8>

08001540 <mp5475gu_init>:

/**
 * @brief  Initializes the MP5475GU driver, creating the semaphore.
 */
void mp5475gu_init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    i2cTxRxSemHandle = osSemaphoreNew(1, 0, NULL); // Create a binary semaphore, initially taken
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	2001      	movs	r0, #1
 800154a:	f008 fc5c 	bl	8009e06 <osSemaphoreNew>
 800154e:	4603      	mov	r3, r0
 8001550:	4a01      	ldr	r2, [pc, #4]	@ (8001558 <mp5475gu_init+0x18>)
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200005fc 	.word	0x200005fc

0800155c <mp5475gu_set_vout>:
 * @param  channel: The buck channel to configure (BUCK_A, BUCK_B, BUCK_C, or BUCK_D).
 * @param  voltage: The desired output voltage in volts.
 * @retval HAL status
 */
HAL_StatusTypeDef mp5475gu_set_vout(I2C_HandleTypeDef *hi2c, MP5475GU_BuckChannel_t channel, float voltage)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af02      	add	r7, sp, #8
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	460b      	mov	r3, r1
 8001566:	ed87 0a01 	vstr	s0, [r7, #4]
 800156a:	72fb      	strb	r3, [r7, #11]
    static uint8_t data[2]; // Use static to ensure data is valid during DMA transfer
    HAL_StatusTypeDef status;

    // Determine register addresses based on the channel
    // Vout High and Low registers are contiguous, so we only need the high address
    switch (channel) {
 800156c:	7afb      	ldrb	r3, [r7, #11]
 800156e:	2b03      	cmp	r3, #3
 8001570:	d816      	bhi.n	80015a0 <mp5475gu_set_vout+0x44>
 8001572:	a201      	add	r2, pc, #4	@ (adr r2, 8001578 <mp5475gu_set_vout+0x1c>)
 8001574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001578:	08001589 	.word	0x08001589
 800157c:	0800158f 	.word	0x0800158f
 8001580:	08001595 	.word	0x08001595
 8001584:	0800159b 	.word	0x0800159b
        case BUCK_A: reg_high_addr = MP5475GU_REG_VOUT_A_HIGH; break;
 8001588:	2313      	movs	r3, #19
 800158a:	75fb      	strb	r3, [r7, #23]
 800158c:	e00a      	b.n	80015a4 <mp5475gu_set_vout+0x48>
        case BUCK_B: reg_high_addr = MP5475GU_REG_VOUT_B_HIGH; break;
 800158e:	231b      	movs	r3, #27
 8001590:	75fb      	strb	r3, [r7, #23]
 8001592:	e007      	b.n	80015a4 <mp5475gu_set_vout+0x48>
        case BUCK_C: reg_high_addr = MP5475GU_REG_VOUT_C_HIGH; break;
 8001594:	2323      	movs	r3, #35	@ 0x23
 8001596:	75fb      	strb	r3, [r7, #23]
 8001598:	e004      	b.n	80015a4 <mp5475gu_set_vout+0x48>
        case BUCK_D: reg_high_addr = MP5475GU_REG_VOUT_D_HIGH; break;
 800159a:	232b      	movs	r3, #43	@ 0x2b
 800159c:	75fb      	strb	r3, [r7, #23]
 800159e:	e001      	b.n	80015a4 <mp5475gu_set_vout+0x48>
        default: return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e04d      	b.n	8001640 <mp5475gu_set_vout+0xe4>
    }

    if (voltage < 0.3f || voltage > 2.048f) {
 80015a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001648 <mp5475gu_set_vout+0xec>
 80015ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b4:	d408      	bmi.n	80015c8 <mp5475gu_set_vout+0x6c>
 80015b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ba:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800164c <mp5475gu_set_vout+0xf0>
 80015be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c6:	dd01      	ble.n	80015cc <mp5475gu_set_vout+0x70>
        return HAL_ERROR; // Voltage out of range
 80015c8:	2301      	movs	r3, #1
 80015ca:	e039      	b.n	8001640 <mp5475gu_set_vout+0xe4>
    }
    vref_val = (uint16_t)((voltage - 0.3f) / 0.002f);
 80015cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001648 <mp5475gu_set_vout+0xec>
 80015d4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80015d8:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001650 <mp5475gu_set_vout+0xf4>
 80015dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e4:	ee17 3a90 	vmov	r3, s15
 80015e8:	82bb      	strh	r3, [r7, #20]

    data[0] = (uint8_t)((vref_val >> 8) & 0x03);
 80015ea:	8abb      	ldrh	r3, [r7, #20]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <mp5475gu_set_vout+0xf8>)
 80015fa:	701a      	strb	r2, [r3, #0]
    data[1] = (uint8_t)(vref_val & 0xFF);
 80015fc:	8abb      	ldrh	r3, [r7, #20]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <mp5475gu_set_vout+0xf8>)
 8001602:	705a      	strb	r2, [r3, #1]

    status = HAL_I2C_Mem_Write_DMA(hi2c, MP5475GU_I2C_ADDR, reg_high_addr, I2C_MEMADD_SIZE_8BIT, data, 2);
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	b29a      	uxth	r2, r3
 8001608:	2302      	movs	r3, #2
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <mp5475gu_set_vout+0xf8>)
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2301      	movs	r3, #1
 8001612:	21c0      	movs	r1, #192	@ 0xc0
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f002 ff0b 	bl	8004430 <HAL_I2C_Mem_Write_DMA>
 800161a:	4603      	mov	r3, r0
 800161c:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK) {
 800161e:	7cfb      	ldrb	r3, [r7, #19]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <mp5475gu_set_vout+0xcc>
        return status;
 8001624:	7cfb      	ldrb	r3, [r7, #19]
 8001626:	e00b      	b.n	8001640 <mp5475gu_set_vout+0xe4>
    }

    // Wait for DMA transfer to complete
    if (osSemaphoreAcquire(i2cTxRxSemHandle, 100) != osOK) { // 100ms timeout
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <mp5475gu_set_vout+0xfc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2164      	movs	r1, #100	@ 0x64
 800162e:	4618      	mov	r0, r3
 8001630:	f008 fc72 	bl	8009f18 <osSemaphoreAcquire>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <mp5475gu_set_vout+0xe2>
        return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e000      	b.n	8001640 <mp5475gu_set_vout+0xe4>
    }

    return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	3e99999a 	.word	0x3e99999a
 800164c:	4003126f 	.word	0x4003126f
 8001650:	3b03126f 	.word	0x3b03126f
 8001654:	20000600 	.word	0x20000600
 8001658:	200005fc 	.word	0x200005fc

0800165c <mp5475gu_read_uv_status>:
 * @param  hi2c: Pointer to the I2C handle.
 * @param  status: Pointer to a MP5475GU_StatusUV_t union to store the status.
 * @retval HAL status
 */
HAL_StatusTypeDef mp5475gu_read_uv_status(I2C_HandleTypeDef *hi2c, MP5475GU_StatusUV_t *status)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af02      	add	r7, sp, #8
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef dma_status;

    dma_status = HAL_I2C_Mem_Read_DMA(hi2c, MP5475GU_I2C_ADDR, MP5475GU_REG_STATUS_UV, I2C_MEMADD_SIZE_8BIT, &status->data, 1);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2201      	movs	r2, #1
 800166a:	9201      	str	r2, [sp, #4]
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2301      	movs	r3, #1
 8001670:	2207      	movs	r2, #7
 8001672:	21c0      	movs	r1, #192	@ 0xc0
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f003 f83f 	bl	80046f8 <HAL_I2C_Mem_Read_DMA>
 800167a:	4603      	mov	r3, r0
 800167c:	73fb      	strb	r3, [r7, #15]
    if (dma_status != HAL_OK) {
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <mp5475gu_read_uv_status+0x2c>
        return dma_status;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	e00b      	b.n	80016a0 <mp5475gu_read_uv_status+0x44>
    }

    // Wait for DMA transfer to complete
    if (osSemaphoreAcquire(i2cTxRxSemHandle, 100) != osOK) { // 100ms timeout
 8001688:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <mp5475gu_read_uv_status+0x4c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2164      	movs	r1, #100	@ 0x64
 800168e:	4618      	mov	r0, r3
 8001690:	f008 fc42 	bl	8009f18 <osSemaphoreAcquire>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <mp5475gu_read_uv_status+0x42>
        return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e000      	b.n	80016a0 <mp5475gu_read_uv_status+0x44>
    }

    return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200005fc 	.word	0x200005fc

080016ac <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
    // This callback is shared among all I2C peripherals. Check if it's the one we're using.
    // For simplicity, we assume only one I2C is used for this driver.
    osSemaphoreRelease(i2cTxRxSemHandle);
 80016b4:	4b04      	ldr	r3, [pc, #16]	@ (80016c8 <HAL_I2C_MemTxCpltCallback+0x1c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f008 fc7f 	bl	8009fbc <osSemaphoreRelease>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200005fc 	.word	0x200005fc

080016cc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
    osSemaphoreRelease(i2cTxRxSemHandle);
 80016d4:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <HAL_I2C_MemRxCpltCallback+0x1c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f008 fc6f 	bl	8009fbc <osSemaphoreRelease>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200005fc 	.word	0x200005fc

080016ec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
    // Handle I2C error: release the semaphore to unblock the waiting task
    osSemaphoreRelease(i2cTxRxSemHandle);
 80016f4:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <HAL_I2C_ErrorCallback+0x1c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f008 fc5f 	bl	8009fbc <osSemaphoreRelease>
    // Optionally, log the error or set a flag
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200005fc 	.word	0x200005fc

0800170c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <HAL_MspInit+0x54>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171a:	4a11      	ldr	r2, [pc, #68]	@ (8001760 <HAL_MspInit+0x54>)
 800171c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001720:	6453      	str	r3, [r2, #68]	@ 0x44
 8001722:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <HAL_MspInit+0x54>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <HAL_MspInit+0x54>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <HAL_MspInit+0x54>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	@ 0x40
 800173e:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <HAL_MspInit+0x54>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	210f      	movs	r1, #15
 800174e:	f06f 0001 	mvn.w	r0, #1
 8001752:	f001 ff28 	bl	80035a6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800

08001764 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	@ 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a17      	ldr	r2, [pc, #92]	@ (80017e0 <HAL_ADC_MspInit+0x7c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d127      	bne.n	80017d6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <HAL_ADC_MspInit+0x80>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	4a15      	ldr	r2, [pc, #84]	@ (80017e4 <HAL_ADC_MspInit+0x80>)
 8001790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001794:	6453      	str	r3, [r2, #68]	@ 0x44
 8001796:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <HAL_ADC_MspInit+0x80>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <HAL_ADC_MspInit+0x80>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	4a0e      	ldr	r2, [pc, #56]	@ (80017e4 <HAL_ADC_MspInit+0x80>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b2:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <HAL_ADC_MspInit+0x80>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017be:	2304      	movs	r3, #4
 80017c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c2:	2303      	movs	r3, #3
 80017c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <HAL_ADC_MspInit+0x84>)
 80017d2:	f002 fb3b 	bl	8003e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	@ 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40012000 	.word	0x40012000
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020000 	.word	0x40020000

080017ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	@ 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a21      	ldr	r2, [pc, #132]	@ (8001890 <HAL_CAN_MspInit+0xa4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d13b      	bne.n	8001886 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	4b20      	ldr	r3, [pc, #128]	@ (8001894 <HAL_CAN_MspInit+0xa8>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	4a1f      	ldr	r2, [pc, #124]	@ (8001894 <HAL_CAN_MspInit+0xa8>)
 8001818:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800181c:	6413      	str	r3, [r2, #64]	@ 0x40
 800181e:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <HAL_CAN_MspInit+0xa8>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <HAL_CAN_MspInit+0xa8>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a18      	ldr	r2, [pc, #96]	@ (8001894 <HAL_CAN_MspInit+0xa8>)
 8001834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <HAL_CAN_MspInit+0xa8>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001846:	2303      	movs	r3, #3
 8001848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001856:	2309      	movs	r3, #9
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	480d      	ldr	r0, [pc, #52]	@ (8001898 <HAL_CAN_MspInit+0xac>)
 8001862:	f002 faf3 	bl	8003e4c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2105      	movs	r1, #5
 800186a:	2013      	movs	r0, #19
 800186c:	f001 fe9b 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001870:	2013      	movs	r0, #19
 8001872:	f001 feb4 	bl	80035de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2105      	movs	r1, #5
 800187a:	2014      	movs	r0, #20
 800187c:	f001 fe93 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001880:	2014      	movs	r0, #20
 8001882:	f001 feac 	bl	80035de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001886:	bf00      	nop
 8001888:	3728      	adds	r7, #40	@ 0x28
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40006400 	.word	0x40006400
 8001894:	40023800 	.word	0x40023800
 8001898:	40021800 	.word	0x40021800

0800189c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	@ 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a9c      	ldr	r2, [pc, #624]	@ (8001b2c <HAL_I2C_MspInit+0x290>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	f040 809b 	bne.w	80019f6 <HAL_I2C_MspInit+0x15a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	4b9a      	ldr	r3, [pc, #616]	@ (8001b30 <HAL_I2C_MspInit+0x294>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c8:	4a99      	ldr	r2, [pc, #612]	@ (8001b30 <HAL_I2C_MspInit+0x294>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d0:	4b97      	ldr	r3, [pc, #604]	@ (8001b30 <HAL_I2C_MspInit+0x294>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018dc:	23c0      	movs	r3, #192	@ 0xc0
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e0:	2312      	movs	r3, #18
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ec:	2304      	movs	r3, #4
 80018ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	488f      	ldr	r0, [pc, #572]	@ (8001b34 <HAL_I2C_MspInit+0x298>)
 80018f8:	f002 faa8 	bl	8003e4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	4b8b      	ldr	r3, [pc, #556]	@ (8001b30 <HAL_I2C_MspInit+0x294>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	4a8a      	ldr	r2, [pc, #552]	@ (8001b30 <HAL_I2C_MspInit+0x294>)
 8001906:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800190a:	6413      	str	r3, [r2, #64]	@ 0x40
 800190c:	4b88      	ldr	r3, [pc, #544]	@ (8001b30 <HAL_I2C_MspInit+0x294>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001910:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001918:	4b87      	ldr	r3, [pc, #540]	@ (8001b38 <HAL_I2C_MspInit+0x29c>)
 800191a:	4a88      	ldr	r2, [pc, #544]	@ (8001b3c <HAL_I2C_MspInit+0x2a0>)
 800191c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800191e:	4b86      	ldr	r3, [pc, #536]	@ (8001b38 <HAL_I2C_MspInit+0x29c>)
 8001920:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001924:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001926:	4b84      	ldr	r3, [pc, #528]	@ (8001b38 <HAL_I2C_MspInit+0x29c>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800192c:	4b82      	ldr	r3, [pc, #520]	@ (8001b38 <HAL_I2C_MspInit+0x29c>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001932:	4b81      	ldr	r3, [pc, #516]	@ (8001b38 <HAL_I2C_MspInit+0x29c>)
 8001934:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001938:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800193a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b38 <HAL_I2C_MspInit+0x29c>)
 800193c:	2200      	movs	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001940:	4b7d      	ldr	r3, [pc, #500]	@ (8001b38 <HAL_I2C_MspInit+0x29c>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001946:	4b7c      	ldr	r3, [pc, #496]	@ (8001b38 <HAL_I2C_MspInit+0x29c>)
 8001948:	2200      	movs	r2, #0
 800194a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800194c:	4b7a      	ldr	r3, [pc, #488]	@ (8001b38 <HAL_I2C_MspInit+0x29c>)
 800194e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001952:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001954:	4b78      	ldr	r3, [pc, #480]	@ (8001b38 <HAL_I2C_MspInit+0x29c>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800195a:	4877      	ldr	r0, [pc, #476]	@ (8001b38 <HAL_I2C_MspInit+0x29c>)
 800195c:	f001 fe5a 	bl	8003614 <HAL_DMA_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001966:	f7ff fde5 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a72      	ldr	r2, [pc, #456]	@ (8001b38 <HAL_I2C_MspInit+0x29c>)
 800196e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001970:	4a71      	ldr	r2, [pc, #452]	@ (8001b38 <HAL_I2C_MspInit+0x29c>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001976:	4b72      	ldr	r3, [pc, #456]	@ (8001b40 <HAL_I2C_MspInit+0x2a4>)
 8001978:	4a72      	ldr	r2, [pc, #456]	@ (8001b44 <HAL_I2C_MspInit+0x2a8>)
 800197a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800197c:	4b70      	ldr	r3, [pc, #448]	@ (8001b40 <HAL_I2C_MspInit+0x2a4>)
 800197e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001982:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001984:	4b6e      	ldr	r3, [pc, #440]	@ (8001b40 <HAL_I2C_MspInit+0x2a4>)
 8001986:	2240      	movs	r2, #64	@ 0x40
 8001988:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800198a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b40 <HAL_I2C_MspInit+0x2a4>)
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001990:	4b6b      	ldr	r3, [pc, #428]	@ (8001b40 <HAL_I2C_MspInit+0x2a4>)
 8001992:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001996:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001998:	4b69      	ldr	r3, [pc, #420]	@ (8001b40 <HAL_I2C_MspInit+0x2a4>)
 800199a:	2200      	movs	r2, #0
 800199c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800199e:	4b68      	ldr	r3, [pc, #416]	@ (8001b40 <HAL_I2C_MspInit+0x2a4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80019a4:	4b66      	ldr	r3, [pc, #408]	@ (8001b40 <HAL_I2C_MspInit+0x2a4>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019aa:	4b65      	ldr	r3, [pc, #404]	@ (8001b40 <HAL_I2C_MspInit+0x2a4>)
 80019ac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019b0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b2:	4b63      	ldr	r3, [pc, #396]	@ (8001b40 <HAL_I2C_MspInit+0x2a4>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80019b8:	4861      	ldr	r0, [pc, #388]	@ (8001b40 <HAL_I2C_MspInit+0x2a4>)
 80019ba:	f001 fe2b 	bl	8003614 <HAL_DMA_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 80019c4:	f7ff fdb6 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a5d      	ldr	r2, [pc, #372]	@ (8001b40 <HAL_I2C_MspInit+0x2a4>)
 80019cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80019ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001b40 <HAL_I2C_MspInit+0x2a4>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2105      	movs	r1, #5
 80019d8:	201f      	movs	r0, #31
 80019da:	f001 fde4 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80019de:	201f      	movs	r0, #31
 80019e0:	f001 fdfd 	bl	80035de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2105      	movs	r1, #5
 80019e8:	2020      	movs	r0, #32
 80019ea:	f001 fddc 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80019ee:	2020      	movs	r0, #32
 80019f0:	f001 fdf5 	bl	80035de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019f4:	e095      	b.n	8001b22 <HAL_I2C_MspInit+0x286>
  else if(hi2c->Instance==I2C2)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a53      	ldr	r2, [pc, #332]	@ (8001b48 <HAL_I2C_MspInit+0x2ac>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	f040 8090 	bne.w	8001b22 <HAL_I2C_MspInit+0x286>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	4b4a      	ldr	r3, [pc, #296]	@ (8001b30 <HAL_I2C_MspInit+0x294>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	4a49      	ldr	r2, [pc, #292]	@ (8001b30 <HAL_I2C_MspInit+0x294>)
 8001a0c:	f043 0320 	orr.w	r3, r3, #32
 8001a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a12:	4b47      	ldr	r3, [pc, #284]	@ (8001b30 <HAL_I2C_MspInit+0x294>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	f003 0320 	and.w	r3, r3, #32
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a22:	2312      	movs	r3, #18
 8001a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	4619      	mov	r1, r3
 8001a38:	4844      	ldr	r0, [pc, #272]	@ (8001b4c <HAL_I2C_MspInit+0x2b0>)
 8001a3a:	f002 fa07 	bl	8003e4c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b3b      	ldr	r3, [pc, #236]	@ (8001b30 <HAL_I2C_MspInit+0x294>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	4a3a      	ldr	r2, [pc, #232]	@ (8001b30 <HAL_I2C_MspInit+0x294>)
 8001a48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4e:	4b38      	ldr	r3, [pc, #224]	@ (8001b30 <HAL_I2C_MspInit+0x294>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001a5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b50 <HAL_I2C_MspInit+0x2b4>)
 8001a5c:	4a3d      	ldr	r2, [pc, #244]	@ (8001b54 <HAL_I2C_MspInit+0x2b8>)
 8001a5e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001a60:	4b3b      	ldr	r3, [pc, #236]	@ (8001b50 <HAL_I2C_MspInit+0x2b4>)
 8001a62:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001a66:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a68:	4b39      	ldr	r3, [pc, #228]	@ (8001b50 <HAL_I2C_MspInit+0x2b4>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a6e:	4b38      	ldr	r3, [pc, #224]	@ (8001b50 <HAL_I2C_MspInit+0x2b4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a74:	4b36      	ldr	r3, [pc, #216]	@ (8001b50 <HAL_I2C_MspInit+0x2b4>)
 8001a76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a7a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a7c:	4b34      	ldr	r3, [pc, #208]	@ (8001b50 <HAL_I2C_MspInit+0x2b4>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a82:	4b33      	ldr	r3, [pc, #204]	@ (8001b50 <HAL_I2C_MspInit+0x2b4>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001a88:	4b31      	ldr	r3, [pc, #196]	@ (8001b50 <HAL_I2C_MspInit+0x2b4>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a8e:	4b30      	ldr	r3, [pc, #192]	@ (8001b50 <HAL_I2C_MspInit+0x2b4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a94:	4b2e      	ldr	r3, [pc, #184]	@ (8001b50 <HAL_I2C_MspInit+0x2b4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001a9a:	482d      	ldr	r0, [pc, #180]	@ (8001b50 <HAL_I2C_MspInit+0x2b4>)
 8001a9c:	f001 fdba 	bl	8003614 <HAL_DMA_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_I2C_MspInit+0x20e>
      Error_Handler();
 8001aa6:	f7ff fd45 	bl	8001534 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a28      	ldr	r2, [pc, #160]	@ (8001b50 <HAL_I2C_MspInit+0x2b4>)
 8001aae:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ab0:	4a27      	ldr	r2, [pc, #156]	@ (8001b50 <HAL_I2C_MspInit+0x2b4>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001ab6:	4b28      	ldr	r3, [pc, #160]	@ (8001b58 <HAL_I2C_MspInit+0x2bc>)
 8001ab8:	4a28      	ldr	r2, [pc, #160]	@ (8001b5c <HAL_I2C_MspInit+0x2c0>)
 8001aba:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001abc:	4b26      	ldr	r3, [pc, #152]	@ (8001b58 <HAL_I2C_MspInit+0x2bc>)
 8001abe:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001ac2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ac4:	4b24      	ldr	r3, [pc, #144]	@ (8001b58 <HAL_I2C_MspInit+0x2bc>)
 8001ac6:	2240      	movs	r2, #64	@ 0x40
 8001ac8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aca:	4b23      	ldr	r3, [pc, #140]	@ (8001b58 <HAL_I2C_MspInit+0x2bc>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ad0:	4b21      	ldr	r3, [pc, #132]	@ (8001b58 <HAL_I2C_MspInit+0x2bc>)
 8001ad2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ad6:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b58 <HAL_I2C_MspInit+0x2bc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ade:	4b1e      	ldr	r3, [pc, #120]	@ (8001b58 <HAL_I2C_MspInit+0x2bc>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b58 <HAL_I2C_MspInit+0x2bc>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001aea:	4b1b      	ldr	r3, [pc, #108]	@ (8001b58 <HAL_I2C_MspInit+0x2bc>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001af0:	4b19      	ldr	r3, [pc, #100]	@ (8001b58 <HAL_I2C_MspInit+0x2bc>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001af6:	4818      	ldr	r0, [pc, #96]	@ (8001b58 <HAL_I2C_MspInit+0x2bc>)
 8001af8:	f001 fd8c 	bl	8003614 <HAL_DMA_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_I2C_MspInit+0x26a>
      Error_Handler();
 8001b02:	f7ff fd17 	bl	8001534 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a13      	ldr	r2, [pc, #76]	@ (8001b58 <HAL_I2C_MspInit+0x2bc>)
 8001b0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b0c:	4a12      	ldr	r2, [pc, #72]	@ (8001b58 <HAL_I2C_MspInit+0x2bc>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2105      	movs	r1, #5
 8001b16:	2021      	movs	r0, #33	@ 0x21
 8001b18:	f001 fd45 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001b1c:	2021      	movs	r0, #33	@ 0x21
 8001b1e:	f001 fd5e 	bl	80035de <HAL_NVIC_EnableIRQ>
}
 8001b22:	bf00      	nop
 8001b24:	3730      	adds	r7, #48	@ 0x30
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40005400 	.word	0x40005400
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020400 	.word	0x40020400
 8001b38:	200001ec 	.word	0x200001ec
 8001b3c:	40026010 	.word	0x40026010
 8001b40:	2000024c 	.word	0x2000024c
 8001b44:	400260a0 	.word	0x400260a0
 8001b48:	40005800 	.word	0x40005800
 8001b4c:	40021400 	.word	0x40021400
 8001b50:	200002ac 	.word	0x200002ac
 8001b54:	40026040 	.word	0x40026040
 8001b58:	2000030c 	.word	0x2000030c
 8001b5c:	400260b8 	.word	0x400260b8

08001b60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08c      	sub	sp, #48	@ 0x30
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a4a      	ldr	r2, [pc, #296]	@ (8001ca8 <HAL_SPI_MspInit+0x148>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	f040 80a0 	bne.w	8001cc4 <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
 8001b88:	4b48      	ldr	r3, [pc, #288]	@ (8001cac <HAL_SPI_MspInit+0x14c>)
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8c:	4a47      	ldr	r2, [pc, #284]	@ (8001cac <HAL_SPI_MspInit+0x14c>)
 8001b8e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b92:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b94:	4b45      	ldr	r3, [pc, #276]	@ (8001cac <HAL_SPI_MspInit+0x14c>)
 8001b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	4b41      	ldr	r3, [pc, #260]	@ (8001cac <HAL_SPI_MspInit+0x14c>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba8:	4a40      	ldr	r2, [pc, #256]	@ (8001cac <HAL_SPI_MspInit+0x14c>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8001cac <HAL_SPI_MspInit+0x14c>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bbc:	23e0      	movs	r3, #224	@ 0xe0
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bcc:	2305      	movs	r3, #5
 8001bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4836      	ldr	r0, [pc, #216]	@ (8001cb0 <HAL_SPI_MspInit+0x150>)
 8001bd8:	f002 f938 	bl	8003e4c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001bdc:	4b35      	ldr	r3, [pc, #212]	@ (8001cb4 <HAL_SPI_MspInit+0x154>)
 8001bde:	4a36      	ldr	r2, [pc, #216]	@ (8001cb8 <HAL_SPI_MspInit+0x158>)
 8001be0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001be2:	4b34      	ldr	r3, [pc, #208]	@ (8001cb4 <HAL_SPI_MspInit+0x154>)
 8001be4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001be8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bea:	4b32      	ldr	r3, [pc, #200]	@ (8001cb4 <HAL_SPI_MspInit+0x154>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf0:	4b30      	ldr	r3, [pc, #192]	@ (8001cb4 <HAL_SPI_MspInit+0x154>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb4 <HAL_SPI_MspInit+0x154>)
 8001bf8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bfc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb4 <HAL_SPI_MspInit+0x154>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c04:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb4 <HAL_SPI_MspInit+0x154>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb4 <HAL_SPI_MspInit+0x154>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c10:	4b28      	ldr	r3, [pc, #160]	@ (8001cb4 <HAL_SPI_MspInit+0x154>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c16:	4b27      	ldr	r3, [pc, #156]	@ (8001cb4 <HAL_SPI_MspInit+0x154>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001c1c:	4825      	ldr	r0, [pc, #148]	@ (8001cb4 <HAL_SPI_MspInit+0x154>)
 8001c1e:	f001 fcf9 	bl	8003614 <HAL_DMA_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001c28:	f7ff fc84 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a21      	ldr	r2, [pc, #132]	@ (8001cb4 <HAL_SPI_MspInit+0x154>)
 8001c30:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001c32:	4a20      	ldr	r2, [pc, #128]	@ (8001cb4 <HAL_SPI_MspInit+0x154>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001c38:	4b20      	ldr	r3, [pc, #128]	@ (8001cbc <HAL_SPI_MspInit+0x15c>)
 8001c3a:	4a21      	ldr	r2, [pc, #132]	@ (8001cc0 <HAL_SPI_MspInit+0x160>)
 8001c3c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cbc <HAL_SPI_MspInit+0x15c>)
 8001c40:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001c44:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c46:	4b1d      	ldr	r3, [pc, #116]	@ (8001cbc <HAL_SPI_MspInit+0x15c>)
 8001c48:	2240      	movs	r2, #64	@ 0x40
 8001c4a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cbc <HAL_SPI_MspInit+0x15c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	@ (8001cbc <HAL_SPI_MspInit+0x15c>)
 8001c54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c58:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c5a:	4b18      	ldr	r3, [pc, #96]	@ (8001cbc <HAL_SPI_MspInit+0x15c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c60:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <HAL_SPI_MspInit+0x15c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <HAL_SPI_MspInit+0x15c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c6c:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <HAL_SPI_MspInit+0x15c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c72:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <HAL_SPI_MspInit+0x15c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001c78:	4810      	ldr	r0, [pc, #64]	@ (8001cbc <HAL_SPI_MspInit+0x15c>)
 8001c7a:	f001 fccb 	bl	8003614 <HAL_DMA_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001c84:	f7ff fc56 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001cbc <HAL_SPI_MspInit+0x15c>)
 8001c8c:	649a      	str	r2, [r3, #72]	@ 0x48
 8001c8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001cbc <HAL_SPI_MspInit+0x15c>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2105      	movs	r1, #5
 8001c98:	2023      	movs	r0, #35	@ 0x23
 8001c9a:	f001 fc84 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001c9e:	2023      	movs	r0, #35	@ 0x23
 8001ca0:	f001 fc9d 	bl	80035de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ca4:	e0c1      	b.n	8001e2a <HAL_SPI_MspInit+0x2ca>
 8001ca6:	bf00      	nop
 8001ca8:	40013000 	.word	0x40013000
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	2000041c 	.word	0x2000041c
 8001cb8:	40026410 	.word	0x40026410
 8001cbc:	2000047c 	.word	0x2000047c
 8001cc0:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI2)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a5a      	ldr	r2, [pc, #360]	@ (8001e34 <HAL_SPI_MspInit+0x2d4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	f040 80ad 	bne.w	8001e2a <HAL_SPI_MspInit+0x2ca>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	4b58      	ldr	r3, [pc, #352]	@ (8001e38 <HAL_SPI_MspInit+0x2d8>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	4a57      	ldr	r2, [pc, #348]	@ (8001e38 <HAL_SPI_MspInit+0x2d8>)
 8001cda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cde:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce0:	4b55      	ldr	r3, [pc, #340]	@ (8001e38 <HAL_SPI_MspInit+0x2d8>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	4b51      	ldr	r3, [pc, #324]	@ (8001e38 <HAL_SPI_MspInit+0x2d8>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	4a50      	ldr	r2, [pc, #320]	@ (8001e38 <HAL_SPI_MspInit+0x2d8>)
 8001cf6:	f043 0304 	orr.w	r3, r3, #4
 8001cfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8001e38 <HAL_SPI_MspInit+0x2d8>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001e38 <HAL_SPI_MspInit+0x2d8>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d10:	4a49      	ldr	r2, [pc, #292]	@ (8001e38 <HAL_SPI_MspInit+0x2d8>)
 8001d12:	f043 0302 	orr.w	r3, r3, #2
 8001d16:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d18:	4b47      	ldr	r3, [pc, #284]	@ (8001e38 <HAL_SPI_MspInit+0x2d8>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d24:	230c      	movs	r3, #12
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d30:	2303      	movs	r3, #3
 8001d32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d34:	2305      	movs	r3, #5
 8001d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	483f      	ldr	r0, [pc, #252]	@ (8001e3c <HAL_SPI_MspInit+0x2dc>)
 8001d40:	f002 f884 	bl	8003e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d52:	2303      	movs	r3, #3
 8001d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d56:	2305      	movs	r3, #5
 8001d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4837      	ldr	r0, [pc, #220]	@ (8001e40 <HAL_SPI_MspInit+0x2e0>)
 8001d62:	f002 f873 	bl	8003e4c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001d66:	4b37      	ldr	r3, [pc, #220]	@ (8001e44 <HAL_SPI_MspInit+0x2e4>)
 8001d68:	4a37      	ldr	r2, [pc, #220]	@ (8001e48 <HAL_SPI_MspInit+0x2e8>)
 8001d6a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001d6c:	4b35      	ldr	r3, [pc, #212]	@ (8001e44 <HAL_SPI_MspInit+0x2e4>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d72:	4b34      	ldr	r3, [pc, #208]	@ (8001e44 <HAL_SPI_MspInit+0x2e4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d78:	4b32      	ldr	r3, [pc, #200]	@ (8001e44 <HAL_SPI_MspInit+0x2e4>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d7e:	4b31      	ldr	r3, [pc, #196]	@ (8001e44 <HAL_SPI_MspInit+0x2e4>)
 8001d80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d84:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d86:	4b2f      	ldr	r3, [pc, #188]	@ (8001e44 <HAL_SPI_MspInit+0x2e4>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e44 <HAL_SPI_MspInit+0x2e4>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001d92:	4b2c      	ldr	r3, [pc, #176]	@ (8001e44 <HAL_SPI_MspInit+0x2e4>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d98:	4b2a      	ldr	r3, [pc, #168]	@ (8001e44 <HAL_SPI_MspInit+0x2e4>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d9e:	4b29      	ldr	r3, [pc, #164]	@ (8001e44 <HAL_SPI_MspInit+0x2e4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001da4:	4827      	ldr	r0, [pc, #156]	@ (8001e44 <HAL_SPI_MspInit+0x2e4>)
 8001da6:	f001 fc35 	bl	8003614 <HAL_DMA_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_SPI_MspInit+0x254>
      Error_Handler();
 8001db0:	f7ff fbc0 	bl	8001534 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a23      	ldr	r2, [pc, #140]	@ (8001e44 <HAL_SPI_MspInit+0x2e4>)
 8001db8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001dba:	4a22      	ldr	r2, [pc, #136]	@ (8001e44 <HAL_SPI_MspInit+0x2e4>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001dc0:	4b22      	ldr	r3, [pc, #136]	@ (8001e4c <HAL_SPI_MspInit+0x2ec>)
 8001dc2:	4a23      	ldr	r2, [pc, #140]	@ (8001e50 <HAL_SPI_MspInit+0x2f0>)
 8001dc4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001dc6:	4b21      	ldr	r3, [pc, #132]	@ (8001e4c <HAL_SPI_MspInit+0x2ec>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <HAL_SPI_MspInit+0x2ec>)
 8001dce:	2240      	movs	r2, #64	@ 0x40
 8001dd0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <HAL_SPI_MspInit+0x2ec>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <HAL_SPI_MspInit+0x2ec>)
 8001dda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dde:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001de0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <HAL_SPI_MspInit+0x2ec>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001de6:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_SPI_MspInit+0x2ec>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001dec:	4b17      	ldr	r3, [pc, #92]	@ (8001e4c <HAL_SPI_MspInit+0x2ec>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001df2:	4b16      	ldr	r3, [pc, #88]	@ (8001e4c <HAL_SPI_MspInit+0x2ec>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001df8:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <HAL_SPI_MspInit+0x2ec>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001dfe:	4813      	ldr	r0, [pc, #76]	@ (8001e4c <HAL_SPI_MspInit+0x2ec>)
 8001e00:	f001 fc08 	bl	8003614 <HAL_DMA_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_SPI_MspInit+0x2ae>
      Error_Handler();
 8001e0a:	f7ff fb93 	bl	8001534 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a0e      	ldr	r2, [pc, #56]	@ (8001e4c <HAL_SPI_MspInit+0x2ec>)
 8001e12:	649a      	str	r2, [r3, #72]	@ 0x48
 8001e14:	4a0d      	ldr	r2, [pc, #52]	@ (8001e4c <HAL_SPI_MspInit+0x2ec>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2105      	movs	r1, #5
 8001e1e:	2024      	movs	r0, #36	@ 0x24
 8001e20:	f001 fbc1 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001e24:	2024      	movs	r0, #36	@ 0x24
 8001e26:	f001 fbda 	bl	80035de <HAL_NVIC_EnableIRQ>
}
 8001e2a:	bf00      	nop
 8001e2c:	3730      	adds	r7, #48	@ 0x30
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40003800 	.word	0x40003800
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020800 	.word	0x40020800
 8001e40:	40020400 	.word	0x40020400
 8001e44:	200004dc 	.word	0x200004dc
 8001e48:	40026058 	.word	0x40026058
 8001e4c:	2000053c 	.word	0x2000053c
 8001e50:	40026070 	.word	0x40026070

08001e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	@ 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a25      	ldr	r2, [pc, #148]	@ (8001f08 <HAL_UART_MspInit+0xb4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d144      	bne.n	8001f00 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <HAL_UART_MspInit+0xb8>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	4a23      	ldr	r2, [pc, #140]	@ (8001f0c <HAL_UART_MspInit+0xb8>)
 8001e80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e86:	4b21      	ldr	r3, [pc, #132]	@ (8001f0c <HAL_UART_MspInit+0xb8>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b1d      	ldr	r3, [pc, #116]	@ (8001f0c <HAL_UART_MspInit+0xb8>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f0c <HAL_UART_MspInit+0xb8>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f0c <HAL_UART_MspInit+0xb8>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4811      	ldr	r0, [pc, #68]	@ (8001f10 <HAL_UART_MspInit+0xbc>)
 8001eca:	f001 ffbf 	bl	8003e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ece:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_UART4;
 8001ee0:	230b      	movs	r3, #11
 8001ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4809      	ldr	r0, [pc, #36]	@ (8001f10 <HAL_UART_MspInit+0xbc>)
 8001eec:	f001 ffae 	bl	8003e4c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2105      	movs	r1, #5
 8001ef4:	2034      	movs	r0, #52	@ 0x34
 8001ef6:	f001 fb56 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001efa:	2034      	movs	r0, #52	@ 0x34
 8001efc:	f001 fb6f 	bl	80035de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001f00:	bf00      	nop
 8001f02:	3728      	adds	r7, #40	@ 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40004c00 	.word	0x40004c00
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020000 	.word	0x40020000

08001f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <NMI_Handler+0x4>

08001f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <HardFault_Handler+0x4>

08001f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <MemManage_Handler+0x4>

08001f2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <BusFault_Handler+0x4>

08001f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <UsageFault_Handler+0x4>

08001f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f4e:	f000 f96d 	bl	800222c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f52:	f00a f8f1 	bl	800c138 <xTaskGetSchedulerState>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d001      	beq.n	8001f60 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f5c:	f00a ffec 	bl	800cf38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001f68:	4802      	ldr	r0, [pc, #8]	@ (8001f74 <DMA1_Stream0_IRQHandler+0x10>)
 8001f6a:	f001 fceb 	bl	8003944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200001ec 	.word	0x200001ec

08001f78 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001f7c:	4802      	ldr	r0, [pc, #8]	@ (8001f88 <DMA1_Stream2_IRQHandler+0x10>)
 8001f7e:	f001 fce1 	bl	8003944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200002ac 	.word	0x200002ac

08001f8c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001f90:	4802      	ldr	r0, [pc, #8]	@ (8001f9c <DMA1_Stream3_IRQHandler+0x10>)
 8001f92:	f001 fcd7 	bl	8003944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200004dc 	.word	0x200004dc

08001fa0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001fa4:	4802      	ldr	r0, [pc, #8]	@ (8001fb0 <DMA1_Stream4_IRQHandler+0x10>)
 8001fa6:	f001 fccd 	bl	8003944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	2000053c 	.word	0x2000053c

08001fb4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001fb8:	4802      	ldr	r0, [pc, #8]	@ (8001fc4 <DMA1_Stream6_IRQHandler+0x10>)
 8001fba:	f001 fcc3 	bl	8003944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	2000024c 	.word	0x2000024c

08001fc8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <CAN1_TX_IRQHandler+0x10>)
 8001fce:	f000 fffe 	bl	8002fce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2000011c 	.word	0x2000011c

08001fdc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fe0:	4802      	ldr	r0, [pc, #8]	@ (8001fec <CAN1_RX0_IRQHandler+0x10>)
 8001fe2:	f000 fff4 	bl	8002fce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2000011c 	.word	0x2000011c

08001ff0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ff4:	4802      	ldr	r0, [pc, #8]	@ (8002000 <I2C1_EV_IRQHandler+0x10>)
 8001ff6:	f002 fd13 	bl	8004a20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000144 	.word	0x20000144

08002004 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002008:	4802      	ldr	r0, [pc, #8]	@ (8002014 <I2C1_ER_IRQHandler+0x10>)
 800200a:	f002 fe7a 	bl	8004d02 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000144 	.word	0x20000144

08002018 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800201c:	4802      	ldr	r0, [pc, #8]	@ (8002028 <I2C2_EV_IRQHandler+0x10>)
 800201e:	f002 fcff 	bl	8004a20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000198 	.word	0x20000198

0800202c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002030:	4802      	ldr	r0, [pc, #8]	@ (800203c <SPI1_IRQHandler+0x10>)
 8002032:	f006 f8db 	bl	80081ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	2000036c 	.word	0x2000036c

08002040 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002044:	4802      	ldr	r0, [pc, #8]	@ (8002050 <SPI2_IRQHandler+0x10>)
 8002046:	f006 f8d1 	bl	80081ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200003c4 	.word	0x200003c4

08002054 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002058:	4802      	ldr	r0, [pc, #8]	@ (8002064 <DMA1_Stream7_IRQHandler+0x10>)
 800205a:	f001 fc73 	bl	8003944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000030c 	.word	0x2000030c

08002068 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800206c:	4802      	ldr	r0, [pc, #8]	@ (8002078 <UART4_IRQHandler+0x10>)
 800206e:	f006 fd4d 	bl	8008b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2000059c 	.word	0x2000059c

0800207c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002080:	4802      	ldr	r0, [pc, #8]	@ (800208c <DMA2_Stream0_IRQHandler+0x10>)
 8002082:	f001 fc5f 	bl	8003944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	2000041c 	.word	0x2000041c

08002090 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002094:	4802      	ldr	r0, [pc, #8]	@ (80020a0 <DMA2_Stream3_IRQHandler+0x10>)
 8002096:	f001 fc55 	bl	8003944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2000047c 	.word	0x2000047c

080020a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020ac:	4a14      	ldr	r2, [pc, #80]	@ (8002100 <_sbrk+0x5c>)
 80020ae:	4b15      	ldr	r3, [pc, #84]	@ (8002104 <_sbrk+0x60>)
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b8:	4b13      	ldr	r3, [pc, #76]	@ (8002108 <_sbrk+0x64>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d102      	bne.n	80020c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c0:	4b11      	ldr	r3, [pc, #68]	@ (8002108 <_sbrk+0x64>)
 80020c2:	4a12      	ldr	r2, [pc, #72]	@ (800210c <_sbrk+0x68>)
 80020c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020c6:	4b10      	ldr	r3, [pc, #64]	@ (8002108 <_sbrk+0x64>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d207      	bcs.n	80020e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d4:	f00b f9ee 	bl	800d4b4 <__errno>
 80020d8:	4603      	mov	r3, r0
 80020da:	220c      	movs	r2, #12
 80020dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	e009      	b.n	80020f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e4:	4b08      	ldr	r3, [pc, #32]	@ (8002108 <_sbrk+0x64>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ea:	4b07      	ldr	r3, [pc, #28]	@ (8002108 <_sbrk+0x64>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	4a05      	ldr	r2, [pc, #20]	@ (8002108 <_sbrk+0x64>)
 80020f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020f6:	68fb      	ldr	r3, [r7, #12]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20050000 	.word	0x20050000
 8002104:	00000400 	.word	0x00000400
 8002108:	20000604 	.word	0x20000604
 800210c:	200050a8 	.word	0x200050a8

08002110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002114:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <SystemInit+0x20>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211a:	4a05      	ldr	r2, [pc, #20]	@ (8002130 <SystemInit+0x20>)
 800211c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002120:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002134:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800216c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002138:	480d      	ldr	r0, [pc, #52]	@ (8002170 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800213a:	490e      	ldr	r1, [pc, #56]	@ (8002174 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800213c:	4a0e      	ldr	r2, [pc, #56]	@ (8002178 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002140:	e002      	b.n	8002148 <LoopCopyDataInit>

08002142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002146:	3304      	adds	r3, #4

08002148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800214c:	d3f9      	bcc.n	8002142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214e:	4a0b      	ldr	r2, [pc, #44]	@ (800217c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002150:	4c0b      	ldr	r4, [pc, #44]	@ (8002180 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002154:	e001      	b.n	800215a <LoopFillZerobss>

08002156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002158:	3204      	adds	r2, #4

0800215a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800215c:	d3fb      	bcc.n	8002156 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800215e:	f7ff ffd7 	bl	8002110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002162:	f00b f9ad 	bl	800d4c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002166:	f7fe fd6d 	bl	8000c44 <main>
  bx  lr    
 800216a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800216c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002174:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002178:	0800df80 	.word	0x0800df80
  ldr r2, =_sbss
 800217c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002180:	200050a4 	.word	0x200050a4

08002184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002184:	e7fe      	b.n	8002184 <ADC_IRQHandler>
	...

08002188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800218c:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0d      	ldr	r2, [pc, #52]	@ (80021c8 <HAL_Init+0x40>)
 8002192:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002196:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002198:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <HAL_Init+0x40>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0a      	ldr	r2, [pc, #40]	@ (80021c8 <HAL_Init+0x40>)
 800219e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a4:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <HAL_Init+0x40>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a07      	ldr	r2, [pc, #28]	@ (80021c8 <HAL_Init+0x40>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b0:	2003      	movs	r0, #3
 80021b2:	f001 f9ed 	bl	8003590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021b6:	200f      	movs	r0, #15
 80021b8:	f000 f808 	bl	80021cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021bc:	f7ff faa6 	bl	800170c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023c00 	.word	0x40023c00

080021cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021d4:	4b12      	ldr	r3, [pc, #72]	@ (8002220 <HAL_InitTick+0x54>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b12      	ldr	r3, [pc, #72]	@ (8002224 <HAL_InitTick+0x58>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	4619      	mov	r1, r3
 80021de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ea:	4618      	mov	r0, r3
 80021ec:	f001 fa05 	bl	80035fa <HAL_SYSTICK_Config>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00e      	b.n	8002218 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b0f      	cmp	r3, #15
 80021fe:	d80a      	bhi.n	8002216 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002200:	2200      	movs	r2, #0
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	f001 f9cd 	bl	80035a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800220c:	4a06      	ldr	r2, [pc, #24]	@ (8002228 <HAL_InitTick+0x5c>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	e000      	b.n	8002218 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000000 	.word	0x20000000
 8002224:	20000008 	.word	0x20000008
 8002228:	20000004 	.word	0x20000004

0800222c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002230:	4b06      	ldr	r3, [pc, #24]	@ (800224c <HAL_IncTick+0x20>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <HAL_IncTick+0x24>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4413      	add	r3, r2
 800223c:	4a04      	ldr	r2, [pc, #16]	@ (8002250 <HAL_IncTick+0x24>)
 800223e:	6013      	str	r3, [r2, #0]
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20000008 	.word	0x20000008
 8002250:	20000608 	.word	0x20000608

08002254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return uwTick;
 8002258:	4b03      	ldr	r3, [pc, #12]	@ (8002268 <HAL_GetTick+0x14>)
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000608 	.word	0x20000608

0800226c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e033      	b.n	80022ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d109      	bne.n	800229e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff fa6a 	bl	8001764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d118      	bne.n	80022dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022b2:	f023 0302 	bic.w	r3, r3, #2
 80022b6:	f043 0202 	orr.w	r2, r3, #2
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f94a 	bl	8002558 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	f023 0303 	bic.w	r3, r3, #3
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80022da:	e001      	b.n	80022e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x1c>
 800230c:	2302      	movs	r3, #2
 800230e:	e113      	b.n	8002538 <HAL_ADC_ConfigChannel+0x244>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b09      	cmp	r3, #9
 800231e:	d925      	bls.n	800236c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68d9      	ldr	r1, [r3, #12]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	3b1e      	subs	r3, #30
 8002336:	2207      	movs	r2, #7
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43da      	mvns	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	400a      	ands	r2, r1
 8002344:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68d9      	ldr	r1, [r3, #12]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	b29b      	uxth	r3, r3
 8002356:	4618      	mov	r0, r3
 8002358:	4603      	mov	r3, r0
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4403      	add	r3, r0
 800235e:	3b1e      	subs	r3, #30
 8002360:	409a      	lsls	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	e022      	b.n	80023b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6919      	ldr	r1, [r3, #16]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	2207      	movs	r2, #7
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	400a      	ands	r2, r1
 800238e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6919      	ldr	r1, [r3, #16]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	4618      	mov	r0, r3
 80023a2:	4603      	mov	r3, r0
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4403      	add	r3, r0
 80023a8:	409a      	lsls	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d824      	bhi.n	8002404 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	3b05      	subs	r3, #5
 80023cc:	221f      	movs	r2, #31
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	400a      	ands	r2, r1
 80023da:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	4618      	mov	r0, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	3b05      	subs	r3, #5
 80023f6:	fa00 f203 	lsl.w	r2, r0, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	635a      	str	r2, [r3, #52]	@ 0x34
 8002402:	e04c      	b.n	800249e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b0c      	cmp	r3, #12
 800240a:	d824      	bhi.n	8002456 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	3b23      	subs	r3, #35	@ 0x23
 800241e:	221f      	movs	r2, #31
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43da      	mvns	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	400a      	ands	r2, r1
 800242c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	b29b      	uxth	r3, r3
 800243a:	4618      	mov	r0, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	3b23      	subs	r3, #35	@ 0x23
 8002448:	fa00 f203 	lsl.w	r2, r0, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	631a      	str	r2, [r3, #48]	@ 0x30
 8002454:	e023      	b.n	800249e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	3b41      	subs	r3, #65	@ 0x41
 8002468:	221f      	movs	r2, #31
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43da      	mvns	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	400a      	ands	r2, r1
 8002476:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	4618      	mov	r0, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	3b41      	subs	r3, #65	@ 0x41
 8002492:	fa00 f203 	lsl.w	r2, r0, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800249e:	4b29      	ldr	r3, [pc, #164]	@ (8002544 <HAL_ADC_ConfigChannel+0x250>)
 80024a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a28      	ldr	r2, [pc, #160]	@ (8002548 <HAL_ADC_ConfigChannel+0x254>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d10f      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x1d8>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b12      	cmp	r3, #18
 80024b2:	d10b      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002548 <HAL_ADC_ConfigChannel+0x254>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d12b      	bne.n	800252e <HAL_ADC_ConfigChannel+0x23a>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1c      	ldr	r2, [pc, #112]	@ (800254c <HAL_ADC_ConfigChannel+0x258>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d003      	beq.n	80024e8 <HAL_ADC_ConfigChannel+0x1f4>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b11      	cmp	r3, #17
 80024e6:	d122      	bne.n	800252e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a11      	ldr	r2, [pc, #68]	@ (800254c <HAL_ADC_ConfigChannel+0x258>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d111      	bne.n	800252e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800250a:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <HAL_ADC_ConfigChannel+0x25c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a11      	ldr	r2, [pc, #68]	@ (8002554 <HAL_ADC_ConfigChannel+0x260>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	0c9a      	lsrs	r2, r3, #18
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002520:	e002      	b.n	8002528 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	3b01      	subs	r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f9      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	40012300 	.word	0x40012300
 8002548:	40012000 	.word	0x40012000
 800254c:	10000012 	.word	0x10000012
 8002550:	20000000 	.word	0x20000000
 8002554:	431bde83 	.word	0x431bde83

08002558 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002560:	4b79      	ldr	r3, [pc, #484]	@ (8002748 <ADC_Init+0x1f0>)
 8002562:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	431a      	orrs	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800258c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6859      	ldr	r1, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	021a      	lsls	r2, r3, #8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80025b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6899      	ldr	r1, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ea:	4a58      	ldr	r2, [pc, #352]	@ (800274c <ADC_Init+0x1f4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d022      	beq.n	8002636 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6899      	ldr	r1, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002620:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6899      	ldr	r1, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	e00f      	b.n	8002656 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002644:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002654:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0202 	bic.w	r2, r2, #2
 8002664:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6899      	ldr	r1, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	7e1b      	ldrb	r3, [r3, #24]
 8002670:	005a      	lsls	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d01b      	beq.n	80026bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002692:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80026a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ae:	3b01      	subs	r3, #1
 80026b0:	035a      	lsls	r2, r3, #13
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	e007      	b.n	80026cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	051a      	lsls	r2, r3, #20
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6899      	ldr	r1, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800270e:	025a      	lsls	r2, r3, #9
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002726:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6899      	ldr	r1, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	029a      	lsls	r2, r3, #10
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	609a      	str	r2, [r3, #8]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	40012300 	.word	0x40012300
 800274c:	0f000001 	.word	0x0f000001

08002750 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e0ed      	b.n	800293e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d102      	bne.n	8002774 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff f83c 	bl	80017ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002784:	f7ff fd66 	bl	8002254 <HAL_GetTick>
 8002788:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800278a:	e012      	b.n	80027b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800278c:	f7ff fd62 	bl	8002254 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b0a      	cmp	r3, #10
 8002798:	d90b      	bls.n	80027b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2205      	movs	r2, #5
 80027aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e0c5      	b.n	800293e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0e5      	beq.n	800278c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0202 	bic.w	r2, r2, #2
 80027ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027d0:	f7ff fd40 	bl	8002254 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027d6:	e012      	b.n	80027fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027d8:	f7ff fd3c 	bl	8002254 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b0a      	cmp	r3, #10
 80027e4:	d90b      	bls.n	80027fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2205      	movs	r2, #5
 80027f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e09f      	b.n	800293e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1e5      	bne.n	80027d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	7e1b      	ldrb	r3, [r3, #24]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d108      	bne.n	8002826 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	e007      	b.n	8002836 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002834:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	7e5b      	ldrb	r3, [r3, #25]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d108      	bne.n	8002850 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	e007      	b.n	8002860 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800285e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	7e9b      	ldrb	r3, [r3, #26]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d108      	bne.n	800287a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0220 	orr.w	r2, r2, #32
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	e007      	b.n	800288a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0220 	bic.w	r2, r2, #32
 8002888:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7edb      	ldrb	r3, [r3, #27]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d108      	bne.n	80028a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0210 	bic.w	r2, r2, #16
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	e007      	b.n	80028b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0210 	orr.w	r2, r2, #16
 80028b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7f1b      	ldrb	r3, [r3, #28]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d108      	bne.n	80028ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0208 	orr.w	r2, r2, #8
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e007      	b.n	80028de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0208 	bic.w	r2, r2, #8
 80028dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	7f5b      	ldrb	r3, [r3, #29]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d108      	bne.n	80028f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0204 	orr.w	r2, r2, #4
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	e007      	b.n	8002908 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0204 	bic.w	r2, r2, #4
 8002906:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	ea42 0103 	orr.w	r1, r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	1e5a      	subs	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800295e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002960:	7cfb      	ldrb	r3, [r7, #19]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d003      	beq.n	800296e <HAL_CAN_ConfigFilter+0x26>
 8002966:	7cfb      	ldrb	r3, [r7, #19]
 8002968:	2b02      	cmp	r3, #2
 800296a:	f040 80c7 	bne.w	8002afc <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a69      	ldr	r2, [pc, #420]	@ (8002b18 <HAL_CAN_ConfigFilter+0x1d0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d001      	beq.n	800297c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002978:	4b68      	ldr	r3, [pc, #416]	@ (8002b1c <HAL_CAN_ConfigFilter+0x1d4>)
 800297a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	4a63      	ldr	r2, [pc, #396]	@ (8002b1c <HAL_CAN_ConfigFilter+0x1d4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d111      	bne.n	80029b8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800299a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	431a      	orrs	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	2201      	movs	r2, #1
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	401a      	ands	r2, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d123      	bne.n	8002a2a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	401a      	ands	r2, r3
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a04:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3248      	adds	r2, #72	@ 0x48
 8002a0a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a1e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a20:	6979      	ldr	r1, [r7, #20]
 8002a22:	3348      	adds	r3, #72	@ 0x48
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	440b      	add	r3, r1
 8002a28:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d122      	bne.n	8002a78 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a52:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	3248      	adds	r2, #72	@ 0x48
 8002a58:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a6c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a6e:	6979      	ldr	r1, [r7, #20]
 8002a70:	3348      	adds	r3, #72	@ 0x48
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	440b      	add	r3, r1
 8002a76:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002a92:	e007      	b.n	8002aa4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002abe:	e007      	b.n	8002ad0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d107      	bne.n	8002ae8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002aee:	f023 0201 	bic.w	r2, r3, #1
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e006      	b.n	8002b0a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
  }
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40006c00 	.word	0x40006c00
 8002b1c:	40006400 	.word	0x40006400

08002b20 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d12e      	bne.n	8002b92 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b4c:	f7ff fb82 	bl	8002254 <HAL_GetTick>
 8002b50:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b52:	e012      	b.n	8002b7a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b54:	f7ff fb7e 	bl	8002254 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b0a      	cmp	r3, #10
 8002b60:	d90b      	bls.n	8002b7a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2205      	movs	r2, #5
 8002b72:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e012      	b.n	8002ba0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1e5      	bne.n	8002b54 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e006      	b.n	8002ba0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
  }
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	@ 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bbc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bc6:	7ffb      	ldrb	r3, [r7, #31]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d003      	beq.n	8002bd4 <HAL_CAN_AddTxMessage+0x2c>
 8002bcc:	7ffb      	ldrb	r3, [r7, #31]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	f040 80b8 	bne.w	8002d44 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10a      	bne.n	8002bf4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d105      	bne.n	8002bf4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 80a0 	beq.w	8002d34 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	0e1b      	lsrs	r3, r3, #24
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d907      	bls.n	8002c14 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c08:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e09e      	b.n	8002d52 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002c14:	2201      	movs	r2, #1
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10d      	bne.n	8002c42 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c30:	68f9      	ldr	r1, [r7, #12]
 8002c32:	6809      	ldr	r1, [r1, #0]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	3318      	adds	r3, #24
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	440b      	add	r3, r1
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	e00f      	b.n	8002c62 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c4c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c52:	68f9      	ldr	r1, [r7, #12]
 8002c54:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002c56:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	3318      	adds	r3, #24
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	440b      	add	r3, r1
 8002c60:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6819      	ldr	r1, [r3, #0]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	3318      	adds	r3, #24
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	440b      	add	r3, r1
 8002c72:	3304      	adds	r3, #4
 8002c74:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	7d1b      	ldrb	r3, [r3, #20]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d111      	bne.n	8002ca2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3318      	adds	r3, #24
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	4413      	add	r3, r2
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	6811      	ldr	r1, [r2, #0]
 8002c92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	3318      	adds	r3, #24
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3307      	adds	r3, #7
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	061a      	lsls	r2, r3, #24
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3306      	adds	r3, #6
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	041b      	lsls	r3, r3, #16
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3305      	adds	r3, #5
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	3204      	adds	r2, #4
 8002cc2:	7812      	ldrb	r2, [r2, #0]
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	6811      	ldr	r1, [r2, #0]
 8002cca:	ea43 0200 	orr.w	r2, r3, r0
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	440b      	add	r3, r1
 8002cd4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002cd8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3303      	adds	r3, #3
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	061a      	lsls	r2, r3, #24
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	041b      	lsls	r3, r3, #16
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	7812      	ldrb	r2, [r2, #0]
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	6811      	ldr	r1, [r2, #0]
 8002d00:	ea43 0200 	orr.w	r2, r3, r0
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	440b      	add	r3, r1
 8002d0a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002d0e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	3318      	adds	r3, #24
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	4413      	add	r3, r2
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	6811      	ldr	r1, [r2, #0]
 8002d22:	f043 0201 	orr.w	r2, r3, #1
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	3318      	adds	r3, #24
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	440b      	add	r3, r1
 8002d2e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e00e      	b.n	8002d52 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e006      	b.n	8002d52 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d48:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
  }
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3724      	adds	r7, #36	@ 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b087      	sub	sp, #28
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d72:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d74:	7dfb      	ldrb	r3, [r7, #23]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d003      	beq.n	8002d82 <HAL_CAN_GetRxMessage+0x24>
 8002d7a:	7dfb      	ldrb	r3, [r7, #23]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	f040 80f3 	bne.w	8002f68 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10e      	bne.n	8002da6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d116      	bne.n	8002dc4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e0e7      	b.n	8002f76 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d107      	bne.n	8002dc4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0d8      	b.n	8002f76 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	331b      	adds	r3, #27
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	4413      	add	r3, r2
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0204 	and.w	r2, r3, #4
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10c      	bne.n	8002dfc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	331b      	adds	r3, #27
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	4413      	add	r3, r2
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0d5b      	lsrs	r3, r3, #21
 8002df2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	e00b      	b.n	8002e14 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	331b      	adds	r3, #27
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	4413      	add	r3, r2
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	08db      	lsrs	r3, r3, #3
 8002e0c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	331b      	adds	r3, #27
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	4413      	add	r3, r2
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0202 	and.w	r2, r3, #2
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	331b      	adds	r3, #27
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	4413      	add	r3, r2
 8002e36:	3304      	adds	r3, #4
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 020f 	and.w	r2, r3, #15
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	331b      	adds	r3, #27
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3304      	adds	r3, #4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	331b      	adds	r3, #27
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	4413      	add	r3, r2
 8002e66:	3304      	adds	r3, #4
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	0c1b      	lsrs	r3, r3, #16
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	0a1a      	lsrs	r2, r3, #8
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	0c1a      	lsrs	r2, r3, #16
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	0e1a      	lsrs	r2, r3, #24
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	3303      	adds	r3, #3
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	0a1a      	lsrs	r2, r3, #8
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	3305      	adds	r3, #5
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	0c1a      	lsrs	r2, r3, #16
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	3306      	adds	r3, #6
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	0e1a      	lsrs	r2, r3, #24
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	3307      	adds	r3, #7
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d108      	bne.n	8002f54 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0220 	orr.w	r2, r2, #32
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	e007      	b.n	8002f64 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691a      	ldr	r2, [r3, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0220 	orr.w	r2, r2, #32
 8002f62:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e006      	b.n	8002f76 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
  }
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	371c      	adds	r7, #28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b085      	sub	sp, #20
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f92:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d002      	beq.n	8002fa0 <HAL_CAN_ActivateNotification+0x1e>
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d109      	bne.n	8002fb4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6959      	ldr	r1, [r3, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	e006      	b.n	8002fc2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
  }
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b08a      	sub	sp, #40	@ 0x28
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d07c      	beq.n	800310e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d023      	beq.n	8003066 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2201      	movs	r2, #1
 8003024:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fd fc07 	bl	8000844 <HAL_CAN_TxMailbox0CompleteCallback>
 8003036:	e016      	b.n	8003066 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b00      	cmp	r3, #0
 8003040:	d004      	beq.n	800304c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24
 800304a:	e00c      	b.n	8003066 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800305c:	627b      	str	r3, [r7, #36]	@ 0x24
 800305e:	e002      	b.n	8003066 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f96b 	bl	800333c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d024      	beq.n	80030ba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003078:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7fd fbef 	bl	8000868 <HAL_CAN_TxMailbox1CompleteCallback>
 800308a:	e016      	b.n	80030ba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003092:	2b00      	cmp	r3, #0
 8003094:	d004      	beq.n	80030a0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800309c:	627b      	str	r3, [r7, #36]	@ 0x24
 800309e:	e00c      	b.n	80030ba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d004      	beq.n	80030b4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b2:	e002      	b.n	80030ba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f94b 	bl	8003350 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d024      	beq.n	800310e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80030cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7fd fbd7 	bl	800088c <HAL_CAN_TxMailbox2CompleteCallback>
 80030de:	e016      	b.n	800310e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d004      	beq.n	80030f4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f2:	e00c      	b.n	800310e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003104:	627b      	str	r3, [r7, #36]	@ 0x24
 8003106:	e002      	b.n	800310e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f92b 	bl	8003364 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00c      	beq.n	8003132 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2210      	movs	r2, #16
 8003130:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00b      	beq.n	8003154 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d006      	beq.n	8003154 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2208      	movs	r2, #8
 800314c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f912 	bl	8003378 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d009      	beq.n	8003172 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7fd fb9f 	bl	80008b0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00c      	beq.n	8003196 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2210      	movs	r2, #16
 8003194:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00b      	beq.n	80031b8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d006      	beq.n	80031b8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2208      	movs	r2, #8
 80031b0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f8f4 	bl	80033a0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d009      	beq.n	80031d6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f8db 	bl	800338c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00b      	beq.n	80031f8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d006      	beq.n	80031f8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2210      	movs	r2, #16
 80031f0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f8de 	bl	80033b4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d006      	beq.n	800321a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2208      	movs	r2, #8
 8003212:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f8d7 	bl	80033c8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d07b      	beq.n	800331c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d072      	beq.n	8003314 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	f043 0302 	orr.w	r3, r3, #2
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	f043 0304 	orr.w	r3, r3, #4
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003288:	2b00      	cmp	r3, #0
 800328a:	d043      	beq.n	8003314 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003292:	2b00      	cmp	r3, #0
 8003294:	d03e      	beq.n	8003314 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800329c:	2b60      	cmp	r3, #96	@ 0x60
 800329e:	d02b      	beq.n	80032f8 <HAL_CAN_IRQHandler+0x32a>
 80032a0:	2b60      	cmp	r3, #96	@ 0x60
 80032a2:	d82e      	bhi.n	8003302 <HAL_CAN_IRQHandler+0x334>
 80032a4:	2b50      	cmp	r3, #80	@ 0x50
 80032a6:	d022      	beq.n	80032ee <HAL_CAN_IRQHandler+0x320>
 80032a8:	2b50      	cmp	r3, #80	@ 0x50
 80032aa:	d82a      	bhi.n	8003302 <HAL_CAN_IRQHandler+0x334>
 80032ac:	2b40      	cmp	r3, #64	@ 0x40
 80032ae:	d019      	beq.n	80032e4 <HAL_CAN_IRQHandler+0x316>
 80032b0:	2b40      	cmp	r3, #64	@ 0x40
 80032b2:	d826      	bhi.n	8003302 <HAL_CAN_IRQHandler+0x334>
 80032b4:	2b30      	cmp	r3, #48	@ 0x30
 80032b6:	d010      	beq.n	80032da <HAL_CAN_IRQHandler+0x30c>
 80032b8:	2b30      	cmp	r3, #48	@ 0x30
 80032ba:	d822      	bhi.n	8003302 <HAL_CAN_IRQHandler+0x334>
 80032bc:	2b10      	cmp	r3, #16
 80032be:	d002      	beq.n	80032c6 <HAL_CAN_IRQHandler+0x2f8>
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	d005      	beq.n	80032d0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80032c4:	e01d      	b.n	8003302 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	f043 0308 	orr.w	r3, r3, #8
 80032cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032ce:	e019      	b.n	8003304 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	f043 0310 	orr.w	r3, r3, #16
 80032d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032d8:	e014      	b.n	8003304 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	f043 0320 	orr.w	r3, r3, #32
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032e2:	e00f      	b.n	8003304 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80032e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032ec:	e00a      	b.n	8003304 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032f6:	e005      	b.n	8003304 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003300:	e000      	b.n	8003304 <HAL_CAN_IRQHandler+0x336>
            break;
 8003302:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003312:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2204      	movs	r2, #4
 800331a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800331c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331e:	2b00      	cmp	r3, #0
 8003320:	d008      	beq.n	8003334 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f854 	bl	80033dc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003334:	bf00      	nop
 8003336:	3728      	adds	r7, #40	@ 0x28
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003400:	4b0c      	ldr	r3, [pc, #48]	@ (8003434 <__NVIC_SetPriorityGrouping+0x44>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800340c:	4013      	ands	r3, r2
 800340e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003418:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800341c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003422:	4a04      	ldr	r2, [pc, #16]	@ (8003434 <__NVIC_SetPriorityGrouping+0x44>)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	60d3      	str	r3, [r2, #12]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800343c:	4b04      	ldr	r3, [pc, #16]	@ (8003450 <__NVIC_GetPriorityGrouping+0x18>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	0a1b      	lsrs	r3, r3, #8
 8003442:	f003 0307 	and.w	r3, r3, #7
}
 8003446:	4618      	mov	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	2b00      	cmp	r3, #0
 8003464:	db0b      	blt.n	800347e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	f003 021f 	and.w	r2, r3, #31
 800346c:	4907      	ldr	r1, [pc, #28]	@ (800348c <__NVIC_EnableIRQ+0x38>)
 800346e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	2001      	movs	r0, #1
 8003476:	fa00 f202 	lsl.w	r2, r0, r2
 800347a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	e000e100 	.word	0xe000e100

08003490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	6039      	str	r1, [r7, #0]
 800349a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800349c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	db0a      	blt.n	80034ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	490c      	ldr	r1, [pc, #48]	@ (80034dc <__NVIC_SetPriority+0x4c>)
 80034aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ae:	0112      	lsls	r2, r2, #4
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	440b      	add	r3, r1
 80034b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b8:	e00a      	b.n	80034d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4908      	ldr	r1, [pc, #32]	@ (80034e0 <__NVIC_SetPriority+0x50>)
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	3b04      	subs	r3, #4
 80034c8:	0112      	lsls	r2, r2, #4
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	440b      	add	r3, r1
 80034ce:	761a      	strb	r2, [r3, #24]
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000e100 	.word	0xe000e100
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b089      	sub	sp, #36	@ 0x24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f1c3 0307 	rsb	r3, r3, #7
 80034fe:	2b04      	cmp	r3, #4
 8003500:	bf28      	it	cs
 8003502:	2304      	movcs	r3, #4
 8003504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3304      	adds	r3, #4
 800350a:	2b06      	cmp	r3, #6
 800350c:	d902      	bls.n	8003514 <NVIC_EncodePriority+0x30>
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3b03      	subs	r3, #3
 8003512:	e000      	b.n	8003516 <NVIC_EncodePriority+0x32>
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003518:	f04f 32ff 	mov.w	r2, #4294967295
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43da      	mvns	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	401a      	ands	r2, r3
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800352c:	f04f 31ff 	mov.w	r1, #4294967295
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	fa01 f303 	lsl.w	r3, r1, r3
 8003536:	43d9      	mvns	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800353c:	4313      	orrs	r3, r2
         );
}
 800353e:	4618      	mov	r0, r3
 8003540:	3724      	adds	r7, #36	@ 0x24
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
	...

0800354c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3b01      	subs	r3, #1
 8003558:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800355c:	d301      	bcc.n	8003562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800355e:	2301      	movs	r3, #1
 8003560:	e00f      	b.n	8003582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003562:	4a0a      	ldr	r2, [pc, #40]	@ (800358c <SysTick_Config+0x40>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3b01      	subs	r3, #1
 8003568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800356a:	210f      	movs	r1, #15
 800356c:	f04f 30ff 	mov.w	r0, #4294967295
 8003570:	f7ff ff8e 	bl	8003490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003574:	4b05      	ldr	r3, [pc, #20]	@ (800358c <SysTick_Config+0x40>)
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800357a:	4b04      	ldr	r3, [pc, #16]	@ (800358c <SysTick_Config+0x40>)
 800357c:	2207      	movs	r2, #7
 800357e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	e000e010 	.word	0xe000e010

08003590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff ff29 	bl	80033f0 <__NVIC_SetPriorityGrouping>
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	4603      	mov	r3, r0
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
 80035b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035b8:	f7ff ff3e 	bl	8003438 <__NVIC_GetPriorityGrouping>
 80035bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	6978      	ldr	r0, [r7, #20]
 80035c4:	f7ff ff8e 	bl	80034e4 <NVIC_EncodePriority>
 80035c8:	4602      	mov	r2, r0
 80035ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff5d 	bl	8003490 <__NVIC_SetPriority>
}
 80035d6:	bf00      	nop
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	4603      	mov	r3, r0
 80035e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff ff31 	bl	8003454 <__NVIC_EnableIRQ>
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ffa2 	bl	800354c <SysTick_Config>
 8003608:	4603      	mov	r3, r0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003620:	f7fe fe18 	bl	8002254 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e099      	b.n	8003764 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0201 	bic.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003650:	e00f      	b.n	8003672 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003652:	f7fe fdff 	bl	8002254 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b05      	cmp	r3, #5
 800365e:	d908      	bls.n	8003672 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2203      	movs	r2, #3
 800366a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e078      	b.n	8003764 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e8      	bne.n	8003652 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	4b38      	ldr	r3, [pc, #224]	@ (800376c <HAL_DMA_Init+0x158>)
 800368c:	4013      	ands	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800369e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d107      	bne.n	80036dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d4:	4313      	orrs	r3, r2
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f023 0307 	bic.w	r3, r3, #7
 80036f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003702:	2b04      	cmp	r3, #4
 8003704:	d117      	bne.n	8003736 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00e      	beq.n	8003736 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fb1b 	bl	8003d54 <DMA_CheckFifoParam>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2240      	movs	r2, #64	@ 0x40
 8003728:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003732:	2301      	movs	r3, #1
 8003734:	e016      	b.n	8003764 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fad2 	bl	8003ce8 <DMA_CalcBaseAndBitshift>
 8003744:	4603      	mov	r3, r0
 8003746:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374c:	223f      	movs	r2, #63	@ 0x3f
 800374e:	409a      	lsls	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	e010803f 	.word	0xe010803f

08003770 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003786:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_DMA_Start_IT+0x26>
 8003792:	2302      	movs	r3, #2
 8003794:	e040      	b.n	8003818 <HAL_DMA_Start_IT+0xa8>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d12f      	bne.n	800380a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2202      	movs	r2, #2
 80037ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 fa64 	bl	8003c8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c8:	223f      	movs	r2, #63	@ 0x3f
 80037ca:	409a      	lsls	r2, r3
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0216 	orr.w	r2, r2, #22
 80037de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d007      	beq.n	80037f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0208 	orr.w	r2, r2, #8
 80037f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	e005      	b.n	8003816 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003812:	2302      	movs	r3, #2
 8003814:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003816:	7dfb      	ldrb	r3, [r7, #23]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800382e:	f7fe fd11 	bl	8002254 <HAL_GetTick>
 8003832:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d008      	beq.n	8003852 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2280      	movs	r2, #128	@ 0x80
 8003844:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e052      	b.n	80038f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0216 	bic.w	r2, r2, #22
 8003860:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695a      	ldr	r2, [r3, #20]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003870:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	d103      	bne.n	8003882 <HAL_DMA_Abort+0x62>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0208 	bic.w	r2, r2, #8
 8003890:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038a2:	e013      	b.n	80038cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038a4:	f7fe fcd6 	bl	8002254 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b05      	cmp	r3, #5
 80038b0:	d90c      	bls.n	80038cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2220      	movs	r2, #32
 80038b6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2203      	movs	r2, #3
 80038bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e015      	b.n	80038f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1e4      	bne.n	80038a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038de:	223f      	movs	r2, #63	@ 0x3f
 80038e0:	409a      	lsls	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d004      	beq.n	800391e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2280      	movs	r2, #128	@ 0x80
 8003918:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e00c      	b.n	8003938 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2205      	movs	r2, #5
 8003922:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003950:	4b8e      	ldr	r3, [pc, #568]	@ (8003b8c <HAL_DMA_IRQHandler+0x248>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a8e      	ldr	r2, [pc, #568]	@ (8003b90 <HAL_DMA_IRQHandler+0x24c>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	0a9b      	lsrs	r3, r3, #10
 800395c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003962:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396e:	2208      	movs	r2, #8
 8003970:	409a      	lsls	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d01a      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d013      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0204 	bic.w	r2, r2, #4
 8003996:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399c:	2208      	movs	r2, #8
 800399e:	409a      	lsls	r2, r3
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a8:	f043 0201 	orr.w	r2, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b4:	2201      	movs	r2, #1
 80039b6:	409a      	lsls	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d012      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d2:	2201      	movs	r2, #1
 80039d4:	409a      	lsls	r2, r3
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039de:	f043 0202 	orr.w	r2, r3, #2
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ea:	2204      	movs	r2, #4
 80039ec:	409a      	lsls	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d012      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00b      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a08:	2204      	movs	r2, #4
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a14:	f043 0204 	orr.w	r2, r3, #4
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a20:	2210      	movs	r2, #16
 8003a22:	409a      	lsls	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d043      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d03c      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3e:	2210      	movs	r2, #16
 8003a40:	409a      	lsls	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d018      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d108      	bne.n	8003a74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d024      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4798      	blx	r3
 8003a72:	e01f      	b.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01b      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	4798      	blx	r3
 8003a84:	e016      	b.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d107      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0208 	bic.w	r2, r2, #8
 8003aa2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab8:	2220      	movs	r2, #32
 8003aba:	409a      	lsls	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 808f 	beq.w	8003be4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8087 	beq.w	8003be4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ada:	2220      	movs	r2, #32
 8003adc:	409a      	lsls	r2, r3
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b05      	cmp	r3, #5
 8003aec:	d136      	bne.n	8003b5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0216 	bic.w	r2, r2, #22
 8003afc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695a      	ldr	r2, [r3, #20]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d103      	bne.n	8003b1e <HAL_DMA_IRQHandler+0x1da>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0208 	bic.w	r2, r2, #8
 8003b2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b32:	223f      	movs	r2, #63	@ 0x3f
 8003b34:	409a      	lsls	r2, r3
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d07e      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
        }
        return;
 8003b5a:	e079      	b.n	8003c50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d01d      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10d      	bne.n	8003b94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d031      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
 8003b88:	e02c      	b.n	8003be4 <HAL_DMA_IRQHandler+0x2a0>
 8003b8a:	bf00      	nop
 8003b8c:	20000000 	.word	0x20000000
 8003b90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d023      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	4798      	blx	r3
 8003ba4:	e01e      	b.n	8003be4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10f      	bne.n	8003bd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0210 	bic.w	r2, r2, #16
 8003bc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d032      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d022      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2205      	movs	r2, #5
 8003bfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0201 	bic.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	3301      	adds	r3, #1
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d307      	bcc.n	8003c2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f2      	bne.n	8003c10 <HAL_DMA_IRQHandler+0x2cc>
 8003c2a:	e000      	b.n	8003c2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d005      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	4798      	blx	r3
 8003c4e:	e000      	b.n	8003c52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c50:	bf00      	nop
    }
  }
}
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c66:	b2db      	uxtb	r3, r3
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ca8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b40      	cmp	r3, #64	@ 0x40
 8003cb8:	d108      	bne.n	8003ccc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cca:	e007      	b.n	8003cdc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	60da      	str	r2, [r3, #12]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	3b10      	subs	r3, #16
 8003cf8:	4a14      	ldr	r2, [pc, #80]	@ (8003d4c <DMA_CalcBaseAndBitshift+0x64>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	091b      	lsrs	r3, r3, #4
 8003d00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d02:	4a13      	ldr	r2, [pc, #76]	@ (8003d50 <DMA_CalcBaseAndBitshift+0x68>)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d909      	bls.n	8003d2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d1e:	f023 0303 	bic.w	r3, r3, #3
 8003d22:	1d1a      	adds	r2, r3, #4
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d28:	e007      	b.n	8003d3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d32:	f023 0303 	bic.w	r3, r3, #3
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	aaaaaaab 	.word	0xaaaaaaab
 8003d50:	0800df34 	.word	0x0800df34

08003d54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d11f      	bne.n	8003dae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d856      	bhi.n	8003e22 <DMA_CheckFifoParam+0xce>
 8003d74:	a201      	add	r2, pc, #4	@ (adr r2, 8003d7c <DMA_CheckFifoParam+0x28>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003d8d 	.word	0x08003d8d
 8003d80:	08003d9f 	.word	0x08003d9f
 8003d84:	08003d8d 	.word	0x08003d8d
 8003d88:	08003e23 	.word	0x08003e23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d046      	beq.n	8003e26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d9c:	e043      	b.n	8003e26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003da6:	d140      	bne.n	8003e2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dac:	e03d      	b.n	8003e2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003db6:	d121      	bne.n	8003dfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d837      	bhi.n	8003e2e <DMA_CheckFifoParam+0xda>
 8003dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc4 <DMA_CheckFifoParam+0x70>)
 8003dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc4:	08003dd5 	.word	0x08003dd5
 8003dc8:	08003ddb 	.word	0x08003ddb
 8003dcc:	08003dd5 	.word	0x08003dd5
 8003dd0:	08003ded 	.word	0x08003ded
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd8:	e030      	b.n	8003e3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d025      	beq.n	8003e32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dea:	e022      	b.n	8003e32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003df4:	d11f      	bne.n	8003e36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dfa:	e01c      	b.n	8003e36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d903      	bls.n	8003e0a <DMA_CheckFifoParam+0xb6>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d003      	beq.n	8003e10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e08:	e018      	b.n	8003e3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e0e:	e015      	b.n	8003e3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00e      	beq.n	8003e3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e20:	e00b      	b.n	8003e3a <DMA_CheckFifoParam+0xe6>
      break;
 8003e22:	bf00      	nop
 8003e24:	e00a      	b.n	8003e3c <DMA_CheckFifoParam+0xe8>
      break;
 8003e26:	bf00      	nop
 8003e28:	e008      	b.n	8003e3c <DMA_CheckFifoParam+0xe8>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e006      	b.n	8003e3c <DMA_CheckFifoParam+0xe8>
      break;
 8003e2e:	bf00      	nop
 8003e30:	e004      	b.n	8003e3c <DMA_CheckFifoParam+0xe8>
      break;
 8003e32:	bf00      	nop
 8003e34:	e002      	b.n	8003e3c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e36:	bf00      	nop
 8003e38:	e000      	b.n	8003e3c <DMA_CheckFifoParam+0xe8>
      break;
 8003e3a:	bf00      	nop
    }
  } 
  
  return status; 
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop

08003e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b089      	sub	sp, #36	@ 0x24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	e165      	b.n	8004134 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e68:	2201      	movs	r2, #1
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	f040 8154 	bne.w	800412e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d005      	beq.n	8003e9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d130      	bne.n	8003f00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 0201 	and.w	r2, r3, #1
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d017      	beq.n	8003f3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	2203      	movs	r2, #3
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d123      	bne.n	8003f90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	08da      	lsrs	r2, r3, #3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3208      	adds	r2, #8
 8003f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	220f      	movs	r2, #15
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	08da      	lsrs	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3208      	adds	r2, #8
 8003f8a:	69b9      	ldr	r1, [r7, #24]
 8003f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0203 	and.w	r2, r3, #3
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80ae 	beq.w	800412e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800414c <HAL_GPIO_Init+0x300>)
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fda:	4a5c      	ldr	r2, [pc, #368]	@ (800414c <HAL_GPIO_Init+0x300>)
 8003fdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fe2:	4b5a      	ldr	r3, [pc, #360]	@ (800414c <HAL_GPIO_Init+0x300>)
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fee:	4a58      	ldr	r2, [pc, #352]	@ (8004150 <HAL_GPIO_Init+0x304>)
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	089b      	lsrs	r3, r3, #2
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	220f      	movs	r2, #15
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43db      	mvns	r3, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4013      	ands	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a4f      	ldr	r2, [pc, #316]	@ (8004154 <HAL_GPIO_Init+0x308>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d025      	beq.n	8004066 <HAL_GPIO_Init+0x21a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a4e      	ldr	r2, [pc, #312]	@ (8004158 <HAL_GPIO_Init+0x30c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d01f      	beq.n	8004062 <HAL_GPIO_Init+0x216>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a4d      	ldr	r2, [pc, #308]	@ (800415c <HAL_GPIO_Init+0x310>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d019      	beq.n	800405e <HAL_GPIO_Init+0x212>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a4c      	ldr	r2, [pc, #304]	@ (8004160 <HAL_GPIO_Init+0x314>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d013      	beq.n	800405a <HAL_GPIO_Init+0x20e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a4b      	ldr	r2, [pc, #300]	@ (8004164 <HAL_GPIO_Init+0x318>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00d      	beq.n	8004056 <HAL_GPIO_Init+0x20a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a4a      	ldr	r2, [pc, #296]	@ (8004168 <HAL_GPIO_Init+0x31c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d007      	beq.n	8004052 <HAL_GPIO_Init+0x206>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a49      	ldr	r2, [pc, #292]	@ (800416c <HAL_GPIO_Init+0x320>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d101      	bne.n	800404e <HAL_GPIO_Init+0x202>
 800404a:	2306      	movs	r3, #6
 800404c:	e00c      	b.n	8004068 <HAL_GPIO_Init+0x21c>
 800404e:	2307      	movs	r3, #7
 8004050:	e00a      	b.n	8004068 <HAL_GPIO_Init+0x21c>
 8004052:	2305      	movs	r3, #5
 8004054:	e008      	b.n	8004068 <HAL_GPIO_Init+0x21c>
 8004056:	2304      	movs	r3, #4
 8004058:	e006      	b.n	8004068 <HAL_GPIO_Init+0x21c>
 800405a:	2303      	movs	r3, #3
 800405c:	e004      	b.n	8004068 <HAL_GPIO_Init+0x21c>
 800405e:	2302      	movs	r3, #2
 8004060:	e002      	b.n	8004068 <HAL_GPIO_Init+0x21c>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_GPIO_Init+0x21c>
 8004066:	2300      	movs	r3, #0
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	f002 0203 	and.w	r2, r2, #3
 800406e:	0092      	lsls	r2, r2, #2
 8004070:	4093      	lsls	r3, r2
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004078:	4935      	ldr	r1, [pc, #212]	@ (8004150 <HAL_GPIO_Init+0x304>)
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	089b      	lsrs	r3, r3, #2
 800407e:	3302      	adds	r3, #2
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004086:	4b3a      	ldr	r3, [pc, #232]	@ (8004170 <HAL_GPIO_Init+0x324>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	43db      	mvns	r3, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4013      	ands	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040aa:	4a31      	ldr	r2, [pc, #196]	@ (8004170 <HAL_GPIO_Init+0x324>)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004170 <HAL_GPIO_Init+0x324>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	43db      	mvns	r3, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4013      	ands	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040d4:	4a26      	ldr	r2, [pc, #152]	@ (8004170 <HAL_GPIO_Init+0x324>)
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040da:	4b25      	ldr	r3, [pc, #148]	@ (8004170 <HAL_GPIO_Init+0x324>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	43db      	mvns	r3, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4013      	ands	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004170 <HAL_GPIO_Init+0x324>)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004104:	4b1a      	ldr	r3, [pc, #104]	@ (8004170 <HAL_GPIO_Init+0x324>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004128:	4a11      	ldr	r2, [pc, #68]	@ (8004170 <HAL_GPIO_Init+0x324>)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	3301      	adds	r3, #1
 8004132:	61fb      	str	r3, [r7, #28]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	2b0f      	cmp	r3, #15
 8004138:	f67f ae96 	bls.w	8003e68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	3724      	adds	r7, #36	@ 0x24
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800
 8004150:	40013800 	.word	0x40013800
 8004154:	40020000 	.word	0x40020000
 8004158:	40020400 	.word	0x40020400
 800415c:	40020800 	.word	0x40020800
 8004160:	40020c00 	.word	0x40020c00
 8004164:	40021000 	.word	0x40021000
 8004168:	40021400 	.word	0x40021400
 800416c:	40021800 	.word	0x40021800
 8004170:	40013c00 	.word	0x40013c00

08004174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	807b      	strh	r3, [r7, #2]
 8004180:	4613      	mov	r3, r2
 8004182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004184:	787b      	ldrb	r3, [r7, #1]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800418a:	887a      	ldrh	r2, [r7, #2]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004190:	e003      	b.n	800419a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004192:	887b      	ldrh	r3, [r7, #2]
 8004194:	041a      	lsls	r2, r3, #16
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	619a      	str	r2, [r3, #24]
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e12b      	b.n	8004412 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fd fb64 	bl	800189c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2224      	movs	r2, #36	@ 0x24
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800420a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800420c:	f002 fe4a 	bl	8006ea4 <HAL_RCC_GetPCLK1Freq>
 8004210:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4a81      	ldr	r2, [pc, #516]	@ (800441c <HAL_I2C_Init+0x274>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d807      	bhi.n	800422c <HAL_I2C_Init+0x84>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4a80      	ldr	r2, [pc, #512]	@ (8004420 <HAL_I2C_Init+0x278>)
 8004220:	4293      	cmp	r3, r2
 8004222:	bf94      	ite	ls
 8004224:	2301      	movls	r3, #1
 8004226:	2300      	movhi	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	e006      	b.n	800423a <HAL_I2C_Init+0x92>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4a7d      	ldr	r2, [pc, #500]	@ (8004424 <HAL_I2C_Init+0x27c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	bf94      	ite	ls
 8004234:	2301      	movls	r3, #1
 8004236:	2300      	movhi	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e0e7      	b.n	8004412 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4a78      	ldr	r2, [pc, #480]	@ (8004428 <HAL_I2C_Init+0x280>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	0c9b      	lsrs	r3, r3, #18
 800424c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	430a      	orrs	r2, r1
 8004260:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4a6a      	ldr	r2, [pc, #424]	@ (800441c <HAL_I2C_Init+0x274>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d802      	bhi.n	800427c <HAL_I2C_Init+0xd4>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	3301      	adds	r3, #1
 800427a:	e009      	b.n	8004290 <HAL_I2C_Init+0xe8>
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004282:	fb02 f303 	mul.w	r3, r2, r3
 8004286:	4a69      	ldr	r2, [pc, #420]	@ (800442c <HAL_I2C_Init+0x284>)
 8004288:	fba2 2303 	umull	r2, r3, r2, r3
 800428c:	099b      	lsrs	r3, r3, #6
 800428e:	3301      	adds	r3, #1
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	430b      	orrs	r3, r1
 8004296:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80042a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	495c      	ldr	r1, [pc, #368]	@ (800441c <HAL_I2C_Init+0x274>)
 80042ac:	428b      	cmp	r3, r1
 80042ae:	d819      	bhi.n	80042e4 <HAL_I2C_Init+0x13c>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	1e59      	subs	r1, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80042be:	1c59      	adds	r1, r3, #1
 80042c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80042c4:	400b      	ands	r3, r1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <HAL_I2C_Init+0x138>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1e59      	subs	r1, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80042d8:	3301      	adds	r3, #1
 80042da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042de:	e051      	b.n	8004384 <HAL_I2C_Init+0x1dc>
 80042e0:	2304      	movs	r3, #4
 80042e2:	e04f      	b.n	8004384 <HAL_I2C_Init+0x1dc>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d111      	bne.n	8004310 <HAL_I2C_Init+0x168>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1e58      	subs	r0, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6859      	ldr	r1, [r3, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	440b      	add	r3, r1
 80042fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80042fe:	3301      	adds	r3, #1
 8004300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf0c      	ite	eq
 8004308:	2301      	moveq	r3, #1
 800430a:	2300      	movne	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	e012      	b.n	8004336 <HAL_I2C_Init+0x18e>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1e58      	subs	r0, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6859      	ldr	r1, [r3, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	0099      	lsls	r1, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	fbb0 f3f3 	udiv	r3, r0, r3
 8004326:	3301      	adds	r3, #1
 8004328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800432c:	2b00      	cmp	r3, #0
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_I2C_Init+0x196>
 800433a:	2301      	movs	r3, #1
 800433c:	e022      	b.n	8004384 <HAL_I2C_Init+0x1dc>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10e      	bne.n	8004364 <HAL_I2C_Init+0x1bc>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	1e58      	subs	r0, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6859      	ldr	r1, [r3, #4]
 800434e:	460b      	mov	r3, r1
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	440b      	add	r3, r1
 8004354:	fbb0 f3f3 	udiv	r3, r0, r3
 8004358:	3301      	adds	r3, #1
 800435a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800435e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004362:	e00f      	b.n	8004384 <HAL_I2C_Init+0x1dc>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	1e58      	subs	r0, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6859      	ldr	r1, [r3, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	0099      	lsls	r1, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	fbb0 f3f3 	udiv	r3, r0, r3
 800437a:	3301      	adds	r3, #1
 800437c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004380:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	6809      	ldr	r1, [r1, #0]
 8004388:	4313      	orrs	r3, r2
 800438a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69da      	ldr	r2, [r3, #28]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80043b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6911      	ldr	r1, [r2, #16]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	68d2      	ldr	r2, [r2, #12]
 80043be:	4311      	orrs	r1, r2
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	430b      	orrs	r3, r1
 80043c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695a      	ldr	r2, [r3, #20]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	000186a0 	.word	0x000186a0
 8004420:	001e847f 	.word	0x001e847f
 8004424:	003d08ff 	.word	0x003d08ff
 8004428:	431bde83 	.word	0x431bde83
 800442c:	10624dd3 	.word	0x10624dd3

08004430 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08a      	sub	sp, #40	@ 0x28
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	4608      	mov	r0, r1
 800443a:	4611      	mov	r1, r2
 800443c:	461a      	mov	r2, r3
 800443e:	4603      	mov	r3, r0
 8004440:	817b      	strh	r3, [r7, #10]
 8004442:	460b      	mov	r3, r1
 8004444:	813b      	strh	r3, [r7, #8]
 8004446:	4613      	mov	r3, r2
 8004448:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800444e:	f7fd ff01 	bl	8002254 <HAL_GetTick>
 8004452:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b20      	cmp	r3, #32
 800445e:	f040 8145 	bne.w	80046ec <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004462:	4b9d      	ldr	r3, [pc, #628]	@ (80046d8 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	08db      	lsrs	r3, r3, #3
 8004468:	4a9c      	ldr	r2, [pc, #624]	@ (80046dc <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	0a1a      	lsrs	r2, r3, #8
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	009a      	lsls	r2, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	3b01      	subs	r3, #1
 8004480:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d116      	bne.n	80044b6 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a2:	f043 0220 	orr.w	r2, r3, #32
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e11b      	b.n	80046ee <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d0db      	beq.n	800447c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d101      	bne.n	80044d2 <HAL_I2C_Mem_Write_DMA+0xa2>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e10d      	b.n	80046ee <HAL_I2C_Mem_Write_DMA+0x2be>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d007      	beq.n	80044f8 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004506:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2221      	movs	r2, #33	@ 0x21
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2240      	movs	r2, #64	@ 0x40
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004522:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004528:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4a6a      	ldr	r2, [pc, #424]	@ (80046e0 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8004538:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800453a:	897a      	ldrh	r2, [r7, #10]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004540:	893a      	ldrh	r2, [r7, #8]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004546:	88fa      	ldrh	r2, [r7, #6]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 80a9 	beq.w	80046ae <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004560:	2b00      	cmp	r3, #0
 8004562:	d02a      	beq.n	80045ba <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004568:	4a5e      	ldr	r2, [pc, #376]	@ (80046e4 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800456a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004570:	4a5d      	ldr	r2, [pc, #372]	@ (80046e8 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8004572:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004578:	2200      	movs	r2, #0
 800457a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004580:	2200      	movs	r2, #0
 8004582:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004588:	2200      	movs	r2, #0
 800458a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004590:	2200      	movs	r2, #0
 8004592:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	4619      	mov	r1, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3310      	adds	r3, #16
 80045a4:	461a      	mov	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045aa:	f7ff f8e1 	bl	8003770 <HAL_DMA_Start_IT>
 80045ae:	4603      	mov	r3, r0
 80045b0:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80045b2:	7efb      	ldrb	r3, [r7, #27]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d166      	bne.n	8004686 <HAL_I2C_Mem_Write_DMA+0x256>
 80045b8:	e013      	b.n	80045e2 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e085      	b.n	80046ee <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80045e2:	88f8      	ldrh	r0, [r7, #6]
 80045e4:	893a      	ldrh	r2, [r7, #8]
 80045e6:	8979      	ldrh	r1, [r7, #10]
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	9301      	str	r3, [sp, #4]
 80045ec:	2323      	movs	r3, #35	@ 0x23
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	4603      	mov	r3, r0
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f001 fdd2 	bl	800619c <I2C_RequestMemoryWrite>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d022      	beq.n	8004644 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff f97c 	bl	8003900 <HAL_DMA_Abort_IT>
 8004608:	4603      	mov	r3, r0
 800460a:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004610:	2200      	movs	r2, #0
 8004612:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004622:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0201 	bic.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e054      	b.n	80046ee <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004644:	2300      	movs	r3, #0
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004670:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004680:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	e033      	b.n	80046ee <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469a:	f043 0210 	orr.w	r2, r3, #16
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e01f      	b.n	80046ee <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e00b      	b.n	80046ee <HAL_I2C_Mem_Write_DMA+0x2be>
 80046d6:	bf00      	nop
 80046d8:	20000000 	.word	0x20000000
 80046dc:	14f8b589 	.word	0x14f8b589
 80046e0:	ffff0000 	.word	0xffff0000
 80046e4:	08006499 	.word	0x08006499
 80046e8:	08006643 	.word	0x08006643
    }
  }
  else
  {
    return HAL_BUSY;
 80046ec:	2302      	movs	r3, #2
  }
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop

080046f8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08c      	sub	sp, #48	@ 0x30
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	4608      	mov	r0, r1
 8004702:	4611      	mov	r1, r2
 8004704:	461a      	mov	r2, r3
 8004706:	4603      	mov	r3, r0
 8004708:	817b      	strh	r3, [r7, #10]
 800470a:	460b      	mov	r3, r1
 800470c:	813b      	strh	r3, [r7, #8]
 800470e:	4613      	mov	r3, r2
 8004710:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004712:	f7fd fd9f 	bl	8002254 <HAL_GetTick>
 8004716:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b20      	cmp	r3, #32
 8004726:	f040 8176 	bne.w	8004a16 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800472a:	4b95      	ldr	r3, [pc, #596]	@ (8004980 <HAL_I2C_Mem_Read_DMA+0x288>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	08db      	lsrs	r3, r3, #3
 8004730:	4a94      	ldr	r2, [pc, #592]	@ (8004984 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	0a1a      	lsrs	r2, r3, #8
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	009a      	lsls	r2, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	3b01      	subs	r3, #1
 8004748:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d116      	bne.n	800477e <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476a:	f043 0220 	orr.w	r2, r3, #32
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e14c      	b.n	8004a18 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b02      	cmp	r3, #2
 800478a:	d0db      	beq.n	8004744 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_I2C_Mem_Read_DMA+0xa2>
 8004796:	2302      	movs	r3, #2
 8004798:	e13e      	b.n	8004a18 <HAL_I2C_Mem_Read_DMA+0x320>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d007      	beq.n	80047c0 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2222      	movs	r2, #34	@ 0x22
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2240      	movs	r2, #64	@ 0x40
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80047f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a62      	ldr	r2, [pc, #392]	@ (8004988 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004800:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004802:	897a      	ldrh	r2, [r7, #10]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004808:	893a      	ldrh	r2, [r7, #8]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800480e:	88fa      	ldrh	r2, [r7, #6]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 80cc 	beq.w	80049bc <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004828:	2b00      	cmp	r3, #0
 800482a:	d02d      	beq.n	8004888 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004830:	4a56      	ldr	r2, [pc, #344]	@ (800498c <HAL_I2C_Mem_Read_DMA+0x294>)
 8004832:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004838:	4a55      	ldr	r2, [pc, #340]	@ (8004990 <HAL_I2C_Mem_Read_DMA+0x298>)
 800483a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004840:	2200      	movs	r2, #0
 8004842:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004848:	2200      	movs	r2, #0
 800484a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004850:	2200      	movs	r2, #0
 8004852:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004858:	2200      	movs	r2, #0
 800485a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3310      	adds	r3, #16
 8004866:	4619      	mov	r1, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486c:	461a      	mov	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004872:	f7fe ff7d 	bl	8003770 <HAL_DMA_Start_IT>
 8004876:	4603      	mov	r3, r0
 8004878:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800487c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004880:	2b00      	cmp	r3, #0
 8004882:	f040 8087 	bne.w	8004994 <HAL_I2C_Mem_Read_DMA+0x29c>
 8004886:	e013      	b.n	80048b0 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0b3      	b.n	8004a18 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80048b0:	88f8      	ldrh	r0, [r7, #6]
 80048b2:	893a      	ldrh	r2, [r7, #8]
 80048b4:	8979      	ldrh	r1, [r7, #10]
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	9301      	str	r3, [sp, #4]
 80048ba:	2323      	movs	r3, #35	@ 0x23
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	4603      	mov	r3, r0
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f001 fd01 	bl	80062c8 <I2C_RequestMemoryRead>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d023      	beq.n	8004914 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff f815 	bl	8003900 <HAL_DMA_Abort_IT>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e0:	2200      	movs	r2, #0
 80048e2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e081      	b.n	8004a18 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004918:	2b01      	cmp	r3, #1
 800491a:	d108      	bne.n	800492e <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	e007      	b.n	800493e <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800493c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800493e:	2300      	movs	r3, #0
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	61bb      	str	r3, [r7, #24]
 8004952:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800496a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800497a:	605a      	str	r2, [r3, #4]
 800497c:	e049      	b.n	8004a12 <HAL_I2C_Mem_Read_DMA+0x31a>
 800497e:	bf00      	nop
 8004980:	20000000 	.word	0x20000000
 8004984:	14f8b589 	.word	0x14f8b589
 8004988:	ffff0000 	.word	0xffff0000
 800498c:	08006499 	.word	0x08006499
 8004990:	08006643 	.word	0x08006643
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a8:	f043 0210 	orr.w	r2, r3, #16
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e02d      	b.n	8004a18 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80049bc:	88f8      	ldrh	r0, [r7, #6]
 80049be:	893a      	ldrh	r2, [r7, #8]
 80049c0:	8979      	ldrh	r1, [r7, #10]
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	9301      	str	r3, [sp, #4]
 80049c6:	2323      	movs	r3, #35	@ 0x23
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	4603      	mov	r3, r0
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f001 fc7b 	bl	80062c8 <I2C_RequestMemoryRead>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e01d      	b.n	8004a18 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a00:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	e000      	b.n	8004a18 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8004a16:	2302      	movs	r3, #2
  }
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3728      	adds	r7, #40	@ 0x28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a40:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a48:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	2b10      	cmp	r3, #16
 8004a4e:	d003      	beq.n	8004a58 <HAL_I2C_EV_IRQHandler+0x38>
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	2b40      	cmp	r3, #64	@ 0x40
 8004a54:	f040 80c1 	bne.w	8004bda <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10d      	bne.n	8004a8e <HAL_I2C_EV_IRQHandler+0x6e>
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004a78:	d003      	beq.n	8004a82 <HAL_I2C_EV_IRQHandler+0x62>
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004a80:	d101      	bne.n	8004a86 <HAL_I2C_EV_IRQHandler+0x66>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <HAL_I2C_EV_IRQHandler+0x68>
 8004a86:	2300      	movs	r3, #0
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	f000 8132 	beq.w	8004cf2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00c      	beq.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x92>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	0a5b      	lsrs	r3, r3, #9
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d006      	beq.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f002 f82a 	bl	8006afe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fd5b 	bl	8005566 <I2C_Master_SB>
 8004ab0:	e092      	b.n	8004bd8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	08db      	lsrs	r3, r3, #3
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d009      	beq.n	8004ad2 <HAL_I2C_EV_IRQHandler+0xb2>
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	0a5b      	lsrs	r3, r3, #9
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fdd1 	bl	8005672 <I2C_Master_ADD10>
 8004ad0:	e082      	b.n	8004bd8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	085b      	lsrs	r3, r3, #1
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <HAL_I2C_EV_IRQHandler+0xd2>
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	0a5b      	lsrs	r3, r3, #9
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fdeb 	bl	80056c6 <I2C_Master_ADDR>
 8004af0:	e072      	b.n	8004bd8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	089b      	lsrs	r3, r3, #2
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d03b      	beq.n	8004b76 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b0c:	f000 80f3 	beq.w	8004cf6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	09db      	lsrs	r3, r3, #7
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00f      	beq.n	8004b3c <HAL_I2C_EV_IRQHandler+0x11c>
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	0a9b      	lsrs	r3, r3, #10
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d009      	beq.n	8004b3c <HAL_I2C_EV_IRQHandler+0x11c>
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	089b      	lsrs	r3, r3, #2
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d103      	bne.n	8004b3c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f9d5 	bl	8004ee4 <I2C_MasterTransmit_TXE>
 8004b3a:	e04d      	b.n	8004bd8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	089b      	lsrs	r3, r3, #2
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 80d6 	beq.w	8004cf6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	0a5b      	lsrs	r3, r3, #9
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 80cf 	beq.w	8004cf6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b58:	7bbb      	ldrb	r3, [r7, #14]
 8004b5a:	2b21      	cmp	r3, #33	@ 0x21
 8004b5c:	d103      	bne.n	8004b66 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa5c 	bl	800501c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b64:	e0c7      	b.n	8004cf6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	2b40      	cmp	r3, #64	@ 0x40
 8004b6a:	f040 80c4 	bne.w	8004cf6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 faca 	bl	8005108 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b74:	e0bf      	b.n	8004cf6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b84:	f000 80b7 	beq.w	8004cf6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	099b      	lsrs	r3, r3, #6
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00f      	beq.n	8004bb4 <HAL_I2C_EV_IRQHandler+0x194>
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	0a9b      	lsrs	r3, r3, #10
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d009      	beq.n	8004bb4 <HAL_I2C_EV_IRQHandler+0x194>
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	089b      	lsrs	r3, r3, #2
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d103      	bne.n	8004bb4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fb3f 	bl	8005230 <I2C_MasterReceive_RXNE>
 8004bb2:	e011      	b.n	8004bd8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	089b      	lsrs	r3, r3, #2
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 809a 	beq.w	8004cf6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	0a5b      	lsrs	r3, r3, #9
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 8093 	beq.w	8004cf6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fbde 	bl	8005392 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bd6:	e08e      	b.n	8004cf6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004bd8:	e08d      	b.n	8004cf6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d004      	beq.n	8004bec <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	61fb      	str	r3, [r7, #28]
 8004bea:	e007      	b.n	8004bfc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	085b      	lsrs	r3, r3, #1
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d012      	beq.n	8004c2e <HAL_I2C_EV_IRQHandler+0x20e>
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	0a5b      	lsrs	r3, r3, #9
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00c      	beq.n	8004c2e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004c24:	69b9      	ldr	r1, [r7, #24]
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 ff9c 	bl	8005b64 <I2C_Slave_ADDR>
 8004c2c:	e066      	b.n	8004cfc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d009      	beq.n	8004c4e <HAL_I2C_EV_IRQHandler+0x22e>
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	0a5b      	lsrs	r3, r3, #9
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 ffd6 	bl	8005bf8 <I2C_Slave_STOPF>
 8004c4c:	e056      	b.n	8004cfc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c4e:	7bbb      	ldrb	r3, [r7, #14]
 8004c50:	2b21      	cmp	r3, #33	@ 0x21
 8004c52:	d002      	beq.n	8004c5a <HAL_I2C_EV_IRQHandler+0x23a>
 8004c54:	7bbb      	ldrb	r3, [r7, #14]
 8004c56:	2b29      	cmp	r3, #41	@ 0x29
 8004c58:	d125      	bne.n	8004ca6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	09db      	lsrs	r3, r3, #7
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00f      	beq.n	8004c86 <HAL_I2C_EV_IRQHandler+0x266>
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	0a9b      	lsrs	r3, r3, #10
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d009      	beq.n	8004c86 <HAL_I2C_EV_IRQHandler+0x266>
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	089b      	lsrs	r3, r3, #2
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 feb2 	bl	80059e8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c84:	e039      	b.n	8004cfa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	089b      	lsrs	r3, r3, #2
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d033      	beq.n	8004cfa <HAL_I2C_EV_IRQHandler+0x2da>
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	0a5b      	lsrs	r3, r3, #9
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d02d      	beq.n	8004cfa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fedf 	bl	8005a62 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ca4:	e029      	b.n	8004cfa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	099b      	lsrs	r3, r3, #6
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00f      	beq.n	8004cd2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	0a9b      	lsrs	r3, r3, #10
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	089b      	lsrs	r3, r3, #2
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d103      	bne.n	8004cd2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 feea 	bl	8005aa4 <I2C_SlaveReceive_RXNE>
 8004cd0:	e014      	b.n	8004cfc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	089b      	lsrs	r3, r3, #2
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00e      	beq.n	8004cfc <HAL_I2C_EV_IRQHandler+0x2dc>
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	0a5b      	lsrs	r3, r3, #9
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 ff18 	bl	8005b20 <I2C_SlaveReceive_BTF>
 8004cf0:	e004      	b.n	8004cfc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004cf2:	bf00      	nop
 8004cf4:	e002      	b.n	8004cfc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cf6:	bf00      	nop
 8004cf8:	e000      	b.n	8004cfc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cfa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004cfc:	3720      	adds	r7, #32
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b08a      	sub	sp, #40	@ 0x28
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d24:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	0a1b      	lsrs	r3, r3, #8
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00e      	beq.n	8004d50 <HAL_I2C_ER_IRQHandler+0x4e>
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	0a1b      	lsrs	r3, r3, #8
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d008      	beq.n	8004d50 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d40:	f043 0301 	orr.w	r3, r3, #1
 8004d44:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d4e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	0a5b      	lsrs	r3, r3, #9
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00e      	beq.n	8004d7a <HAL_I2C_ER_IRQHandler+0x78>
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	0a1b      	lsrs	r3, r3, #8
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d008      	beq.n	8004d7a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6a:	f043 0302 	orr.w	r3, r3, #2
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004d78:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	0a9b      	lsrs	r3, r3, #10
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d03f      	beq.n	8004e06 <HAL_I2C_ER_IRQHandler+0x104>
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	0a1b      	lsrs	r3, r3, #8
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d039      	beq.n	8004e06 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004d92:	7efb      	ldrb	r3, [r7, #27]
 8004d94:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004daa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004dac:	7ebb      	ldrb	r3, [r7, #26]
 8004dae:	2b20      	cmp	r3, #32
 8004db0:	d112      	bne.n	8004dd8 <HAL_I2C_ER_IRQHandler+0xd6>
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10f      	bne.n	8004dd8 <HAL_I2C_ER_IRQHandler+0xd6>
 8004db8:	7cfb      	ldrb	r3, [r7, #19]
 8004dba:	2b21      	cmp	r3, #33	@ 0x21
 8004dbc:	d008      	beq.n	8004dd0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004dbe:	7cfb      	ldrb	r3, [r7, #19]
 8004dc0:	2b29      	cmp	r3, #41	@ 0x29
 8004dc2:	d005      	beq.n	8004dd0 <HAL_I2C_ER_IRQHandler+0xce>
 8004dc4:	7cfb      	ldrb	r3, [r7, #19]
 8004dc6:	2b28      	cmp	r3, #40	@ 0x28
 8004dc8:	d106      	bne.n	8004dd8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b21      	cmp	r3, #33	@ 0x21
 8004dce:	d103      	bne.n	8004dd8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f001 f841 	bl	8005e58 <I2C_Slave_AF>
 8004dd6:	e016      	b.n	8004e06 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004de0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	f043 0304 	orr.w	r3, r3, #4
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004dea:	7efb      	ldrb	r3, [r7, #27]
 8004dec:	2b10      	cmp	r3, #16
 8004dee:	d002      	beq.n	8004df6 <HAL_I2C_ER_IRQHandler+0xf4>
 8004df0:	7efb      	ldrb	r3, [r7, #27]
 8004df2:	2b40      	cmp	r3, #64	@ 0x40
 8004df4:	d107      	bne.n	8004e06 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e04:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	0adb      	lsrs	r3, r3, #11
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00e      	beq.n	8004e30 <HAL_I2C_ER_IRQHandler+0x12e>
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	0a1b      	lsrs	r3, r3, #8
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d008      	beq.n	8004e30 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e20:	f043 0308 	orr.w	r3, r3, #8
 8004e24:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004e2e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d008      	beq.n	8004e48 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f001 f878 	bl	8005f38 <I2C_ITError>
  }
}
 8004e48:	bf00      	nop
 8004e4a:	3728      	adds	r7, #40	@ 0x28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	70fb      	strb	r3, [r7, #3]
 8004eac:	4613      	mov	r3, r2
 8004eae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004efa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f00:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d150      	bne.n	8004fac <I2C_MasterTransmit_TXE+0xc8>
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	2b21      	cmp	r3, #33	@ 0x21
 8004f0e:	d14d      	bne.n	8004fac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d01d      	beq.n	8004f52 <I2C_MasterTransmit_TXE+0x6e>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	d01a      	beq.n	8004f52 <I2C_MasterTransmit_TXE+0x6e>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f22:	d016      	beq.n	8004f52 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f32:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2211      	movs	r2, #17
 8004f38:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff ff80 	bl	8004e50 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f50:	e060      	b.n	8005014 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f60:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f70:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b40      	cmp	r3, #64	@ 0x40
 8004f8a:	d107      	bne.n	8004f9c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7fc fb89 	bl	80016ac <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f9a:	e03b      	b.n	8005014 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff ff53 	bl	8004e50 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004faa:	e033      	b.n	8005014 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	2b21      	cmp	r3, #33	@ 0x21
 8004fb0:	d005      	beq.n	8004fbe <I2C_MasterTransmit_TXE+0xda>
 8004fb2:	7bbb      	ldrb	r3, [r7, #14]
 8004fb4:	2b40      	cmp	r3, #64	@ 0x40
 8004fb6:	d12d      	bne.n	8005014 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	2b22      	cmp	r3, #34	@ 0x22
 8004fbc:	d12a      	bne.n	8005014 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d108      	bne.n	8004fda <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fd6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004fd8:	e01c      	b.n	8005014 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b40      	cmp	r3, #64	@ 0x40
 8004fe4:	d103      	bne.n	8004fee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f88e 	bl	8005108 <I2C_MemoryTransmit_TXE_BTF>
}
 8004fec:	e012      	b.n	8005014 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	781a      	ldrb	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005012:	e7ff      	b.n	8005014 <I2C_MasterTransmit_TXE+0x130>
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005028:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b21      	cmp	r3, #33	@ 0x21
 8005034:	d164      	bne.n	8005100 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800503a:	b29b      	uxth	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	d012      	beq.n	8005066 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	781a      	ldrb	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005064:	e04c      	b.n	8005100 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b08      	cmp	r3, #8
 800506a:	d01d      	beq.n	80050a8 <I2C_MasterTransmit_BTF+0x8c>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b20      	cmp	r3, #32
 8005070:	d01a      	beq.n	80050a8 <I2C_MasterTransmit_BTF+0x8c>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005078:	d016      	beq.n	80050a8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005088:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2211      	movs	r2, #17
 800508e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff fed5 	bl	8004e50 <HAL_I2C_MasterTxCpltCallback>
}
 80050a6:	e02b      	b.n	8005100 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050b6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050c6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b40      	cmp	r3, #64	@ 0x40
 80050e0:	d107      	bne.n	80050f2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7fc fade 	bl	80016ac <HAL_I2C_MemTxCpltCallback>
}
 80050f0:	e006      	b.n	8005100 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7ff fea8 	bl	8004e50 <HAL_I2C_MasterTxCpltCallback>
}
 8005100:	bf00      	nop
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005116:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800511c:	2b00      	cmp	r3, #0
 800511e:	d11d      	bne.n	800515c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d10b      	bne.n	8005140 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800512c:	b2da      	uxtb	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005138:	1c9a      	adds	r2, r3, #2
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800513e:	e073      	b.n	8005228 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005144:	b29b      	uxth	r3, r3
 8005146:	121b      	asrs	r3, r3, #8
 8005148:	b2da      	uxtb	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800515a:	e065      	b.n	8005228 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005160:	2b01      	cmp	r3, #1
 8005162:	d10b      	bne.n	800517c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005168:	b2da      	uxtb	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800517a:	e055      	b.n	8005228 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005180:	2b02      	cmp	r3, #2
 8005182:	d151      	bne.n	8005228 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005184:	7bfb      	ldrb	r3, [r7, #15]
 8005186:	2b22      	cmp	r3, #34	@ 0x22
 8005188:	d10d      	bne.n	80051a6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005198:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80051a4:	e040      	b.n	8005228 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d015      	beq.n	80051dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
 80051b2:	2b21      	cmp	r3, #33	@ 0x21
 80051b4:	d112      	bne.n	80051dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ba:	781a      	ldrb	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80051da:	e025      	b.n	8005228 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d120      	bne.n	8005228 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	2b21      	cmp	r3, #33	@ 0x21
 80051ea:	d11d      	bne.n	8005228 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80051fa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800520a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fc fa42 	bl	80016ac <HAL_I2C_MemTxCpltCallback>
}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b22      	cmp	r3, #34	@ 0x22
 8005242:	f040 80a2 	bne.w	800538a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b03      	cmp	r3, #3
 8005252:	d921      	bls.n	8005298 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005270:	b29b      	uxth	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800527e:	b29b      	uxth	r3, r3
 8005280:	2b03      	cmp	r3, #3
 8005282:	f040 8082 	bne.w	800538a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005294:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005296:	e078      	b.n	800538a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529c:	2b02      	cmp	r3, #2
 800529e:	d074      	beq.n	800538a <I2C_MasterReceive_RXNE+0x15a>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d002      	beq.n	80052ac <I2C_MasterReceive_RXNE+0x7c>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d16e      	bne.n	800538a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f001 fbc5 	bl	8006a3c <I2C_WaitOnSTOPRequestThroughIT>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d142      	bne.n	800533e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052c6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80052d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691a      	ldr	r2, [r3, #16]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b40      	cmp	r3, #64	@ 0x40
 8005310:	d10a      	bne.n	8005328 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7fc f9d3 	bl	80016cc <HAL_I2C_MemRxCpltCallback>
}
 8005326:	e030      	b.n	800538a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2212      	movs	r2, #18
 8005334:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff fd94 	bl	8004e64 <HAL_I2C_MasterRxCpltCallback>
}
 800533c:	e025      	b.n	800538a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800534c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7fc f9b1 	bl	80016ec <HAL_I2C_ErrorCallback>
}
 800538a:	bf00      	nop
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d11b      	bne.n	80053e2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053b8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80053e0:	e0bd      	b.n	800555e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	d129      	bne.n	8005440 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053fa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d00a      	beq.n	8005418 <I2C_MasterReceive_BTF+0x86>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d007      	beq.n	8005418 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005416:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005434:	b29b      	uxth	r3, r3
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800543e:	e08e      	b.n	800555e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d176      	bne.n	8005538 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d002      	beq.n	8005456 <I2C_MasterReceive_BTF+0xc4>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b10      	cmp	r3, #16
 8005454:	d108      	bne.n	8005468 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	e019      	b.n	800549c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b04      	cmp	r3, #4
 800546c:	d002      	beq.n	8005474 <I2C_MasterReceive_BTF+0xe2>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d108      	bne.n	8005486 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	e00a      	b.n	800549c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b10      	cmp	r3, #16
 800548a:	d007      	beq.n	800549c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800549a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80054f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b40      	cmp	r3, #64	@ 0x40
 800550a:	d10a      	bne.n	8005522 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fc f8d6 	bl	80016cc <HAL_I2C_MemRxCpltCallback>
}
 8005520:	e01d      	b.n	800555e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2212      	movs	r2, #18
 800552e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff fc97 	bl	8004e64 <HAL_I2C_MasterRxCpltCallback>
}
 8005536:	e012      	b.n	800555e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691a      	ldr	r2, [r3, #16]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005554:	b29b      	uxth	r3, r3
 8005556:	3b01      	subs	r3, #1
 8005558:	b29a      	uxth	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800555e:	bf00      	nop
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b40      	cmp	r3, #64	@ 0x40
 8005578:	d117      	bne.n	80055aa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800557e:	2b00      	cmp	r3, #0
 8005580:	d109      	bne.n	8005596 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005586:	b2db      	uxtb	r3, r3
 8005588:	461a      	mov	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005592:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005594:	e067      	b.n	8005666 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800559a:	b2db      	uxtb	r3, r3
 800559c:	f043 0301 	orr.w	r3, r3, #1
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	611a      	str	r2, [r3, #16]
}
 80055a8:	e05d      	b.n	8005666 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055b2:	d133      	bne.n	800561c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b21      	cmp	r3, #33	@ 0x21
 80055be:	d109      	bne.n	80055d4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80055d0:	611a      	str	r2, [r3, #16]
 80055d2:	e008      	b.n	80055e6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	f043 0301 	orr.w	r3, r3, #1
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d004      	beq.n	80055f8 <I2C_Master_SB+0x92>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d108      	bne.n	800560a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d032      	beq.n	8005666 <I2C_Master_SB+0x100>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d02d      	beq.n	8005666 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005618:	605a      	str	r2, [r3, #4]
}
 800561a:	e024      	b.n	8005666 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10e      	bne.n	8005642 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005628:	b29b      	uxth	r3, r3
 800562a:	11db      	asrs	r3, r3, #7
 800562c:	b2db      	uxtb	r3, r3
 800562e:	f003 0306 	and.w	r3, r3, #6
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f063 030f 	orn	r3, r3, #15
 8005638:	b2da      	uxtb	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	611a      	str	r2, [r3, #16]
}
 8005640:	e011      	b.n	8005666 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005646:	2b01      	cmp	r3, #1
 8005648:	d10d      	bne.n	8005666 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564e:	b29b      	uxth	r3, r3
 8005650:	11db      	asrs	r3, r3, #7
 8005652:	b2db      	uxtb	r3, r3
 8005654:	f003 0306 	and.w	r3, r3, #6
 8005658:	b2db      	uxtb	r3, r3
 800565a:	f063 030e 	orn	r3, r3, #14
 800565e:	b2da      	uxtb	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	611a      	str	r2, [r3, #16]
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567e:	b2da      	uxtb	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800568a:	2b00      	cmp	r3, #0
 800568c:	d004      	beq.n	8005698 <I2C_Master_ADD10+0x26>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005694:	2b00      	cmp	r3, #0
 8005696:	d108      	bne.n	80056aa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00c      	beq.n	80056ba <I2C_Master_ADD10+0x48>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d007      	beq.n	80056ba <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056b8:	605a      	str	r2, [r3, #4]
  }
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b091      	sub	sp, #68	@ 0x44
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b22      	cmp	r3, #34	@ 0x22
 80056ee:	f040 8169 	bne.w	80059c4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10f      	bne.n	800571a <I2C_Master_ADDR+0x54>
 80056fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80056fe:	2b40      	cmp	r3, #64	@ 0x40
 8005700:	d10b      	bne.n	800571a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005702:	2300      	movs	r3, #0
 8005704:	633b      	str	r3, [r7, #48]	@ 0x30
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	633b      	str	r3, [r7, #48]	@ 0x30
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	633b      	str	r3, [r7, #48]	@ 0x30
 8005716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005718:	e160      	b.n	80059dc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800571e:	2b00      	cmp	r3, #0
 8005720:	d11d      	bne.n	800575e <I2C_Master_ADDR+0x98>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800572a:	d118      	bne.n	800575e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572c:	2300      	movs	r3, #0
 800572e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005750:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	651a      	str	r2, [r3, #80]	@ 0x50
 800575c:	e13e      	b.n	80059dc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d113      	bne.n	8005790 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005768:	2300      	movs	r3, #0
 800576a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800577c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	e115      	b.n	80059bc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b01      	cmp	r3, #1
 8005798:	f040 808a 	bne.w	80058b0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800579c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800579e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80057a2:	d137      	bne.n	8005814 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057b2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057c2:	d113      	bne.n	80057ec <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057d2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d4:	2300      	movs	r3, #0
 80057d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	627b      	str	r3, [r7, #36]	@ 0x24
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ea:	e0e7      	b.n	80059bc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ec:	2300      	movs	r3, #0
 80057ee:	623b      	str	r3, [r7, #32]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	623b      	str	r3, [r7, #32]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	623b      	str	r3, [r7, #32]
 8005800:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	e0d3      	b.n	80059bc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005816:	2b08      	cmp	r3, #8
 8005818:	d02e      	beq.n	8005878 <I2C_Master_ADDR+0x1b2>
 800581a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581c:	2b20      	cmp	r3, #32
 800581e:	d02b      	beq.n	8005878 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005822:	2b12      	cmp	r3, #18
 8005824:	d102      	bne.n	800582c <I2C_Master_ADDR+0x166>
 8005826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005828:	2b01      	cmp	r3, #1
 800582a:	d125      	bne.n	8005878 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800582c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582e:	2b04      	cmp	r3, #4
 8005830:	d00e      	beq.n	8005850 <I2C_Master_ADDR+0x18a>
 8005832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005834:	2b02      	cmp	r3, #2
 8005836:	d00b      	beq.n	8005850 <I2C_Master_ADDR+0x18a>
 8005838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583a:	2b10      	cmp	r3, #16
 800583c:	d008      	beq.n	8005850 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	e007      	b.n	8005860 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800585e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005860:	2300      	movs	r3, #0
 8005862:	61fb      	str	r3, [r7, #28]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	61fb      	str	r3, [r7, #28]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	61fb      	str	r3, [r7, #28]
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	e0a1      	b.n	80059bc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005886:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005888:	2300      	movs	r3, #0
 800588a:	61bb      	str	r3, [r7, #24]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	61bb      	str	r3, [r7, #24]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	61bb      	str	r3, [r7, #24]
 800589c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	e085      	b.n	80059bc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d14d      	bne.n	8005956 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d016      	beq.n	80058ee <I2C_Master_ADDR+0x228>
 80058c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d013      	beq.n	80058ee <I2C_Master_ADDR+0x228>
 80058c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d010      	beq.n	80058ee <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058da:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	e007      	b.n	80058fe <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80058fc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800590c:	d117      	bne.n	800593e <I2C_Master_ADDR+0x278>
 800590e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005910:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005914:	d00b      	beq.n	800592e <I2C_Master_ADDR+0x268>
 8005916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005918:	2b01      	cmp	r3, #1
 800591a:	d008      	beq.n	800592e <I2C_Master_ADDR+0x268>
 800591c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800591e:	2b08      	cmp	r3, #8
 8005920:	d005      	beq.n	800592e <I2C_Master_ADDR+0x268>
 8005922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005924:	2b10      	cmp	r3, #16
 8005926:	d002      	beq.n	800592e <I2C_Master_ADDR+0x268>
 8005928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592a:	2b20      	cmp	r3, #32
 800592c:	d107      	bne.n	800593e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800593c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800593e:	2300      	movs	r3, #0
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	617b      	str	r3, [r7, #20]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	617b      	str	r3, [r7, #20]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	e032      	b.n	80059bc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005964:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005974:	d117      	bne.n	80059a6 <I2C_Master_ADDR+0x2e0>
 8005976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005978:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800597c:	d00b      	beq.n	8005996 <I2C_Master_ADDR+0x2d0>
 800597e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005980:	2b01      	cmp	r3, #1
 8005982:	d008      	beq.n	8005996 <I2C_Master_ADDR+0x2d0>
 8005984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005986:	2b08      	cmp	r3, #8
 8005988:	d005      	beq.n	8005996 <I2C_Master_ADDR+0x2d0>
 800598a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598c:	2b10      	cmp	r3, #16
 800598e:	d002      	beq.n	8005996 <I2C_Master_ADDR+0x2d0>
 8005990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005992:	2b20      	cmp	r3, #32
 8005994:	d107      	bne.n	80059a6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80059a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059a6:	2300      	movs	r3, #0
 80059a8:	613b      	str	r3, [r7, #16]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	613b      	str	r3, [r7, #16]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80059c2:	e00b      	b.n	80059dc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059c4:	2300      	movs	r3, #0
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]
}
 80059da:	e7ff      	b.n	80059dc <I2C_Master_ADDR+0x316>
 80059dc:	bf00      	nop
 80059de:	3744      	adds	r7, #68	@ 0x44
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d02b      	beq.n	8005a5a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a06:	781a      	ldrb	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d114      	bne.n	8005a5a <I2C_SlaveTransmit_TXE+0x72>
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	2b29      	cmp	r3, #41	@ 0x29
 8005a34:	d111      	bne.n	8005a5a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a44:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2221      	movs	r2, #33	@ 0x21
 8005a4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2228      	movs	r2, #40	@ 0x28
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff fa0f 	bl	8004e78 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005a5a:	bf00      	nop
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d011      	beq.n	8005a98 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a78:	781a      	ldrb	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ab2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d02c      	beq.n	8005b18 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d114      	bne.n	8005b18 <I2C_SlaveReceive_RXNE+0x74>
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005af2:	d111      	bne.n	8005b18 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b02:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2222      	movs	r2, #34	@ 0x22
 8005b08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2228      	movs	r2, #40	@ 0x28
 8005b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff f9ba 	bl	8004e8c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b18:	bf00      	nop
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d012      	beq.n	8005b58 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	691a      	ldr	r2, [r3, #16]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3c:	b2d2      	uxtb	r2, r2
 8005b3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	3b01      	subs	r3, #1
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005b7e:	2b28      	cmp	r3, #40	@ 0x28
 8005b80:	d127      	bne.n	8005bd2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b90:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	089b      	lsrs	r3, r3, #2
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	09db      	lsrs	r3, r3, #7
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d103      	bne.n	8005bb6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	81bb      	strh	r3, [r7, #12]
 8005bb4:	e002      	b.n	8005bbc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005bc4:	89ba      	ldrh	r2, [r7, #12]
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff f968 	bl	8004ea0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005bd0:	e00e      	b.n	8005bf0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60bb      	str	r3, [r7, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	60bb      	str	r3, [r7, #8]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	60bb      	str	r3, [r7, #8]
 8005be6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005bf0:	bf00      	nop
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c06:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005c16:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60bb      	str	r3, [r7, #8]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	60bb      	str	r3, [r7, #8]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c44:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c54:	d172      	bne.n	8005d3c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
 8005c58:	2b22      	cmp	r3, #34	@ 0x22
 8005c5a:	d002      	beq.n	8005c62 <I2C_Slave_STOPF+0x6a>
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c60:	d135      	bne.n	8005cce <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d005      	beq.n	8005c86 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7e:	f043 0204 	orr.w	r2, r3, #4
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fd ffdc 	bl	8003c58 <HAL_DMA_GetState>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d049      	beq.n	8005d3a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005caa:	4a69      	ldr	r2, [pc, #420]	@ (8005e50 <I2C_Slave_STOPF+0x258>)
 8005cac:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fd fe24 	bl	8003900 <HAL_DMA_Abort_IT>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d03d      	beq.n	8005d3a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005cc8:	4610      	mov	r0, r2
 8005cca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ccc:	e035      	b.n	8005d3a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d005      	beq.n	8005cf2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cea:	f043 0204 	orr.w	r2, r3, #4
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fd ffa6 	bl	8003c58 <HAL_DMA_GetState>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d014      	beq.n	8005d3c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d16:	4a4e      	ldr	r2, [pc, #312]	@ (8005e50 <I2C_Slave_STOPF+0x258>)
 8005d18:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fd fdee 	bl	8003900 <HAL_DMA_Abort_IT>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d008      	beq.n	8005d3c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005d34:	4610      	mov	r0, r2
 8005d36:	4798      	blx	r3
 8005d38:	e000      	b.n	8005d3c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d3a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d03e      	beq.n	8005dc4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d112      	bne.n	8005d7a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691a      	ldr	r2, [r3, #16]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d84:	2b40      	cmp	r3, #64	@ 0x40
 8005d86:	d112      	bne.n	8005dae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbc:	f043 0204 	orr.w	r2, r3, #4
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f8b3 	bl	8005f38 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005dd2:	e039      	b.n	8005e48 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
 8005dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dd8:	d109      	bne.n	8005dee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2228      	movs	r2, #40	@ 0x28
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff f84f 	bl	8004e8c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b28      	cmp	r3, #40	@ 0x28
 8005df8:	d111      	bne.n	8005e1e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a15      	ldr	r2, [pc, #84]	@ (8005e54 <I2C_Slave_STOPF+0x25c>)
 8005dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7ff f850 	bl	8004ebc <HAL_I2C_ListenCpltCallback>
}
 8005e1c:	e014      	b.n	8005e48 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e22:	2b22      	cmp	r3, #34	@ 0x22
 8005e24:	d002      	beq.n	8005e2c <I2C_Slave_STOPF+0x234>
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
 8005e28:	2b22      	cmp	r3, #34	@ 0x22
 8005e2a:	d10d      	bne.n	8005e48 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff f822 	bl	8004e8c <HAL_I2C_SlaveRxCpltCallback>
}
 8005e48:	bf00      	nop
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	080066bd 	.word	0x080066bd
 8005e54:	ffff0000 	.word	0xffff0000

08005e58 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e66:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d002      	beq.n	8005e7a <I2C_Slave_AF+0x22>
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d129      	bne.n	8005ece <I2C_Slave_AF+0x76>
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	2b28      	cmp	r3, #40	@ 0x28
 8005e7e:	d126      	bne.n	8005ece <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a2c      	ldr	r2, [pc, #176]	@ (8005f34 <I2C_Slave_AF+0xdc>)
 8005e84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e94:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e9e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eae:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fe fff8 	bl	8004ebc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005ecc:	e02e      	b.n	8005f2c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	2b21      	cmp	r3, #33	@ 0x21
 8005ed2:	d126      	bne.n	8005f22 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a17      	ldr	r2, [pc, #92]	@ (8005f34 <I2C_Slave_AF+0xdc>)
 8005ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2221      	movs	r2, #33	@ 0x21
 8005ede:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005efe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f08:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f18:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fe ffac 	bl	8004e78 <HAL_I2C_SlaveTxCpltCallback>
}
 8005f20:	e004      	b.n	8005f2c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f2a:	615a      	str	r2, [r3, #20]
}
 8005f2c:	bf00      	nop
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	ffff0000 	.word	0xffff0000

08005f38 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f46:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f4e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005f50:	7bbb      	ldrb	r3, [r7, #14]
 8005f52:	2b10      	cmp	r3, #16
 8005f54:	d002      	beq.n	8005f5c <I2C_ITError+0x24>
 8005f56:	7bbb      	ldrb	r3, [r7, #14]
 8005f58:	2b40      	cmp	r3, #64	@ 0x40
 8005f5a:	d10a      	bne.n	8005f72 <I2C_ITError+0x3a>
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	2b22      	cmp	r3, #34	@ 0x22
 8005f60:	d107      	bne.n	8005f72 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f70:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f78:	2b28      	cmp	r3, #40	@ 0x28
 8005f7a:	d107      	bne.n	8005f8c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2228      	movs	r2, #40	@ 0x28
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005f8a:	e015      	b.n	8005fb8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f9a:	d00a      	beq.n	8005fb2 <I2C_ITError+0x7a>
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	2b60      	cmp	r3, #96	@ 0x60
 8005fa0:	d007      	beq.n	8005fb2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fc6:	d162      	bne.n	800608e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fd6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d020      	beq.n	8006028 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fea:	4a6a      	ldr	r2, [pc, #424]	@ (8006194 <I2C_ITError+0x25c>)
 8005fec:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fd fc84 	bl	8003900 <HAL_DMA_Abort_IT>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 8089 	beq.w	8006112 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0201 	bic.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800601c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006022:	4610      	mov	r0, r2
 8006024:	4798      	blx	r3
 8006026:	e074      	b.n	8006112 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602c:	4a59      	ldr	r2, [pc, #356]	@ (8006194 <I2C_ITError+0x25c>)
 800602e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006034:	4618      	mov	r0, r3
 8006036:	f7fd fc63 	bl	8003900 <HAL_DMA_Abort_IT>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d068      	beq.n	8006112 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800604a:	2b40      	cmp	r3, #64	@ 0x40
 800604c:	d10b      	bne.n	8006066 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0201 	bic.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2220      	movs	r2, #32
 800607a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006088:	4610      	mov	r0, r2
 800608a:	4798      	blx	r3
 800608c:	e041      	b.n	8006112 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b60      	cmp	r3, #96	@ 0x60
 8006098:	d125      	bne.n	80060e6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2220      	movs	r2, #32
 800609e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b2:	2b40      	cmp	r3, #64	@ 0x40
 80060b4:	d10b      	bne.n	80060ce <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0201 	bic.w	r2, r2, #1
 80060dc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7fe fef6 	bl	8004ed0 <HAL_I2C_AbortCpltCallback>
 80060e4:	e015      	b.n	8006112 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f0:	2b40      	cmp	r3, #64	@ 0x40
 80060f2:	d10b      	bne.n	800610c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7fb faed 	bl	80016ec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006116:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10e      	bne.n	8006140 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006128:	2b00      	cmp	r3, #0
 800612a:	d109      	bne.n	8006140 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006132:	2b00      	cmp	r3, #0
 8006134:	d104      	bne.n	8006140 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800614e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006156:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b04      	cmp	r3, #4
 8006162:	d113      	bne.n	800618c <I2C_ITError+0x254>
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	2b28      	cmp	r3, #40	@ 0x28
 8006168:	d110      	bne.n	800618c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a0a      	ldr	r2, [pc, #40]	@ (8006198 <I2C_ITError+0x260>)
 800616e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fe fe98 	bl	8004ebc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800618c:	bf00      	nop
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	080066bd 	.word	0x080066bd
 8006198:	ffff0000 	.word	0xffff0000

0800619c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af02      	add	r7, sp, #8
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	4608      	mov	r0, r1
 80061a6:	4611      	mov	r1, r2
 80061a8:	461a      	mov	r2, r3
 80061aa:	4603      	mov	r3, r0
 80061ac:	817b      	strh	r3, [r7, #10]
 80061ae:	460b      	mov	r3, r1
 80061b0:	813b      	strh	r3, [r7, #8]
 80061b2:	4613      	mov	r3, r2
 80061b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 fb1a 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00d      	beq.n	80061fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061ec:	d103      	bne.n	80061f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e05f      	b.n	80062ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061fa:	897b      	ldrh	r3, [r7, #10]
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006208:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620c:	6a3a      	ldr	r2, [r7, #32]
 800620e:	492d      	ldr	r1, [pc, #180]	@ (80062c4 <I2C_RequestMemoryWrite+0x128>)
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 fb52 	bl	80068ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e04c      	b.n	80062ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006220:	2300      	movs	r3, #0
 8006222:	617b      	str	r3, [r7, #20]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006238:	6a39      	ldr	r1, [r7, #32]
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 fbbc 	bl	80069b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00d      	beq.n	8006262 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624a:	2b04      	cmp	r3, #4
 800624c:	d107      	bne.n	800625e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800625c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e02b      	b.n	80062ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006262:	88fb      	ldrh	r3, [r7, #6]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d105      	bne.n	8006274 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006268:	893b      	ldrh	r3, [r7, #8]
 800626a:	b2da      	uxtb	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	611a      	str	r2, [r3, #16]
 8006272:	e021      	b.n	80062b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006274:	893b      	ldrh	r3, [r7, #8]
 8006276:	0a1b      	lsrs	r3, r3, #8
 8006278:	b29b      	uxth	r3, r3
 800627a:	b2da      	uxtb	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006284:	6a39      	ldr	r1, [r7, #32]
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 fb96 	bl	80069b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00d      	beq.n	80062ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006296:	2b04      	cmp	r3, #4
 8006298:	d107      	bne.n	80062aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e005      	b.n	80062ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062ae:	893b      	ldrh	r3, [r7, #8]
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	00010002 	.word	0x00010002

080062c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	4608      	mov	r0, r1
 80062d2:	4611      	mov	r1, r2
 80062d4:	461a      	mov	r2, r3
 80062d6:	4603      	mov	r3, r0
 80062d8:	817b      	strh	r3, [r7, #10]
 80062da:	460b      	mov	r3, r1
 80062dc:	813b      	strh	r3, [r7, #8]
 80062de:	4613      	mov	r3, r2
 80062e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80062f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006300:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	2200      	movs	r2, #0
 800630a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 fa7c 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00d      	beq.n	8006336 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006324:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006328:	d103      	bne.n	8006332 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006330:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e0aa      	b.n	800648c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006336:	897b      	ldrh	r3, [r7, #10]
 8006338:	b2db      	uxtb	r3, r3
 800633a:	461a      	mov	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006344:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006348:	6a3a      	ldr	r2, [r7, #32]
 800634a:	4952      	ldr	r1, [pc, #328]	@ (8006494 <I2C_RequestMemoryRead+0x1cc>)
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 fab4 	bl	80068ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e097      	b.n	800648c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800635c:	2300      	movs	r3, #0
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006374:	6a39      	ldr	r1, [r7, #32]
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 fb1e 	bl	80069b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00d      	beq.n	800639e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006386:	2b04      	cmp	r3, #4
 8006388:	d107      	bne.n	800639a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006398:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e076      	b.n	800648c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800639e:	88fb      	ldrh	r3, [r7, #6]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d105      	bne.n	80063b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063a4:	893b      	ldrh	r3, [r7, #8]
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	611a      	str	r2, [r3, #16]
 80063ae:	e021      	b.n	80063f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063b0:	893b      	ldrh	r3, [r7, #8]
 80063b2:	0a1b      	lsrs	r3, r3, #8
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063c0:	6a39      	ldr	r1, [r7, #32]
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 faf8 	bl	80069b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00d      	beq.n	80063ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	d107      	bne.n	80063e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e050      	b.n	800648c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063ea:	893b      	ldrh	r3, [r7, #8]
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f6:	6a39      	ldr	r1, [r7, #32]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fadd 	bl	80069b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00d      	beq.n	8006420 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006408:	2b04      	cmp	r3, #4
 800640a:	d107      	bne.n	800641c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800641a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e035      	b.n	800648c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800642e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	2200      	movs	r2, #0
 8006438:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f9e5 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00d      	beq.n	8006464 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006452:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006456:	d103      	bne.n	8006460 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800645e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e013      	b.n	800648c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006464:	897b      	ldrh	r3, [r7, #10]
 8006466:	b2db      	uxtb	r3, r3
 8006468:	f043 0301 	orr.w	r3, r3, #1
 800646c:	b2da      	uxtb	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006476:	6a3a      	ldr	r2, [r7, #32]
 8006478:	4906      	ldr	r1, [pc, #24]	@ (8006494 <I2C_RequestMemoryRead+0x1cc>)
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 fa1d 	bl	80068ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e000      	b.n	800648c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	00010002 	.word	0x00010002

08006498 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ac:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064b4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80064ca:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064d8:	2200      	movs	r2, #0
 80064da:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e8:	2200      	movs	r2, #0
 80064ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80064ec:	7cfb      	ldrb	r3, [r7, #19]
 80064ee:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80064f2:	2b21      	cmp	r3, #33	@ 0x21
 80064f4:	d007      	beq.n	8006506 <I2C_DMAXferCplt+0x6e>
 80064f6:	7cfb      	ldrb	r3, [r7, #19]
 80064f8:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80064fc:	2b22      	cmp	r3, #34	@ 0x22
 80064fe:	d131      	bne.n	8006564 <I2C_DMAXferCplt+0xcc>
 8006500:	7cbb      	ldrb	r3, [r7, #18]
 8006502:	2b20      	cmp	r3, #32
 8006504:	d12e      	bne.n	8006564 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006514:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2200      	movs	r2, #0
 800651a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800651c:	7cfb      	ldrb	r3, [r7, #19]
 800651e:	2b29      	cmp	r3, #41	@ 0x29
 8006520:	d10a      	bne.n	8006538 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2221      	movs	r2, #33	@ 0x21
 8006526:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2228      	movs	r2, #40	@ 0x28
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006530:	6978      	ldr	r0, [r7, #20]
 8006532:	f7fe fca1 	bl	8004e78 <HAL_I2C_SlaveTxCpltCallback>
 8006536:	e00c      	b.n	8006552 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006538:	7cfb      	ldrb	r3, [r7, #19]
 800653a:	2b2a      	cmp	r3, #42	@ 0x2a
 800653c:	d109      	bne.n	8006552 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2222      	movs	r2, #34	@ 0x22
 8006542:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2228      	movs	r2, #40	@ 0x28
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800654c:	6978      	ldr	r0, [r7, #20]
 800654e:	f7fe fc9d 	bl	8004e8c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006560:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006562:	e06a      	b.n	800663a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d064      	beq.n	800663a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006574:	b29b      	uxth	r3, r3
 8006576:	2b01      	cmp	r3, #1
 8006578:	d107      	bne.n	800658a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006588:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006598:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065a0:	d009      	beq.n	80065b6 <I2C_DMAXferCplt+0x11e>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d006      	beq.n	80065b6 <I2C_DMAXferCplt+0x11e>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80065ae:	d002      	beq.n	80065b6 <I2C_DMAXferCplt+0x11e>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b20      	cmp	r3, #32
 80065b4:	d107      	bne.n	80065c6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065c4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80065d4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065e4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2200      	movs	r2, #0
 80065ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80065f4:	6978      	ldr	r0, [r7, #20]
 80065f6:	f7fb f879 	bl	80016ec <HAL_I2C_ErrorCallback>
}
 80065fa:	e01e      	b.n	800663a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b40      	cmp	r3, #64	@ 0x40
 800660e:	d10a      	bne.n	8006626 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2200      	movs	r2, #0
 800661c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800661e:	6978      	ldr	r0, [r7, #20]
 8006620:	f7fb f854 	bl	80016cc <HAL_I2C_MemRxCpltCallback>
}
 8006624:	e009      	b.n	800663a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2212      	movs	r2, #18
 8006632:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006634:	6978      	ldr	r0, [r7, #20]
 8006636:	f7fe fc15 	bl	8004e64 <HAL_I2C_MasterRxCpltCallback>
}
 800663a:	bf00      	nop
 800663c:	3718      	adds	r7, #24
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b084      	sub	sp, #16
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800664e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800665c:	2200      	movs	r2, #0
 800665e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800666c:	2200      	movs	r2, #0
 800666e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7fd faff 	bl	8003c74 <HAL_DMA_GetError>
 8006676:	4603      	mov	r3, r0
 8006678:	2b02      	cmp	r3, #2
 800667a:	d01b      	beq.n	80066b4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800668a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2220      	movs	r2, #32
 8006696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a6:	f043 0210 	orr.w	r2, r3, #16
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f7fb f81c 	bl	80016ec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066b4:	bf00      	nop
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066d4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80066d6:	4b4b      	ldr	r3, [pc, #300]	@ (8006804 <I2C_DMAAbort+0x148>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	08db      	lsrs	r3, r3, #3
 80066dc:	4a4a      	ldr	r2, [pc, #296]	@ (8006808 <I2C_DMAAbort+0x14c>)
 80066de:	fba2 2303 	umull	r2, r3, r2, r3
 80066e2:	0a1a      	lsrs	r2, r3, #8
 80066e4:	4613      	mov	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	00da      	lsls	r2, r3, #3
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fa:	f043 0220 	orr.w	r2, r3, #32
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006702:	e00a      	b.n	800671a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	3b01      	subs	r3, #1
 8006708:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006718:	d0ea      	beq.n	80066f0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006726:	2200      	movs	r2, #0
 8006728:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006736:	2200      	movs	r2, #0
 8006738:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006748:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2200      	movs	r2, #0
 800674e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006754:	2b00      	cmp	r3, #0
 8006756:	d003      	beq.n	8006760 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800675c:	2200      	movs	r2, #0
 800675e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676c:	2200      	movs	r2, #0
 800676e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0201 	bic.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b60      	cmp	r3, #96	@ 0x60
 800678a:	d10e      	bne.n	80067aa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2200      	movs	r2, #0
 80067a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067a2:	6978      	ldr	r0, [r7, #20]
 80067a4:	f7fe fb94 	bl	8004ed0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80067a8:	e027      	b.n	80067fa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067aa:	7cfb      	ldrb	r3, [r7, #19]
 80067ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80067b0:	2b28      	cmp	r3, #40	@ 0x28
 80067b2:	d117      	bne.n	80067e4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2200      	movs	r2, #0
 80067d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2228      	movs	r2, #40	@ 0x28
 80067de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80067e2:	e007      	b.n	80067f4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80067f4:	6978      	ldr	r0, [r7, #20]
 80067f6:	f7fa ff79 	bl	80016ec <HAL_I2C_ErrorCallback>
}
 80067fa:	bf00      	nop
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	20000000 	.word	0x20000000
 8006808:	14f8b589 	.word	0x14f8b589

0800680c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	4613      	mov	r3, r2
 800681a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800681c:	e025      	b.n	800686a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006824:	d021      	beq.n	800686a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006826:	f7fb fd15 	bl	8002254 <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	429a      	cmp	r2, r3
 8006834:	d302      	bcc.n	800683c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d116      	bne.n	800686a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2220      	movs	r2, #32
 8006846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006856:	f043 0220 	orr.w	r2, r3, #32
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e023      	b.n	80068b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	0c1b      	lsrs	r3, r3, #16
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b01      	cmp	r3, #1
 8006872:	d10d      	bne.n	8006890 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	43da      	mvns	r2, r3
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	4013      	ands	r3, r2
 8006880:	b29b      	uxth	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	bf0c      	ite	eq
 8006886:	2301      	moveq	r3, #1
 8006888:	2300      	movne	r3, #0
 800688a:	b2db      	uxtb	r3, r3
 800688c:	461a      	mov	r2, r3
 800688e:	e00c      	b.n	80068aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	43da      	mvns	r2, r3
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4013      	ands	r3, r2
 800689c:	b29b      	uxth	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	bf0c      	ite	eq
 80068a2:	2301      	moveq	r3, #1
 80068a4:	2300      	movne	r3, #0
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	461a      	mov	r2, r3
 80068aa:	79fb      	ldrb	r3, [r7, #7]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d0b6      	beq.n	800681e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	607a      	str	r2, [r7, #4]
 80068c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068c8:	e051      	b.n	800696e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068d8:	d123      	bne.n	8006922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80068f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2220      	movs	r2, #32
 80068fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690e:	f043 0204 	orr.w	r2, r3, #4
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e046      	b.n	80069b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006928:	d021      	beq.n	800696e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800692a:	f7fb fc93 	bl	8002254 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	429a      	cmp	r2, r3
 8006938:	d302      	bcc.n	8006940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d116      	bne.n	800696e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2220      	movs	r2, #32
 800694a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695a:	f043 0220 	orr.w	r2, r3, #32
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e020      	b.n	80069b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	0c1b      	lsrs	r3, r3, #16
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b01      	cmp	r3, #1
 8006976:	d10c      	bne.n	8006992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	43da      	mvns	r2, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	4013      	ands	r3, r2
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	bf14      	ite	ne
 800698a:	2301      	movne	r3, #1
 800698c:	2300      	moveq	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	e00b      	b.n	80069aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	43da      	mvns	r2, r3
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	4013      	ands	r3, r2
 800699e:	b29b      	uxth	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	bf14      	ite	ne
 80069a4:	2301      	movne	r3, #1
 80069a6:	2300      	moveq	r3, #0
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d18d      	bne.n	80068ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069c4:	e02d      	b.n	8006a22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f86a 	bl	8006aa0 <I2C_IsAcknowledgeFailed>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e02d      	b.n	8006a32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069dc:	d021      	beq.n	8006a22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069de:	f7fb fc39 	bl	8002254 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d302      	bcc.n	80069f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d116      	bne.n	8006a22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0e:	f043 0220 	orr.w	r2, r3, #32
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e007      	b.n	8006a32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a2c:	2b80      	cmp	r3, #128	@ 0x80
 8006a2e:	d1ca      	bne.n	80069c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
	...

08006a3c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006a48:	4b13      	ldr	r3, [pc, #76]	@ (8006a98 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	08db      	lsrs	r3, r3, #3
 8006a4e:	4a13      	ldr	r2, [pc, #76]	@ (8006a9c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006a50:	fba2 2303 	umull	r2, r3, r2, r3
 8006a54:	0a1a      	lsrs	r2, r3, #8
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d107      	bne.n	8006a7a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6e:	f043 0220 	orr.w	r2, r3, #32
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e008      	b.n	8006a8c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a88:	d0e9      	beq.n	8006a5e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	20000000 	.word	0x20000000
 8006a9c:	14f8b589 	.word	0x14f8b589

08006aa0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ab6:	d11b      	bne.n	8006af0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ac0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006adc:	f043 0204 	orr.w	r2, r3, #4
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e000      	b.n	8006af2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006b0e:	d103      	bne.n	8006b18 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006b16:	e007      	b.n	8006b28 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006b20:	d102      	bne.n	8006b28 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2208      	movs	r2, #8
 8006b26:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e0cc      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b48:	4b68      	ldr	r3, [pc, #416]	@ (8006cec <HAL_RCC_ClockConfig+0x1b8>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d90c      	bls.n	8006b70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b56:	4b65      	ldr	r3, [pc, #404]	@ (8006cec <HAL_RCC_ClockConfig+0x1b8>)
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	b2d2      	uxtb	r2, r2
 8006b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b5e:	4b63      	ldr	r3, [pc, #396]	@ (8006cec <HAL_RCC_ClockConfig+0x1b8>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0307 	and.w	r3, r3, #7
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d001      	beq.n	8006b70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e0b8      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d020      	beq.n	8006bbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b88:	4b59      	ldr	r3, [pc, #356]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	4a58      	ldr	r2, [pc, #352]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006b92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0308 	and.w	r3, r3, #8
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d005      	beq.n	8006bac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ba0:	4b53      	ldr	r3, [pc, #332]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	4a52      	ldr	r2, [pc, #328]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006baa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bac:	4b50      	ldr	r3, [pc, #320]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	494d      	ldr	r1, [pc, #308]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d044      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d107      	bne.n	8006be2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bd2:	4b47      	ldr	r3, [pc, #284]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d119      	bne.n	8006c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e07f      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d003      	beq.n	8006bf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d107      	bne.n	8006c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bf2:	4b3f      	ldr	r3, [pc, #252]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d109      	bne.n	8006c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e06f      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c02:	4b3b      	ldr	r3, [pc, #236]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e067      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c12:	4b37      	ldr	r3, [pc, #220]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f023 0203 	bic.w	r2, r3, #3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	4934      	ldr	r1, [pc, #208]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c24:	f7fb fb16 	bl	8002254 <HAL_GetTick>
 8006c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c2a:	e00a      	b.n	8006c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c2c:	f7fb fb12 	bl	8002254 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e04f      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c42:	4b2b      	ldr	r3, [pc, #172]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f003 020c 	and.w	r2, r3, #12
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d1eb      	bne.n	8006c2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c54:	4b25      	ldr	r3, [pc, #148]	@ (8006cec <HAL_RCC_ClockConfig+0x1b8>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d20c      	bcs.n	8006c7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c62:	4b22      	ldr	r3, [pc, #136]	@ (8006cec <HAL_RCC_ClockConfig+0x1b8>)
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c6a:	4b20      	ldr	r3, [pc, #128]	@ (8006cec <HAL_RCC_ClockConfig+0x1b8>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d001      	beq.n	8006c7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e032      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0304 	and.w	r3, r3, #4
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d008      	beq.n	8006c9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c88:	4b19      	ldr	r3, [pc, #100]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	4916      	ldr	r1, [pc, #88]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0308 	and.w	r3, r3, #8
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d009      	beq.n	8006cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ca6:	4b12      	ldr	r3, [pc, #72]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	490e      	ldr	r1, [pc, #56]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cba:	f000 f821 	bl	8006d00 <HAL_RCC_GetSysClockFreq>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	091b      	lsrs	r3, r3, #4
 8006cc6:	f003 030f 	and.w	r3, r3, #15
 8006cca:	490a      	ldr	r1, [pc, #40]	@ (8006cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8006ccc:	5ccb      	ldrb	r3, [r1, r3]
 8006cce:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd2:	4a09      	ldr	r2, [pc, #36]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8006cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006cd6:	4b09      	ldr	r3, [pc, #36]	@ (8006cfc <HAL_RCC_ClockConfig+0x1c8>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fb fa76 	bl	80021cc <HAL_InitTick>

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	40023c00 	.word	0x40023c00
 8006cf0:	40023800 	.word	0x40023800
 8006cf4:	0800df1c 	.word	0x0800df1c
 8006cf8:	20000000 	.word	0x20000000
 8006cfc:	20000004 	.word	0x20000004

08006d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d04:	b090      	sub	sp, #64	@ 0x40
 8006d06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d10:	2300      	movs	r3, #0
 8006d12:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d18:	4b59      	ldr	r3, [pc, #356]	@ (8006e80 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f003 030c 	and.w	r3, r3, #12
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	d00d      	beq.n	8006d40 <HAL_RCC_GetSysClockFreq+0x40>
 8006d24:	2b08      	cmp	r3, #8
 8006d26:	f200 80a1 	bhi.w	8006e6c <HAL_RCC_GetSysClockFreq+0x16c>
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <HAL_RCC_GetSysClockFreq+0x34>
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d003      	beq.n	8006d3a <HAL_RCC_GetSysClockFreq+0x3a>
 8006d32:	e09b      	b.n	8006e6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d34:	4b53      	ldr	r3, [pc, #332]	@ (8006e84 <HAL_RCC_GetSysClockFreq+0x184>)
 8006d36:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006d38:	e09b      	b.n	8006e72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d3a:	4b53      	ldr	r3, [pc, #332]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d3e:	e098      	b.n	8006e72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d40:	4b4f      	ldr	r3, [pc, #316]	@ (8006e80 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d48:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d4a:	4b4d      	ldr	r3, [pc, #308]	@ (8006e80 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d028      	beq.n	8006da8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d56:	4b4a      	ldr	r3, [pc, #296]	@ (8006e80 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	099b      	lsrs	r3, r3, #6
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	623b      	str	r3, [r7, #32]
 8006d60:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006d68:	2100      	movs	r1, #0
 8006d6a:	4b47      	ldr	r3, [pc, #284]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d6c:	fb03 f201 	mul.w	r2, r3, r1
 8006d70:	2300      	movs	r3, #0
 8006d72:	fb00 f303 	mul.w	r3, r0, r3
 8006d76:	4413      	add	r3, r2
 8006d78:	4a43      	ldr	r2, [pc, #268]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d7a:	fba0 1202 	umull	r1, r2, r0, r2
 8006d7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d80:	460a      	mov	r2, r1
 8006d82:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006d84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d86:	4413      	add	r3, r2
 8006d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	61bb      	str	r3, [r7, #24]
 8006d90:	61fa      	str	r2, [r7, #28]
 8006d92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006d9a:	f7f9 fa99 	bl	80002d0 <__aeabi_uldivmod>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4613      	mov	r3, r2
 8006da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006da6:	e053      	b.n	8006e50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006da8:	4b35      	ldr	r3, [pc, #212]	@ (8006e80 <HAL_RCC_GetSysClockFreq+0x180>)
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	099b      	lsrs	r3, r3, #6
 8006dae:	2200      	movs	r2, #0
 8006db0:	613b      	str	r3, [r7, #16]
 8006db2:	617a      	str	r2, [r7, #20]
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006dba:	f04f 0b00 	mov.w	fp, #0
 8006dbe:	4652      	mov	r2, sl
 8006dc0:	465b      	mov	r3, fp
 8006dc2:	f04f 0000 	mov.w	r0, #0
 8006dc6:	f04f 0100 	mov.w	r1, #0
 8006dca:	0159      	lsls	r1, r3, #5
 8006dcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dd0:	0150      	lsls	r0, r2, #5
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	ebb2 080a 	subs.w	r8, r2, sl
 8006dda:	eb63 090b 	sbc.w	r9, r3, fp
 8006dde:	f04f 0200 	mov.w	r2, #0
 8006de2:	f04f 0300 	mov.w	r3, #0
 8006de6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006dea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006dee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006df2:	ebb2 0408 	subs.w	r4, r2, r8
 8006df6:	eb63 0509 	sbc.w	r5, r3, r9
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	00eb      	lsls	r3, r5, #3
 8006e04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e08:	00e2      	lsls	r2, r4, #3
 8006e0a:	4614      	mov	r4, r2
 8006e0c:	461d      	mov	r5, r3
 8006e0e:	eb14 030a 	adds.w	r3, r4, sl
 8006e12:	603b      	str	r3, [r7, #0]
 8006e14:	eb45 030b 	adc.w	r3, r5, fp
 8006e18:	607b      	str	r3, [r7, #4]
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	f04f 0300 	mov.w	r3, #0
 8006e22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e26:	4629      	mov	r1, r5
 8006e28:	028b      	lsls	r3, r1, #10
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e30:	4621      	mov	r1, r4
 8006e32:	028a      	lsls	r2, r1, #10
 8006e34:	4610      	mov	r0, r2
 8006e36:	4619      	mov	r1, r3
 8006e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	60bb      	str	r3, [r7, #8]
 8006e3e:	60fa      	str	r2, [r7, #12]
 8006e40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e44:	f7f9 fa44 	bl	80002d0 <__aeabi_uldivmod>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e50:	4b0b      	ldr	r3, [pc, #44]	@ (8006e80 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	0c1b      	lsrs	r3, r3, #16
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006e60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006e6a:	e002      	b.n	8006e72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e6c:	4b05      	ldr	r3, [pc, #20]	@ (8006e84 <HAL_RCC_GetSysClockFreq+0x184>)
 8006e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3740      	adds	r7, #64	@ 0x40
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e7e:	bf00      	nop
 8006e80:	40023800 	.word	0x40023800
 8006e84:	00f42400 	.word	0x00f42400
 8006e88:	017d7840 	.word	0x017d7840

08006e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e90:	4b03      	ldr	r3, [pc, #12]	@ (8006ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e92:	681b      	ldr	r3, [r3, #0]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	20000000 	.word	0x20000000

08006ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ea8:	f7ff fff0 	bl	8006e8c <HAL_RCC_GetHCLKFreq>
 8006eac:	4602      	mov	r2, r0
 8006eae:	4b05      	ldr	r3, [pc, #20]	@ (8006ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	0a9b      	lsrs	r3, r3, #10
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	4903      	ldr	r1, [pc, #12]	@ (8006ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006eba:	5ccb      	ldrb	r3, [r1, r3]
 8006ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	0800df2c 	.word	0x0800df2c

08006ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ed0:	f7ff ffdc 	bl	8006e8c <HAL_RCC_GetHCLKFreq>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	4b05      	ldr	r3, [pc, #20]	@ (8006eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	0b5b      	lsrs	r3, r3, #13
 8006edc:	f003 0307 	and.w	r3, r3, #7
 8006ee0:	4903      	ldr	r1, [pc, #12]	@ (8006ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ee2:	5ccb      	ldrb	r3, [r1, r3]
 8006ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	40023800 	.word	0x40023800
 8006ef0:	0800df2c 	.word	0x0800df2c

08006ef4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e273      	b.n	80073ee <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d075      	beq.n	8006ffe <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006f12:	4b88      	ldr	r3, [pc, #544]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f003 030c 	and.w	r3, r3, #12
 8006f1a:	2b04      	cmp	r3, #4
 8006f1c:	d00c      	beq.n	8006f38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f1e:	4b85      	ldr	r3, [pc, #532]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006f26:	2b08      	cmp	r3, #8
 8006f28:	d112      	bne.n	8006f50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f2a:	4b82      	ldr	r3, [pc, #520]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f36:	d10b      	bne.n	8006f50 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f38:	4b7e      	ldr	r3, [pc, #504]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d05b      	beq.n	8006ffc <HAL_RCC_OscConfig+0x108>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d157      	bne.n	8006ffc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e24e      	b.n	80073ee <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f58:	d106      	bne.n	8006f68 <HAL_RCC_OscConfig+0x74>
 8006f5a:	4b76      	ldr	r3, [pc, #472]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a75      	ldr	r2, [pc, #468]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8006f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	e01d      	b.n	8006fa4 <HAL_RCC_OscConfig+0xb0>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f70:	d10c      	bne.n	8006f8c <HAL_RCC_OscConfig+0x98>
 8006f72:	4b70      	ldr	r3, [pc, #448]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a6f      	ldr	r2, [pc, #444]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8006f78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a6c      	ldr	r2, [pc, #432]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8006f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	e00b      	b.n	8006fa4 <HAL_RCC_OscConfig+0xb0>
 8006f8c:	4b69      	ldr	r3, [pc, #420]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a68      	ldr	r2, [pc, #416]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8006f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	4b66      	ldr	r3, [pc, #408]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a65      	ldr	r2, [pc, #404]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8006f9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d013      	beq.n	8006fd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fac:	f7fb f952 	bl	8002254 <HAL_GetTick>
 8006fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fb4:	f7fb f94e 	bl	8002254 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b64      	cmp	r3, #100	@ 0x64
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e213      	b.n	80073ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fc6:	4b5b      	ldr	r3, [pc, #364]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0f0      	beq.n	8006fb4 <HAL_RCC_OscConfig+0xc0>
 8006fd2:	e014      	b.n	8006ffe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd4:	f7fb f93e 	bl	8002254 <HAL_GetTick>
 8006fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fda:	e008      	b.n	8006fee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fdc:	f7fb f93a 	bl	8002254 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	2b64      	cmp	r3, #100	@ 0x64
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e1ff      	b.n	80073ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fee:	4b51      	ldr	r3, [pc, #324]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1f0      	bne.n	8006fdc <HAL_RCC_OscConfig+0xe8>
 8006ffa:	e000      	b.n	8006ffe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d063      	beq.n	80070d2 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800700a:	4b4a      	ldr	r3, [pc, #296]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f003 030c 	and.w	r3, r3, #12
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00b      	beq.n	800702e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007016:	4b47      	ldr	r3, [pc, #284]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800701e:	2b08      	cmp	r3, #8
 8007020:	d11c      	bne.n	800705c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007022:	4b44      	ldr	r3, [pc, #272]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d116      	bne.n	800705c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800702e:	4b41      	ldr	r3, [pc, #260]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d005      	beq.n	8007046 <HAL_RCC_OscConfig+0x152>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d001      	beq.n	8007046 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e1d3      	b.n	80073ee <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007046:	4b3b      	ldr	r3, [pc, #236]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	4937      	ldr	r1, [pc, #220]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8007056:	4313      	orrs	r3, r2
 8007058:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800705a:	e03a      	b.n	80070d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d020      	beq.n	80070a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007064:	4b34      	ldr	r3, [pc, #208]	@ (8007138 <HAL_RCC_OscConfig+0x244>)
 8007066:	2201      	movs	r2, #1
 8007068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706a:	f7fb f8f3 	bl	8002254 <HAL_GetTick>
 800706e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007070:	e008      	b.n	8007084 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007072:	f7fb f8ef 	bl	8002254 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b02      	cmp	r3, #2
 800707e:	d901      	bls.n	8007084 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e1b4      	b.n	80073ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007084:	4b2b      	ldr	r3, [pc, #172]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0302 	and.w	r3, r3, #2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0f0      	beq.n	8007072 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007090:	4b28      	ldr	r3, [pc, #160]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	00db      	lsls	r3, r3, #3
 800709e:	4925      	ldr	r1, [pc, #148]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	600b      	str	r3, [r1, #0]
 80070a4:	e015      	b.n	80070d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070a6:	4b24      	ldr	r3, [pc, #144]	@ (8007138 <HAL_RCC_OscConfig+0x244>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ac:	f7fb f8d2 	bl	8002254 <HAL_GetTick>
 80070b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070b2:	e008      	b.n	80070c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070b4:	f7fb f8ce 	bl	8002254 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d901      	bls.n	80070c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e193      	b.n	80073ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1f0      	bne.n	80070b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0308 	and.w	r3, r3, #8
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d036      	beq.n	800714c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d016      	beq.n	8007114 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070e6:	4b15      	ldr	r3, [pc, #84]	@ (800713c <HAL_RCC_OscConfig+0x248>)
 80070e8:	2201      	movs	r2, #1
 80070ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ec:	f7fb f8b2 	bl	8002254 <HAL_GetTick>
 80070f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070f2:	e008      	b.n	8007106 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070f4:	f7fb f8ae 	bl	8002254 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e173      	b.n	80073ee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007106:	4b0b      	ldr	r3, [pc, #44]	@ (8007134 <HAL_RCC_OscConfig+0x240>)
 8007108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d0f0      	beq.n	80070f4 <HAL_RCC_OscConfig+0x200>
 8007112:	e01b      	b.n	800714c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007114:	4b09      	ldr	r3, [pc, #36]	@ (800713c <HAL_RCC_OscConfig+0x248>)
 8007116:	2200      	movs	r2, #0
 8007118:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800711a:	f7fb f89b 	bl	8002254 <HAL_GetTick>
 800711e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007120:	e00e      	b.n	8007140 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007122:	f7fb f897 	bl	8002254 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d907      	bls.n	8007140 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e15c      	b.n	80073ee <HAL_RCC_OscConfig+0x4fa>
 8007134:	40023800 	.word	0x40023800
 8007138:	42470000 	.word	0x42470000
 800713c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007140:	4b8a      	ldr	r3, [pc, #552]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 8007142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1ea      	bne.n	8007122 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 8097 	beq.w	8007288 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800715a:	2300      	movs	r3, #0
 800715c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800715e:	4b83      	ldr	r3, [pc, #524]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 8007160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10f      	bne.n	800718a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800716a:	2300      	movs	r3, #0
 800716c:	60bb      	str	r3, [r7, #8]
 800716e:	4b7f      	ldr	r3, [pc, #508]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 8007170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007172:	4a7e      	ldr	r2, [pc, #504]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 8007174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007178:	6413      	str	r3, [r2, #64]	@ 0x40
 800717a:	4b7c      	ldr	r3, [pc, #496]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 800717c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007182:	60bb      	str	r3, [r7, #8]
 8007184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007186:	2301      	movs	r3, #1
 8007188:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800718a:	4b79      	ldr	r3, [pc, #484]	@ (8007370 <HAL_RCC_OscConfig+0x47c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007192:	2b00      	cmp	r3, #0
 8007194:	d118      	bne.n	80071c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007196:	4b76      	ldr	r3, [pc, #472]	@ (8007370 <HAL_RCC_OscConfig+0x47c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a75      	ldr	r2, [pc, #468]	@ (8007370 <HAL_RCC_OscConfig+0x47c>)
 800719c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071a2:	f7fb f857 	bl	8002254 <HAL_GetTick>
 80071a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071a8:	e008      	b.n	80071bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071aa:	f7fb f853 	bl	8002254 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d901      	bls.n	80071bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e118      	b.n	80073ee <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071bc:	4b6c      	ldr	r3, [pc, #432]	@ (8007370 <HAL_RCC_OscConfig+0x47c>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d0f0      	beq.n	80071aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d106      	bne.n	80071de <HAL_RCC_OscConfig+0x2ea>
 80071d0:	4b66      	ldr	r3, [pc, #408]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 80071d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071d4:	4a65      	ldr	r2, [pc, #404]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 80071d6:	f043 0301 	orr.w	r3, r3, #1
 80071da:	6713      	str	r3, [r2, #112]	@ 0x70
 80071dc:	e01c      	b.n	8007218 <HAL_RCC_OscConfig+0x324>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b05      	cmp	r3, #5
 80071e4:	d10c      	bne.n	8007200 <HAL_RCC_OscConfig+0x30c>
 80071e6:	4b61      	ldr	r3, [pc, #388]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 80071e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ea:	4a60      	ldr	r2, [pc, #384]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 80071ec:	f043 0304 	orr.w	r3, r3, #4
 80071f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80071f2:	4b5e      	ldr	r3, [pc, #376]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 80071f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071f6:	4a5d      	ldr	r2, [pc, #372]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 80071f8:	f043 0301 	orr.w	r3, r3, #1
 80071fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80071fe:	e00b      	b.n	8007218 <HAL_RCC_OscConfig+0x324>
 8007200:	4b5a      	ldr	r3, [pc, #360]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 8007202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007204:	4a59      	ldr	r2, [pc, #356]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 8007206:	f023 0301 	bic.w	r3, r3, #1
 800720a:	6713      	str	r3, [r2, #112]	@ 0x70
 800720c:	4b57      	ldr	r3, [pc, #348]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 800720e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007210:	4a56      	ldr	r2, [pc, #344]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 8007212:	f023 0304 	bic.w	r3, r3, #4
 8007216:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d015      	beq.n	800724c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007220:	f7fb f818 	bl	8002254 <HAL_GetTick>
 8007224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007226:	e00a      	b.n	800723e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007228:	f7fb f814 	bl	8002254 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007236:	4293      	cmp	r3, r2
 8007238:	d901      	bls.n	800723e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e0d7      	b.n	80073ee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800723e:	4b4b      	ldr	r3, [pc, #300]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 8007240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d0ee      	beq.n	8007228 <HAL_RCC_OscConfig+0x334>
 800724a:	e014      	b.n	8007276 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800724c:	f7fb f802 	bl	8002254 <HAL_GetTick>
 8007250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007252:	e00a      	b.n	800726a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007254:	f7fa fffe 	bl	8002254 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007262:	4293      	cmp	r3, r2
 8007264:	d901      	bls.n	800726a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e0c1      	b.n	80073ee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800726a:	4b40      	ldr	r3, [pc, #256]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 800726c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1ee      	bne.n	8007254 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007276:	7dfb      	ldrb	r3, [r7, #23]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d105      	bne.n	8007288 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800727c:	4b3b      	ldr	r3, [pc, #236]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 800727e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007280:	4a3a      	ldr	r2, [pc, #232]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 8007282:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007286:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 80ad 	beq.w	80073ec <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007292:	4b36      	ldr	r3, [pc, #216]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f003 030c 	and.w	r3, r3, #12
 800729a:	2b08      	cmp	r3, #8
 800729c:	d060      	beq.n	8007360 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d145      	bne.n	8007332 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072a6:	4b33      	ldr	r3, [pc, #204]	@ (8007374 <HAL_RCC_OscConfig+0x480>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ac:	f7fa ffd2 	bl	8002254 <HAL_GetTick>
 80072b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072b2:	e008      	b.n	80072c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072b4:	f7fa ffce 	bl	8002254 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e093      	b.n	80073ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072c6:	4b29      	ldr	r3, [pc, #164]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1f0      	bne.n	80072b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	69da      	ldr	r2, [r3, #28]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	431a      	orrs	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e0:	019b      	lsls	r3, r3, #6
 80072e2:	431a      	orrs	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e8:	085b      	lsrs	r3, r3, #1
 80072ea:	3b01      	subs	r3, #1
 80072ec:	041b      	lsls	r3, r3, #16
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f4:	061b      	lsls	r3, r3, #24
 80072f6:	431a      	orrs	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fc:	071b      	lsls	r3, r3, #28
 80072fe:	491b      	ldr	r1, [pc, #108]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 8007300:	4313      	orrs	r3, r2
 8007302:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007304:	4b1b      	ldr	r3, [pc, #108]	@ (8007374 <HAL_RCC_OscConfig+0x480>)
 8007306:	2201      	movs	r2, #1
 8007308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730a:	f7fa ffa3 	bl	8002254 <HAL_GetTick>
 800730e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007310:	e008      	b.n	8007324 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007312:	f7fa ff9f 	bl	8002254 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e064      	b.n	80073ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007324:	4b11      	ldr	r3, [pc, #68]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0f0      	beq.n	8007312 <HAL_RCC_OscConfig+0x41e>
 8007330:	e05c      	b.n	80073ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007332:	4b10      	ldr	r3, [pc, #64]	@ (8007374 <HAL_RCC_OscConfig+0x480>)
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007338:	f7fa ff8c 	bl	8002254 <HAL_GetTick>
 800733c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800733e:	e008      	b.n	8007352 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007340:	f7fa ff88 	bl	8002254 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d901      	bls.n	8007352 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e04d      	b.n	80073ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007352:	4b06      	ldr	r3, [pc, #24]	@ (800736c <HAL_RCC_OscConfig+0x478>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1f0      	bne.n	8007340 <HAL_RCC_OscConfig+0x44c>
 800735e:	e045      	b.n	80073ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d107      	bne.n	8007378 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e040      	b.n	80073ee <HAL_RCC_OscConfig+0x4fa>
 800736c:	40023800 	.word	0x40023800
 8007370:	40007000 	.word	0x40007000
 8007374:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007378:	4b1f      	ldr	r3, [pc, #124]	@ (80073f8 <HAL_RCC_OscConfig+0x504>)
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d030      	beq.n	80073e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007390:	429a      	cmp	r2, r3
 8007392:	d129      	bne.n	80073e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800739e:	429a      	cmp	r2, r3
 80073a0:	d122      	bne.n	80073e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80073a8:	4013      	ands	r3, r2
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80073ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d119      	bne.n	80073e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073be:	085b      	lsrs	r3, r3, #1
 80073c0:	3b01      	subs	r3, #1
 80073c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d10f      	bne.n	80073e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d107      	bne.n	80073e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d001      	beq.n	80073ec <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e000      	b.n	80073ee <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	40023800 	.word	0x40023800

080073fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e07b      	b.n	8007506 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007412:	2b00      	cmp	r3, #0
 8007414:	d108      	bne.n	8007428 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800741e:	d009      	beq.n	8007434 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	61da      	str	r2, [r3, #28]
 8007426:	e005      	b.n	8007434 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d106      	bne.n	8007454 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7fa fb86 	bl	8001b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2202      	movs	r2, #2
 8007458:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800746a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800747c:	431a      	orrs	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007486:	431a      	orrs	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	431a      	orrs	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	431a      	orrs	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074a4:	431a      	orrs	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b8:	ea42 0103 	orr.w	r1, r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	0c1b      	lsrs	r3, r3, #16
 80074d2:	f003 0104 	and.w	r1, r3, #4
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074da:	f003 0210 	and.w	r2, r3, #16
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	69da      	ldr	r2, [r3, #28]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b088      	sub	sp, #32
 8007512:	af00      	add	r7, sp, #0
 8007514:	60f8      	str	r0, [r7, #12]
 8007516:	60b9      	str	r1, [r7, #8]
 8007518:	603b      	str	r3, [r7, #0]
 800751a:	4613      	mov	r3, r2
 800751c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007528:	2b01      	cmp	r3, #1
 800752a:	d101      	bne.n	8007530 <HAL_SPI_Transmit+0x22>
 800752c:	2302      	movs	r3, #2
 800752e:	e126      	b.n	800777e <HAL_SPI_Transmit+0x270>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007538:	f7fa fe8c 	bl	8002254 <HAL_GetTick>
 800753c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800753e:	88fb      	ldrh	r3, [r7, #6]
 8007540:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b01      	cmp	r3, #1
 800754c:	d002      	beq.n	8007554 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800754e:	2302      	movs	r3, #2
 8007550:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007552:	e10b      	b.n	800776c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d002      	beq.n	8007560 <HAL_SPI_Transmit+0x52>
 800755a:	88fb      	ldrh	r3, [r7, #6]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d102      	bne.n	8007566 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007564:	e102      	b.n	800776c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2203      	movs	r2, #3
 800756a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	88fa      	ldrh	r2, [r7, #6]
 800757e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	88fa      	ldrh	r2, [r7, #6]
 8007584:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075ac:	d10f      	bne.n	80075ce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d8:	2b40      	cmp	r3, #64	@ 0x40
 80075da:	d007      	beq.n	80075ec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075f4:	d14b      	bne.n	800768e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d002      	beq.n	8007604 <HAL_SPI_Transmit+0xf6>
 80075fe:	8afb      	ldrh	r3, [r7, #22]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d13e      	bne.n	8007682 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007608:	881a      	ldrh	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007614:	1c9a      	adds	r2, r3, #2
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800761e:	b29b      	uxth	r3, r3
 8007620:	3b01      	subs	r3, #1
 8007622:	b29a      	uxth	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007628:	e02b      	b.n	8007682 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b02      	cmp	r3, #2
 8007636:	d112      	bne.n	800765e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763c:	881a      	ldrh	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007648:	1c9a      	adds	r2, r3, #2
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007652:	b29b      	uxth	r3, r3
 8007654:	3b01      	subs	r3, #1
 8007656:	b29a      	uxth	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800765c:	e011      	b.n	8007682 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800765e:	f7fa fdf9 	bl	8002254 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	429a      	cmp	r2, r3
 800766c:	d803      	bhi.n	8007676 <HAL_SPI_Transmit+0x168>
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007674:	d102      	bne.n	800767c <HAL_SPI_Transmit+0x16e>
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d102      	bne.n	8007682 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007680:	e074      	b.n	800776c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007686:	b29b      	uxth	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1ce      	bne.n	800762a <HAL_SPI_Transmit+0x11c>
 800768c:	e04c      	b.n	8007728 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d002      	beq.n	800769c <HAL_SPI_Transmit+0x18e>
 8007696:	8afb      	ldrh	r3, [r7, #22]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d140      	bne.n	800771e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	330c      	adds	r3, #12
 80076a6:	7812      	ldrb	r2, [r2, #0]
 80076a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	3b01      	subs	r3, #1
 80076bc:	b29a      	uxth	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80076c2:	e02c      	b.n	800771e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d113      	bne.n	80076fa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	330c      	adds	r3, #12
 80076dc:	7812      	ldrb	r2, [r2, #0]
 80076de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80076f8:	e011      	b.n	800771e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076fa:	f7fa fdab 	bl	8002254 <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	429a      	cmp	r2, r3
 8007708:	d803      	bhi.n	8007712 <HAL_SPI_Transmit+0x204>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007710:	d102      	bne.n	8007718 <HAL_SPI_Transmit+0x20a>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d102      	bne.n	800771e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800771c:	e026      	b.n	800776c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007722:	b29b      	uxth	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1cd      	bne.n	80076c4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f001 f8cb 	bl	80088c8 <SPI_EndRxTxTransaction>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d002      	beq.n	800773e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2220      	movs	r2, #32
 800773c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10a      	bne.n	800775c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007746:	2300      	movs	r3, #0
 8007748:	613b      	str	r3, [r7, #16]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	613b      	str	r3, [r7, #16]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	613b      	str	r3, [r7, #16]
 800775a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	77fb      	strb	r3, [r7, #31]
 8007768:	e000      	b.n	800776c <HAL_SPI_Transmit+0x25e>
  }

error:
 800776a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800777c:	7ffb      	ldrb	r3, [r7, #31]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3720      	adds	r7, #32
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b088      	sub	sp, #32
 800778a:	af02      	add	r7, sp, #8
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	603b      	str	r3, [r7, #0]
 8007792:	4613      	mov	r3, r2
 8007794:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077a2:	d112      	bne.n	80077ca <HAL_SPI_Receive+0x44>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10e      	bne.n	80077ca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2204      	movs	r2, #4
 80077b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80077b4:	88fa      	ldrh	r2, [r7, #6]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	4613      	mov	r3, r2
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	68b9      	ldr	r1, [r7, #8]
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 f8f1 	bl	80079a8 <HAL_SPI_TransmitReceive>
 80077c6:	4603      	mov	r3, r0
 80077c8:	e0ea      	b.n	80079a0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d101      	bne.n	80077d8 <HAL_SPI_Receive+0x52>
 80077d4:	2302      	movs	r3, #2
 80077d6:	e0e3      	b.n	80079a0 <HAL_SPI_Receive+0x21a>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077e0:	f7fa fd38 	bl	8002254 <HAL_GetTick>
 80077e4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d002      	beq.n	80077f8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80077f2:	2302      	movs	r3, #2
 80077f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077f6:	e0ca      	b.n	800798e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <HAL_SPI_Receive+0x7e>
 80077fe:	88fb      	ldrh	r3, [r7, #6]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d102      	bne.n	800780a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007808:	e0c1      	b.n	800798e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2204      	movs	r2, #4
 800780e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	88fa      	ldrh	r2, [r7, #6]
 8007822:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	88fa      	ldrh	r2, [r7, #6]
 8007828:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007850:	d10f      	bne.n	8007872 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007860:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007870:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800787c:	2b40      	cmp	r3, #64	@ 0x40
 800787e:	d007      	beq.n	8007890 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800788e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d162      	bne.n	800795e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007898:	e02e      	b.n	80078f8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d115      	bne.n	80078d4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f103 020c 	add.w	r2, r3, #12
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b4:	7812      	ldrb	r2, [r2, #0]
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078be:	1c5a      	adds	r2, r3, #1
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	3b01      	subs	r3, #1
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80078d2:	e011      	b.n	80078f8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078d4:	f7fa fcbe 	bl	8002254 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d803      	bhi.n	80078ec <HAL_SPI_Receive+0x166>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ea:	d102      	bne.n	80078f2 <HAL_SPI_Receive+0x16c>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d102      	bne.n	80078f8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80078f6:	e04a      	b.n	800798e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1cb      	bne.n	800789a <HAL_SPI_Receive+0x114>
 8007902:	e031      	b.n	8007968 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b01      	cmp	r3, #1
 8007910:	d113      	bne.n	800793a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800791c:	b292      	uxth	r2, r2
 800791e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007924:	1c9a      	adds	r2, r3, #2
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800792e:	b29b      	uxth	r3, r3
 8007930:	3b01      	subs	r3, #1
 8007932:	b29a      	uxth	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007938:	e011      	b.n	800795e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800793a:	f7fa fc8b 	bl	8002254 <HAL_GetTick>
 800793e:	4602      	mov	r2, r0
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	429a      	cmp	r2, r3
 8007948:	d803      	bhi.n	8007952 <HAL_SPI_Receive+0x1cc>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007950:	d102      	bne.n	8007958 <HAL_SPI_Receive+0x1d2>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d102      	bne.n	800795e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800795c:	e017      	b.n	800798e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007962:	b29b      	uxth	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1cd      	bne.n	8007904 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 ff45 	bl	80087fc <SPI_EndRxTransaction>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2220      	movs	r2, #32
 800797c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007982:	2b00      	cmp	r3, #0
 8007984:	d002      	beq.n	800798c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	75fb      	strb	r3, [r7, #23]
 800798a:	e000      	b.n	800798e <HAL_SPI_Receive+0x208>
  }

error :
 800798c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800799e:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08c      	sub	sp, #48	@ 0x30
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80079b6:	2301      	movs	r3, #1
 80079b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d101      	bne.n	80079ce <HAL_SPI_TransmitReceive+0x26>
 80079ca:	2302      	movs	r3, #2
 80079cc:	e18a      	b.n	8007ce4 <HAL_SPI_TransmitReceive+0x33c>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079d6:	f7fa fc3d 	bl	8002254 <HAL_GetTick>
 80079da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80079ec:	887b      	ldrh	r3, [r7, #2]
 80079ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80079f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d00f      	beq.n	8007a18 <HAL_SPI_TransmitReceive+0x70>
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079fe:	d107      	bne.n	8007a10 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d103      	bne.n	8007a10 <HAL_SPI_TransmitReceive+0x68>
 8007a08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a0c:	2b04      	cmp	r3, #4
 8007a0e:	d003      	beq.n	8007a18 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007a10:	2302      	movs	r3, #2
 8007a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007a16:	e15b      	b.n	8007cd0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d005      	beq.n	8007a2a <HAL_SPI_TransmitReceive+0x82>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <HAL_SPI_TransmitReceive+0x82>
 8007a24:	887b      	ldrh	r3, [r7, #2]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d103      	bne.n	8007a32 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007a30:	e14e      	b.n	8007cd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b04      	cmp	r3, #4
 8007a3c:	d003      	beq.n	8007a46 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2205      	movs	r2, #5
 8007a42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	887a      	ldrh	r2, [r7, #2]
 8007a56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	887a      	ldrh	r2, [r7, #2]
 8007a5c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	887a      	ldrh	r2, [r7, #2]
 8007a68:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	887a      	ldrh	r2, [r7, #2]
 8007a6e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a86:	2b40      	cmp	r3, #64	@ 0x40
 8007a88:	d007      	beq.n	8007a9a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007aa2:	d178      	bne.n	8007b96 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <HAL_SPI_TransmitReceive+0x10a>
 8007aac:	8b7b      	ldrh	r3, [r7, #26]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d166      	bne.n	8007b80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab6:	881a      	ldrh	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac2:	1c9a      	adds	r2, r3, #2
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ad6:	e053      	b.n	8007b80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d11b      	bne.n	8007b1e <HAL_SPI_TransmitReceive+0x176>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d016      	beq.n	8007b1e <HAL_SPI_TransmitReceive+0x176>
 8007af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d113      	bne.n	8007b1e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007afa:	881a      	ldrh	r2, [r3, #0]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b06:	1c9a      	adds	r2, r3, #2
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	3b01      	subs	r3, #1
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d119      	bne.n	8007b60 <HAL_SPI_TransmitReceive+0x1b8>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d014      	beq.n	8007b60 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68da      	ldr	r2, [r3, #12]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b40:	b292      	uxth	r2, r2
 8007b42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b48:	1c9a      	adds	r2, r3, #2
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	3b01      	subs	r3, #1
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b60:	f7fa fb78 	bl	8002254 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d807      	bhi.n	8007b80 <HAL_SPI_TransmitReceive+0x1d8>
 8007b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b76:	d003      	beq.n	8007b80 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007b7e:	e0a7      	b.n	8007cd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1a6      	bne.n	8007ad8 <HAL_SPI_TransmitReceive+0x130>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1a1      	bne.n	8007ad8 <HAL_SPI_TransmitReceive+0x130>
 8007b94:	e07c      	b.n	8007c90 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d002      	beq.n	8007ba4 <HAL_SPI_TransmitReceive+0x1fc>
 8007b9e:	8b7b      	ldrh	r3, [r7, #26]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d16b      	bne.n	8007c7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	330c      	adds	r3, #12
 8007bae:	7812      	ldrb	r2, [r2, #0]
 8007bb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb6:	1c5a      	adds	r2, r3, #1
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bca:	e057      	b.n	8007c7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f003 0302 	and.w	r3, r3, #2
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d11c      	bne.n	8007c14 <HAL_SPI_TransmitReceive+0x26c>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d017      	beq.n	8007c14 <HAL_SPI_TransmitReceive+0x26c>
 8007be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d114      	bne.n	8007c14 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	330c      	adds	r3, #12
 8007bf4:	7812      	ldrb	r2, [r2, #0]
 8007bf6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d119      	bne.n	8007c56 <HAL_SPI_TransmitReceive+0x2ae>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d014      	beq.n	8007c56 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c36:	b2d2      	uxtb	r2, r2
 8007c38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c52:	2301      	movs	r3, #1
 8007c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c56:	f7fa fafd 	bl	8002254 <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d803      	bhi.n	8007c6e <HAL_SPI_TransmitReceive+0x2c6>
 8007c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6c:	d102      	bne.n	8007c74 <HAL_SPI_TransmitReceive+0x2cc>
 8007c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d103      	bne.n	8007c7c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007c7a:	e029      	b.n	8007cd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1a2      	bne.n	8007bcc <HAL_SPI_TransmitReceive+0x224>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d19d      	bne.n	8007bcc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c92:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f000 fe17 	bl	80088c8 <SPI_EndRxTxTransaction>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d006      	beq.n	8007cae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007cac:	e010      	b.n	8007cd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10b      	bne.n	8007cce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	617b      	str	r3, [r7, #20]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	617b      	str	r3, [r7, #20]
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	e000      	b.n	8007cd0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007cce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007ce0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3730      	adds	r7, #48	@ 0x30
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d101      	bne.n	8007d0c <HAL_SPI_Transmit_DMA+0x20>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e09b      	b.n	8007e44 <HAL_SPI_Transmit_DMA+0x158>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d002      	beq.n	8007d26 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007d20:	2302      	movs	r3, #2
 8007d22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d24:	e089      	b.n	8007e3a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <HAL_SPI_Transmit_DMA+0x46>
 8007d2c:	88fb      	ldrh	r3, [r7, #6]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d102      	bne.n	8007d38 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d36:	e080      	b.n	8007e3a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2203      	movs	r2, #3
 8007d3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	88fa      	ldrh	r2, [r7, #6]
 8007d50:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	88fa      	ldrh	r2, [r7, #6]
 8007d56:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d7e:	d10f      	bne.n	8007da0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007da4:	4a29      	ldr	r2, [pc, #164]	@ (8007e4c <HAL_SPI_Transmit_DMA+0x160>)
 8007da6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dac:	4a28      	ldr	r2, [pc, #160]	@ (8007e50 <HAL_SPI_Transmit_DMA+0x164>)
 8007dae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007db4:	4a27      	ldr	r2, [pc, #156]	@ (8007e54 <HAL_SPI_Transmit_DMA+0x168>)
 8007db6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc8:	4619      	mov	r1, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	330c      	adds	r3, #12
 8007dd0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dd6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007dd8:	f7fb fcca 	bl	8003770 <HAL_DMA_Start_IT>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00c      	beq.n	8007dfc <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de6:	f043 0210 	orr.w	r2, r3, #16
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8007dfa:	e01e      	b.n	8007e3a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e06:	2b40      	cmp	r3, #64	@ 0x40
 8007e08:	d007      	beq.n	8007e1a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e18:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f042 0220 	orr.w	r2, r2, #32
 8007e28:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f042 0202 	orr.w	r2, r2, #2
 8007e38:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	08008631 	.word	0x08008631
 8007e50:	08008451 	.word	0x08008451
 8007e54:	08008685 	.word	0x08008685

08007e58 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	4613      	mov	r3, r2
 8007e64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d110      	bne.n	8007e94 <HAL_SPI_Receive_DMA+0x3c>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e7a:	d10b      	bne.n	8007e94 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2204      	movs	r2, #4
 8007e80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007e84:	88fb      	ldrh	r3, [r7, #6]
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	68b9      	ldr	r1, [r7, #8]
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 f8ac 	bl	8007fe8 <HAL_SPI_TransmitReceive_DMA>
 8007e90:	4603      	mov	r3, r0
 8007e92:	e09f      	b.n	8007fd4 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d101      	bne.n	8007ea2 <HAL_SPI_Receive_DMA+0x4a>
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	e098      	b.n	8007fd4 <HAL_SPI_Receive_DMA+0x17c>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d002      	beq.n	8007ebc <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007eba:	e086      	b.n	8007fca <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d002      	beq.n	8007ec8 <HAL_SPI_Receive_DMA+0x70>
 8007ec2:	88fb      	ldrh	r3, [r7, #6]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d102      	bne.n	8007ece <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ecc:	e07d      	b.n	8007fca <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2204      	movs	r2, #4
 8007ed2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	88fa      	ldrh	r2, [r7, #6]
 8007ee6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	88fa      	ldrh	r2, [r7, #6]
 8007eec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f0e:	d10f      	bne.n	8007f30 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007f2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f34:	4a29      	ldr	r2, [pc, #164]	@ (8007fdc <HAL_SPI_Receive_DMA+0x184>)
 8007f36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f3c:	4a28      	ldr	r2, [pc, #160]	@ (8007fe0 <HAL_SPI_Receive_DMA+0x188>)
 8007f3e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f44:	4a27      	ldr	r2, [pc, #156]	@ (8007fe4 <HAL_SPI_Receive_DMA+0x18c>)
 8007f46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	330c      	adds	r3, #12
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f60:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f66:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007f68:	f7fb fc02 	bl	8003770 <HAL_DMA_Start_IT>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00c      	beq.n	8007f8c <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f76:	f043 0210 	orr.w	r2, r3, #16
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8007f8a:	e01e      	b.n	8007fca <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f96:	2b40      	cmp	r3, #64	@ 0x40
 8007f98:	d007      	beq.n	8007faa <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fa8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f042 0220 	orr.w	r2, r2, #32
 8007fb8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f042 0201 	orr.w	r2, r2, #1
 8007fc8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3718      	adds	r7, #24
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	0800864d 	.word	0x0800864d
 8007fe0:	080084f9 	.word	0x080084f9
 8007fe4:	08008685 	.word	0x08008685

08007fe8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008000:	2b01      	cmp	r3, #1
 8008002:	d101      	bne.n	8008008 <HAL_SPI_TransmitReceive_DMA+0x20>
 8008004:	2302      	movs	r3, #2
 8008006:	e0e3      	b.n	80081d0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008016:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800801e:	7dbb      	ldrb	r3, [r7, #22]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d00d      	beq.n	8008040 <HAL_SPI_TransmitReceive_DMA+0x58>
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800802a:	d106      	bne.n	800803a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d102      	bne.n	800803a <HAL_SPI_TransmitReceive_DMA+0x52>
 8008034:	7dbb      	ldrb	r3, [r7, #22]
 8008036:	2b04      	cmp	r3, #4
 8008038:	d002      	beq.n	8008040 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800803a:	2302      	movs	r3, #2
 800803c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800803e:	e0c2      	b.n	80081c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d005      	beq.n	8008052 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d002      	beq.n	8008052 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800804c:	887b      	ldrh	r3, [r7, #2]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d102      	bne.n	8008058 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008056:	e0b6      	b.n	80081c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b04      	cmp	r3, #4
 8008062:	d003      	beq.n	800806c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2205      	movs	r2, #5
 8008068:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	887a      	ldrh	r2, [r7, #2]
 800807c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	887a      	ldrh	r2, [r7, #2]
 8008082:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	887a      	ldrh	r2, [r7, #2]
 800808e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	887a      	ldrh	r2, [r7, #2]
 8008094:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d108      	bne.n	80080c0 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080b2:	4a49      	ldr	r2, [pc, #292]	@ (80081d8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80080b4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080ba:	4a48      	ldr	r2, [pc, #288]	@ (80081dc <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80080bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80080be:	e007      	b.n	80080d0 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080c4:	4a46      	ldr	r2, [pc, #280]	@ (80081e0 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80080c6:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080cc:	4a45      	ldr	r2, [pc, #276]	@ (80081e4 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80080ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080d4:	4a44      	ldr	r2, [pc, #272]	@ (80081e8 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80080d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080dc:	2200      	movs	r2, #0
 80080de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	330c      	adds	r3, #12
 80080ea:	4619      	mov	r1, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80080f8:	f7fb fb3a 	bl	8003770 <HAL_DMA_Start_IT>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00c      	beq.n	800811c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008106:	f043 0210 	orr.w	r2, r3, #16
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 800811a:	e054      	b.n	80081c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f042 0201 	orr.w	r2, r2, #1
 800812a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008130:	2200      	movs	r2, #0
 8008132:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008138:	2200      	movs	r2, #0
 800813a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008140:	2200      	movs	r2, #0
 8008142:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008148:	2200      	movs	r2, #0
 800814a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008154:	4619      	mov	r1, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	330c      	adds	r3, #12
 800815c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008162:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008164:	f7fb fb04 	bl	8003770 <HAL_DMA_Start_IT>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00c      	beq.n	8008188 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008172:	f043 0210 	orr.w	r2, r3, #16
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8008186:	e01e      	b.n	80081c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008192:	2b40      	cmp	r3, #64	@ 0x40
 8008194:	d007      	beq.n	80081a6 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081a4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f042 0220 	orr.w	r2, r2, #32
 80081b4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f042 0202 	orr.w	r2, r2, #2
 80081c4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	0800864d 	.word	0x0800864d
 80081dc:	080084f9 	.word	0x080084f9
 80081e0:	08008669 	.word	0x08008669
 80081e4:	080085a1 	.word	0x080085a1
 80081e8:	08008685 	.word	0x08008685

080081ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b088      	sub	sp, #32
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	099b      	lsrs	r3, r3, #6
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10f      	bne.n	8008230 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00a      	beq.n	8008230 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	099b      	lsrs	r3, r3, #6
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	2b00      	cmp	r3, #0
 8008224:	d004      	beq.n	8008230 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	4798      	blx	r3
    return;
 800822e:	e0d7      	b.n	80083e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	085b      	lsrs	r3, r3, #1
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00a      	beq.n	8008252 <HAL_SPI_IRQHandler+0x66>
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	09db      	lsrs	r3, r3, #7
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	d004      	beq.n	8008252 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	4798      	blx	r3
    return;
 8008250:	e0c6      	b.n	80083e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	095b      	lsrs	r3, r3, #5
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10c      	bne.n	8008278 <HAL_SPI_IRQHandler+0x8c>
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	099b      	lsrs	r3, r3, #6
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b00      	cmp	r3, #0
 8008268:	d106      	bne.n	8008278 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	0a1b      	lsrs	r3, r3, #8
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 80b4 	beq.w	80083e0 <HAL_SPI_IRQHandler+0x1f4>
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	095b      	lsrs	r3, r3, #5
 800827c:	f003 0301 	and.w	r3, r3, #1
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 80ad 	beq.w	80083e0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	099b      	lsrs	r3, r3, #6
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d023      	beq.n	80082da <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b03      	cmp	r3, #3
 800829c:	d011      	beq.n	80082c2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082a2:	f043 0204 	orr.w	r2, r3, #4
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082aa:	2300      	movs	r3, #0
 80082ac:	617b      	str	r3, [r7, #20]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	617b      	str	r3, [r7, #20]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	617b      	str	r3, [r7, #20]
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	e00b      	b.n	80082da <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082c2:	2300      	movs	r3, #0
 80082c4:	613b      	str	r3, [r7, #16]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	613b      	str	r3, [r7, #16]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	613b      	str	r3, [r7, #16]
 80082d6:	693b      	ldr	r3, [r7, #16]
        return;
 80082d8:	e082      	b.n	80083e0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	095b      	lsrs	r3, r3, #5
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d014      	beq.n	8008310 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ea:	f043 0201 	orr.w	r2, r3, #1
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80082f2:	2300      	movs	r3, #0
 80082f4:	60fb      	str	r3, [r7, #12]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	60fb      	str	r3, [r7, #12]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	0a1b      	lsrs	r3, r3, #8
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00c      	beq.n	8008336 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008320:	f043 0208 	orr.w	r2, r3, #8
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008328:	2300      	movs	r3, #0
 800832a:	60bb      	str	r3, [r7, #8]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	60bb      	str	r3, [r7, #8]
 8008334:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800833a:	2b00      	cmp	r3, #0
 800833c:	d04f      	beq.n	80083de <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800834c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2201      	movs	r2, #1
 8008352:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	f003 0302 	and.w	r3, r3, #2
 800835c:	2b00      	cmp	r3, #0
 800835e:	d104      	bne.n	800836a <HAL_SPI_IRQHandler+0x17e>
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d034      	beq.n	80083d4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f022 0203 	bic.w	r2, r2, #3
 8008378:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800837e:	2b00      	cmp	r3, #0
 8008380:	d011      	beq.n	80083a6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008386:	4a18      	ldr	r2, [pc, #96]	@ (80083e8 <HAL_SPI_IRQHandler+0x1fc>)
 8008388:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800838e:	4618      	mov	r0, r3
 8008390:	f7fb fab6 	bl	8003900 <HAL_DMA_Abort_IT>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d005      	beq.n	80083a6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800839e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d016      	beq.n	80083dc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083b2:	4a0d      	ldr	r2, [pc, #52]	@ (80083e8 <HAL_SPI_IRQHandler+0x1fc>)
 80083b4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fb faa0 	bl	8003900 <HAL_DMA_Abort_IT>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80083d2:	e003      	b.n	80083dc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f831 	bl	800843c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80083da:	e000      	b.n	80083de <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80083dc:	bf00      	nop
    return;
 80083de:	bf00      	nop
  }
}
 80083e0:	3720      	adds	r7, #32
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	080086c5 	.word	0x080086c5

080083ec <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800845c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800845e:	f7f9 fef9 	bl	8002254 <HAL_GetTick>
 8008462:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800846e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008472:	d03b      	beq.n	80084ec <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f022 0220 	bic.w	r2, r2, #32
 8008482:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 0202 	bic.w	r2, r2, #2
 8008492:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	2164      	movs	r1, #100	@ 0x64
 8008498:	6978      	ldr	r0, [r7, #20]
 800849a:	f000 fa15 	bl	80088c8 <SPI_EndRxTxTransaction>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d005      	beq.n	80084b0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084a8:	f043 0220 	orr.w	r2, r3, #32
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10a      	bne.n	80084ce <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084b8:	2300      	movs	r3, #0
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2200      	movs	r2, #0
 80084d2:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80084e4:	6978      	ldr	r0, [r7, #20]
 80084e6:	f7ff ffa9 	bl	800843c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80084ea:	e002      	b.n	80084f2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80084ec:	6978      	ldr	r0, [r7, #20]
 80084ee:	f7f8 fb79 	bl	8000be4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80084f2:	3718      	adds	r7, #24
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008504:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008506:	f7f9 fea5 	bl	8002254 <HAL_GetTick>
 800850a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008516:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800851a:	d03b      	beq.n	8008594 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f022 0220 	bic.w	r2, r2, #32
 800852a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10d      	bne.n	8008550 <SPI_DMAReceiveCplt+0x58>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800853c:	d108      	bne.n	8008550 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 0203 	bic.w	r2, r2, #3
 800854c:	605a      	str	r2, [r3, #4]
 800854e:	e007      	b.n	8008560 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f022 0201 	bic.w	r2, r2, #1
 800855e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	2164      	movs	r1, #100	@ 0x64
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 f949 	bl	80087fc <SPI_EndRxTransaction>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2220      	movs	r2, #32
 8008574:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008588:	2b00      	cmp	r3, #0
 800858a:	d003      	beq.n	8008594 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f7ff ff55 	bl	800843c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008592:	e002      	b.n	800859a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f7f8 fb3d 	bl	8000c14 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ac:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085ae:	f7f9 fe51 	bl	8002254 <HAL_GetTick>
 80085b2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085c2:	d02f      	beq.n	8008624 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f022 0220 	bic.w	r2, r2, #32
 80085d2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	2164      	movs	r1, #100	@ 0x64
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 f975 	bl	80088c8 <SPI_EndRxTxTransaction>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d005      	beq.n	80085f0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085e8:	f043 0220 	orr.w	r2, r3, #32
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f022 0203 	bic.w	r2, r2, #3
 80085fe:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008618:	2b00      	cmp	r3, #0
 800861a:	d003      	beq.n	8008624 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f7ff ff0d 	bl	800843c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008622:	e002      	b.n	800862a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f7ff fee1 	bl	80083ec <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800863c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7ff fede 	bl	8008400 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008644:	bf00      	nop
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008658:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f7ff feda 	bl	8008414 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008660:	bf00      	nop
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008674:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f7ff fed6 	bl	8008428 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800867c:	bf00      	nop
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008690:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 0203 	bic.w	r2, r2, #3
 80086a0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086a6:	f043 0210 	orr.w	r2, r3, #16
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f7ff fec0 	bl	800843c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80086bc:	bf00      	nop
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f7ff feac 	bl	800843c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80086e4:	bf00      	nop
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	603b      	str	r3, [r7, #0]
 80086f8:	4613      	mov	r3, r2
 80086fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086fc:	f7f9 fdaa 	bl	8002254 <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008704:	1a9b      	subs	r3, r3, r2
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	4413      	add	r3, r2
 800870a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800870c:	f7f9 fda2 	bl	8002254 <HAL_GetTick>
 8008710:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008712:	4b39      	ldr	r3, [pc, #228]	@ (80087f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	015b      	lsls	r3, r3, #5
 8008718:	0d1b      	lsrs	r3, r3, #20
 800871a:	69fa      	ldr	r2, [r7, #28]
 800871c:	fb02 f303 	mul.w	r3, r2, r3
 8008720:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008722:	e054      	b.n	80087ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872a:	d050      	beq.n	80087ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800872c:	f7f9 fd92 	bl	8002254 <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	69fa      	ldr	r2, [r7, #28]
 8008738:	429a      	cmp	r2, r3
 800873a:	d902      	bls.n	8008742 <SPI_WaitFlagStateUntilTimeout+0x56>
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d13d      	bne.n	80087be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	685a      	ldr	r2, [r3, #4]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008750:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800875a:	d111      	bne.n	8008780 <SPI_WaitFlagStateUntilTimeout+0x94>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008764:	d004      	beq.n	8008770 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800876e:	d107      	bne.n	8008780 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800877e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008788:	d10f      	bne.n	80087aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80087a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e017      	b.n	80087ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80087c4:	2300      	movs	r3, #0
 80087c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	689a      	ldr	r2, [r3, #8]
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	4013      	ands	r3, r2
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	429a      	cmp	r2, r3
 80087dc:	bf0c      	ite	eq
 80087de:	2301      	moveq	r3, #1
 80087e0:	2300      	movne	r3, #0
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	461a      	mov	r2, r3
 80087e6:	79fb      	ldrb	r3, [r7, #7]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d19b      	bne.n	8008724 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3720      	adds	r7, #32
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	20000000 	.word	0x20000000

080087fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af02      	add	r7, sp, #8
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008810:	d111      	bne.n	8008836 <SPI_EndRxTransaction+0x3a>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800881a:	d004      	beq.n	8008826 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008824:	d107      	bne.n	8008836 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008834:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800883e:	d12a      	bne.n	8008896 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008848:	d012      	beq.n	8008870 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	2200      	movs	r2, #0
 8008852:	2180      	movs	r1, #128	@ 0x80
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f7ff ff49 	bl	80086ec <SPI_WaitFlagStateUntilTimeout>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d02d      	beq.n	80088bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008864:	f043 0220 	orr.w	r2, r3, #32
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e026      	b.n	80088be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2200      	movs	r2, #0
 8008878:	2101      	movs	r1, #1
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f7ff ff36 	bl	80086ec <SPI_WaitFlagStateUntilTimeout>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d01a      	beq.n	80088bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800888a:	f043 0220 	orr.w	r2, r3, #32
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e013      	b.n	80088be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2200      	movs	r2, #0
 800889e:	2101      	movs	r1, #1
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f7ff ff23 	bl	80086ec <SPI_WaitFlagStateUntilTimeout>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d007      	beq.n	80088bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088b0:	f043 0220 	orr.w	r2, r3, #32
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e000      	b.n	80088be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b088      	sub	sp, #32
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80088d4:	4b1b      	ldr	r3, [pc, #108]	@ (8008944 <SPI_EndRxTxTransaction+0x7c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a1b      	ldr	r2, [pc, #108]	@ (8008948 <SPI_EndRxTxTransaction+0x80>)
 80088da:	fba2 2303 	umull	r2, r3, r2, r3
 80088de:	0d5b      	lsrs	r3, r3, #21
 80088e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80088e4:	fb02 f303 	mul.w	r3, r2, r3
 80088e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80088f2:	d112      	bne.n	800891a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2200      	movs	r2, #0
 80088fc:	2180      	movs	r1, #128	@ 0x80
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7ff fef4 	bl	80086ec <SPI_WaitFlagStateUntilTimeout>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d016      	beq.n	8008938 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800890e:	f043 0220 	orr.w	r2, r3, #32
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e00f      	b.n	800893a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00a      	beq.n	8008936 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	3b01      	subs	r3, #1
 8008924:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008930:	2b80      	cmp	r3, #128	@ 0x80
 8008932:	d0f2      	beq.n	800891a <SPI_EndRxTxTransaction+0x52>
 8008934:	e000      	b.n	8008938 <SPI_EndRxTxTransaction+0x70>
        break;
 8008936:	bf00      	nop
  }

  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20000000 	.word	0x20000000
 8008948:	165e9f81 	.word	0x165e9f81

0800894c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e03f      	b.n	80089de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d106      	bne.n	8008978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7f9 fa6e 	bl	8001e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2224      	movs	r2, #36	@ 0x24
 800897c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68da      	ldr	r2, [r3, #12]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800898e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fd7b 	bl	800948c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	691a      	ldr	r2, [r3, #16]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	695a      	ldr	r2, [r3, #20]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68da      	ldr	r2, [r3, #12]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80089c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2220      	movs	r2, #32
 80089d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2220      	movs	r2, #32
 80089d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b08a      	sub	sp, #40	@ 0x28
 80089ea:	af02      	add	r7, sp, #8
 80089ec:	60f8      	str	r0, [r7, #12]
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	603b      	str	r3, [r7, #0]
 80089f2:	4613      	mov	r3, r2
 80089f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b20      	cmp	r3, #32
 8008a04:	d17c      	bne.n	8008b00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d002      	beq.n	8008a12 <HAL_UART_Transmit+0x2c>
 8008a0c:	88fb      	ldrh	r3, [r7, #6]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d101      	bne.n	8008a16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e075      	b.n	8008b02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d101      	bne.n	8008a24 <HAL_UART_Transmit+0x3e>
 8008a20:	2302      	movs	r3, #2
 8008a22:	e06e      	b.n	8008b02 <HAL_UART_Transmit+0x11c>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2221      	movs	r2, #33	@ 0x21
 8008a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a3a:	f7f9 fc0b 	bl	8002254 <HAL_GetTick>
 8008a3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	88fa      	ldrh	r2, [r7, #6]
 8008a44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	88fa      	ldrh	r2, [r7, #6]
 8008a4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a54:	d108      	bne.n	8008a68 <HAL_UART_Transmit+0x82>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d104      	bne.n	8008a68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	61bb      	str	r3, [r7, #24]
 8008a66:	e003      	b.n	8008a70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8008a78:	e02a      	b.n	8008ad0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2200      	movs	r2, #0
 8008a82:	2180      	movs	r1, #128	@ 0x80
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f000 faf9 	bl	800907c <UART_WaitOnFlagUntilTimeout>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e036      	b.n	8008b02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10b      	bne.n	8008ab2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	3302      	adds	r3, #2
 8008aae:	61bb      	str	r3, [r7, #24]
 8008ab0:	e007      	b.n	8008ac2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	781a      	ldrb	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1cf      	bne.n	8008a7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2140      	movs	r1, #64	@ 0x40
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 fac9 	bl	800907c <UART_WaitOnFlagUntilTimeout>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e006      	b.n	8008b02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2220      	movs	r2, #32
 8008af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8008afc:	2300      	movs	r3, #0
 8008afe:	e000      	b.n	8008b02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008b00:	2302      	movs	r3, #2
  }
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3720      	adds	r7, #32
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
	...

08008b0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b0ba      	sub	sp, #232	@ 0xe8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b42:	f003 030f 	and.w	r3, r3, #15
 8008b46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008b4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10f      	bne.n	8008b72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b56:	f003 0320 	and.w	r3, r3, #32
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d009      	beq.n	8008b72 <HAL_UART_IRQHandler+0x66>
 8008b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b62:	f003 0320 	and.w	r3, r3, #32
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d003      	beq.n	8008b72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fbd3 	bl	8009316 <UART_Receive_IT>
      return;
 8008b70:	e256      	b.n	8009020 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008b72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f000 80de 	beq.w	8008d38 <HAL_UART_IRQHandler+0x22c>
 8008b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d106      	bne.n	8008b96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b8c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 80d1 	beq.w	8008d38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b9a:	f003 0301 	and.w	r3, r3, #1
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00b      	beq.n	8008bba <HAL_UART_IRQHandler+0xae>
 8008ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d005      	beq.n	8008bba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb2:	f043 0201 	orr.w	r2, r3, #1
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bbe:	f003 0304 	and.w	r3, r3, #4
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00b      	beq.n	8008bde <HAL_UART_IRQHandler+0xd2>
 8008bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d005      	beq.n	8008bde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd6:	f043 0202 	orr.w	r2, r3, #2
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008be2:	f003 0302 	and.w	r3, r3, #2
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00b      	beq.n	8008c02 <HAL_UART_IRQHandler+0xf6>
 8008bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d005      	beq.n	8008c02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfa:	f043 0204 	orr.w	r2, r3, #4
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c06:	f003 0308 	and.w	r3, r3, #8
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d011      	beq.n	8008c32 <HAL_UART_IRQHandler+0x126>
 8008c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c12:	f003 0320 	and.w	r3, r3, #32
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d105      	bne.n	8008c26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d005      	beq.n	8008c32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c2a:	f043 0208 	orr.w	r2, r3, #8
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f000 81ed 	beq.w	8009016 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c40:	f003 0320 	and.w	r3, r3, #32
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d008      	beq.n	8008c5a <HAL_UART_IRQHandler+0x14e>
 8008c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c4c:	f003 0320 	and.w	r3, r3, #32
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fb5e 	bl	8009316 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	695b      	ldr	r3, [r3, #20]
 8008c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c64:	2b40      	cmp	r3, #64	@ 0x40
 8008c66:	bf0c      	ite	eq
 8008c68:	2301      	moveq	r3, #1
 8008c6a:	2300      	movne	r3, #0
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c76:	f003 0308 	and.w	r3, r3, #8
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d103      	bne.n	8008c86 <HAL_UART_IRQHandler+0x17a>
 8008c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d04f      	beq.n	8008d26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fa66 	bl	8009158 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c96:	2b40      	cmp	r3, #64	@ 0x40
 8008c98:	d141      	bne.n	8008d1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	3314      	adds	r3, #20
 8008ca0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ca8:	e853 3f00 	ldrex	r3, [r3]
 8008cac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008cb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	3314      	adds	r3, #20
 8008cc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008cc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008cca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008cd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008cd6:	e841 2300 	strex	r3, r2, [r1]
 8008cda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1d9      	bne.n	8008c9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d013      	beq.n	8008d16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf2:	4a7d      	ldr	r2, [pc, #500]	@ (8008ee8 <HAL_UART_IRQHandler+0x3dc>)
 8008cf4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fa fe00 	bl	8003900 <HAL_DMA_Abort_IT>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d016      	beq.n	8008d34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008d10:	4610      	mov	r0, r2
 8008d12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d14:	e00e      	b.n	8008d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f99a 	bl	8009050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d1c:	e00a      	b.n	8008d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f996 	bl	8009050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d24:	e006      	b.n	8008d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f992 	bl	8009050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8008d32:	e170      	b.n	8009016 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d34:	bf00      	nop
    return;
 8008d36:	e16e      	b.n	8009016 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	f040 814a 	bne.w	8008fd6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d46:	f003 0310 	and.w	r3, r3, #16
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f000 8143 	beq.w	8008fd6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d54:	f003 0310 	and.w	r3, r3, #16
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f000 813c 	beq.w	8008fd6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d5e:	2300      	movs	r3, #0
 8008d60:	60bb      	str	r3, [r7, #8]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	60bb      	str	r3, [r7, #8]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	60bb      	str	r3, [r7, #8]
 8008d72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7e:	2b40      	cmp	r3, #64	@ 0x40
 8008d80:	f040 80b4 	bne.w	8008eec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 8140 	beq.w	800901a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008d9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008da2:	429a      	cmp	r2, r3
 8008da4:	f080 8139 	bcs.w	800901a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008dae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dba:	f000 8088 	beq.w	8008ece <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	330c      	adds	r3, #12
 8008dc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008dcc:	e853 3f00 	ldrex	r3, [r3]
 8008dd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008dd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	330c      	adds	r3, #12
 8008de6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008dea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008dee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008df6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008dfa:	e841 2300 	strex	r3, r2, [r1]
 8008dfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1d9      	bne.n	8008dbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	3314      	adds	r3, #20
 8008e10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e14:	e853 3f00 	ldrex	r3, [r3]
 8008e18:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e1c:	f023 0301 	bic.w	r3, r3, #1
 8008e20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3314      	adds	r3, #20
 8008e2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e2e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e32:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e34:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e3a:	e841 2300 	strex	r3, r2, [r1]
 8008e3e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008e40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1e1      	bne.n	8008e0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3314      	adds	r3, #20
 8008e4c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e50:	e853 3f00 	ldrex	r3, [r3]
 8008e54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008e56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3314      	adds	r3, #20
 8008e66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008e6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008e70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008e78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e3      	bne.n	8008e46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2220      	movs	r2, #32
 8008e82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	330c      	adds	r3, #12
 8008e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e96:	e853 3f00 	ldrex	r3, [r3]
 8008e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e9e:	f023 0310 	bic.w	r3, r3, #16
 8008ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	330c      	adds	r3, #12
 8008eac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008eb0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008eb2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008eb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008eb8:	e841 2300 	strex	r3, r2, [r1]
 8008ebc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e3      	bne.n	8008e8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fa fca9 	bl	8003820 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	4619      	mov	r1, r3
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f8c0 	bl	8009064 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ee4:	e099      	b.n	800901a <HAL_UART_IRQHandler+0x50e>
 8008ee6:	bf00      	nop
 8008ee8:	0800921f 	.word	0x0800921f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	1ad3      	subs	r3, r2, r3
 8008ef8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f000 808b 	beq.w	800901e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 8086 	beq.w	800901e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	330c      	adds	r3, #12
 8008f18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f1c:	e853 3f00 	ldrex	r3, [r3]
 8008f20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	330c      	adds	r3, #12
 8008f32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008f36:	647a      	str	r2, [r7, #68]	@ 0x44
 8008f38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f3e:	e841 2300 	strex	r3, r2, [r1]
 8008f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1e3      	bne.n	8008f12 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	3314      	adds	r3, #20
 8008f50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f54:	e853 3f00 	ldrex	r3, [r3]
 8008f58:	623b      	str	r3, [r7, #32]
   return(result);
 8008f5a:	6a3b      	ldr	r3, [r7, #32]
 8008f5c:	f023 0301 	bic.w	r3, r3, #1
 8008f60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	3314      	adds	r3, #20
 8008f6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008f6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f76:	e841 2300 	strex	r3, r2, [r1]
 8008f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1e3      	bne.n	8008f4a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2220      	movs	r2, #32
 8008f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	330c      	adds	r3, #12
 8008f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	e853 3f00 	ldrex	r3, [r3]
 8008f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f023 0310 	bic.w	r3, r3, #16
 8008fa6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	330c      	adds	r3, #12
 8008fb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008fb4:	61fa      	str	r2, [r7, #28]
 8008fb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb8:	69b9      	ldr	r1, [r7, #24]
 8008fba:	69fa      	ldr	r2, [r7, #28]
 8008fbc:	e841 2300 	strex	r3, r2, [r1]
 8008fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1e3      	bne.n	8008f90 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008fc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f848 	bl	8009064 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008fd4:	e023      	b.n	800901e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d009      	beq.n	8008ff6 <HAL_UART_IRQHandler+0x4ea>
 8008fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d003      	beq.n	8008ff6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f929 	bl	8009246 <UART_Transmit_IT>
    return;
 8008ff4:	e014      	b.n	8009020 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00e      	beq.n	8009020 <HAL_UART_IRQHandler+0x514>
 8009002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800900a:	2b00      	cmp	r3, #0
 800900c:	d008      	beq.n	8009020 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f969 	bl	80092e6 <UART_EndTransmit_IT>
    return;
 8009014:	e004      	b.n	8009020 <HAL_UART_IRQHandler+0x514>
    return;
 8009016:	bf00      	nop
 8009018:	e002      	b.n	8009020 <HAL_UART_IRQHandler+0x514>
      return;
 800901a:	bf00      	nop
 800901c:	e000      	b.n	8009020 <HAL_UART_IRQHandler+0x514>
      return;
 800901e:	bf00      	nop
  }
}
 8009020:	37e8      	adds	r7, #232	@ 0xe8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop

08009028 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	460b      	mov	r3, r1
 800906e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b090      	sub	sp, #64	@ 0x40
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	603b      	str	r3, [r7, #0]
 8009088:	4613      	mov	r3, r2
 800908a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800908c:	e050      	b.n	8009130 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800908e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009094:	d04c      	beq.n	8009130 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009098:	2b00      	cmp	r3, #0
 800909a:	d007      	beq.n	80090ac <UART_WaitOnFlagUntilTimeout+0x30>
 800909c:	f7f9 f8da 	bl	8002254 <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d241      	bcs.n	8009130 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	330c      	adds	r3, #12
 80090b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b6:	e853 3f00 	ldrex	r3, [r3]
 80090ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090be:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80090c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	330c      	adds	r3, #12
 80090ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80090cc:	637a      	str	r2, [r7, #52]	@ 0x34
 80090ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80090d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80090d4:	e841 2300 	strex	r3, r2, [r1]
 80090d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80090da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1e5      	bne.n	80090ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3314      	adds	r3, #20
 80090e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	e853 3f00 	ldrex	r3, [r3]
 80090ee:	613b      	str	r3, [r7, #16]
   return(result);
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f023 0301 	bic.w	r3, r3, #1
 80090f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3314      	adds	r3, #20
 80090fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009100:	623a      	str	r2, [r7, #32]
 8009102:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009104:	69f9      	ldr	r1, [r7, #28]
 8009106:	6a3a      	ldr	r2, [r7, #32]
 8009108:	e841 2300 	strex	r3, r2, [r1]
 800910c:	61bb      	str	r3, [r7, #24]
   return(result);
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e5      	bne.n	80090e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2220      	movs	r2, #32
 8009118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2220      	movs	r2, #32
 8009120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	e00f      	b.n	8009150 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	4013      	ands	r3, r2
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	429a      	cmp	r2, r3
 800913e:	bf0c      	ite	eq
 8009140:	2301      	moveq	r3, #1
 8009142:	2300      	movne	r3, #0
 8009144:	b2db      	uxtb	r3, r3
 8009146:	461a      	mov	r2, r3
 8009148:	79fb      	ldrb	r3, [r7, #7]
 800914a:	429a      	cmp	r2, r3
 800914c:	d09f      	beq.n	800908e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3740      	adds	r7, #64	@ 0x40
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009158:	b480      	push	{r7}
 800915a:	b095      	sub	sp, #84	@ 0x54
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	330c      	adds	r3, #12
 8009166:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800916a:	e853 3f00 	ldrex	r3, [r3]
 800916e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009172:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009176:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	330c      	adds	r3, #12
 800917e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009180:	643a      	str	r2, [r7, #64]	@ 0x40
 8009182:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009184:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009186:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009188:	e841 2300 	strex	r3, r2, [r1]
 800918c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800918e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1e5      	bne.n	8009160 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	3314      	adds	r3, #20
 800919a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	e853 3f00 	ldrex	r3, [r3]
 80091a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	f023 0301 	bic.w	r3, r3, #1
 80091aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	3314      	adds	r3, #20
 80091b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091bc:	e841 2300 	strex	r3, r2, [r1]
 80091c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e5      	bne.n	8009194 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d119      	bne.n	8009204 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	330c      	adds	r3, #12
 80091d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	e853 3f00 	ldrex	r3, [r3]
 80091de:	60bb      	str	r3, [r7, #8]
   return(result);
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	f023 0310 	bic.w	r3, r3, #16
 80091e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	330c      	adds	r3, #12
 80091ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091f0:	61ba      	str	r2, [r7, #24]
 80091f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f4:	6979      	ldr	r1, [r7, #20]
 80091f6:	69ba      	ldr	r2, [r7, #24]
 80091f8:	e841 2300 	strex	r3, r2, [r1]
 80091fc:	613b      	str	r3, [r7, #16]
   return(result);
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1e5      	bne.n	80091d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2220      	movs	r2, #32
 8009208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009212:	bf00      	nop
 8009214:	3754      	adds	r7, #84	@ 0x54
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b084      	sub	sp, #16
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800922a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f7ff ff09 	bl	8009050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800923e:	bf00      	nop
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009246:	b480      	push	{r7}
 8009248:	b085      	sub	sp, #20
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009254:	b2db      	uxtb	r3, r3
 8009256:	2b21      	cmp	r3, #33	@ 0x21
 8009258:	d13e      	bne.n	80092d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009262:	d114      	bne.n	800928e <UART_Transmit_IT+0x48>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d110      	bne.n	800928e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a1b      	ldr	r3, [r3, #32]
 8009270:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	881b      	ldrh	r3, [r3, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009280:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	1c9a      	adds	r2, r3, #2
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	621a      	str	r2, [r3, #32]
 800928c:	e008      	b.n	80092a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	1c59      	adds	r1, r3, #1
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	6211      	str	r1, [r2, #32]
 8009298:	781a      	ldrb	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	3b01      	subs	r3, #1
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	4619      	mov	r1, r3
 80092ae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10f      	bne.n	80092d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68da      	ldr	r2, [r3, #12]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80092c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68da      	ldr	r2, [r3, #12]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	e000      	b.n	80092da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80092d8:	2302      	movs	r3, #2
  }
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b082      	sub	sp, #8
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68da      	ldr	r2, [r3, #12]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2220      	movs	r2, #32
 8009302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7ff fe8e 	bl	8009028 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b08c      	sub	sp, #48	@ 0x30
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009324:	b2db      	uxtb	r3, r3
 8009326:	2b22      	cmp	r3, #34	@ 0x22
 8009328:	f040 80ab 	bne.w	8009482 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009334:	d117      	bne.n	8009366 <UART_Receive_IT+0x50>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d113      	bne.n	8009366 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800933e:	2300      	movs	r3, #0
 8009340:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009346:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	b29b      	uxth	r3, r3
 8009350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009354:	b29a      	uxth	r2, r3
 8009356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009358:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800935e:	1c9a      	adds	r2, r3, #2
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	629a      	str	r2, [r3, #40]	@ 0x28
 8009364:	e026      	b.n	80093b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800936a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800936c:	2300      	movs	r3, #0
 800936e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009378:	d007      	beq.n	800938a <UART_Receive_IT+0x74>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10a      	bne.n	8009398 <UART_Receive_IT+0x82>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d106      	bne.n	8009398 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	b2da      	uxtb	r2, r3
 8009392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009394:	701a      	strb	r2, [r3, #0]
 8009396:	e008      	b.n	80093aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ae:	1c5a      	adds	r2, r3, #1
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	3b01      	subs	r3, #1
 80093bc:	b29b      	uxth	r3, r3
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	4619      	mov	r1, r3
 80093c2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d15a      	bne.n	800947e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68da      	ldr	r2, [r3, #12]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f022 0220 	bic.w	r2, r2, #32
 80093d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68da      	ldr	r2, [r3, #12]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80093e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	695a      	ldr	r2, [r3, #20]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f022 0201 	bic.w	r2, r2, #1
 80093f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2220      	movs	r2, #32
 80093fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009404:	2b01      	cmp	r3, #1
 8009406:	d135      	bne.n	8009474 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	330c      	adds	r3, #12
 8009414:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	e853 3f00 	ldrex	r3, [r3]
 800941c:	613b      	str	r3, [r7, #16]
   return(result);
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	f023 0310 	bic.w	r3, r3, #16
 8009424:	627b      	str	r3, [r7, #36]	@ 0x24
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	330c      	adds	r3, #12
 800942c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800942e:	623a      	str	r2, [r7, #32]
 8009430:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009432:	69f9      	ldr	r1, [r7, #28]
 8009434:	6a3a      	ldr	r2, [r7, #32]
 8009436:	e841 2300 	strex	r3, r2, [r1]
 800943a:	61bb      	str	r3, [r7, #24]
   return(result);
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1e5      	bne.n	800940e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0310 	and.w	r3, r3, #16
 800944c:	2b10      	cmp	r3, #16
 800944e:	d10a      	bne.n	8009466 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009450:	2300      	movs	r3, #0
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800946a:	4619      	mov	r1, r3
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f7ff fdf9 	bl	8009064 <HAL_UARTEx_RxEventCallback>
 8009472:	e002      	b.n	800947a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff fde1 	bl	800903c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	e002      	b.n	8009484 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	e000      	b.n	8009484 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009482:	2302      	movs	r3, #2
  }
}
 8009484:	4618      	mov	r0, r3
 8009486:	3730      	adds	r7, #48	@ 0x30
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800948c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009490:	b0c0      	sub	sp, #256	@ 0x100
 8009492:	af00      	add	r7, sp, #0
 8009494:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80094a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094a8:	68d9      	ldr	r1, [r3, #12]
 80094aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	ea40 0301 	orr.w	r3, r0, r1
 80094b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80094b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094ba:	689a      	ldr	r2, [r3, #8]
 80094bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	431a      	orrs	r2, r3
 80094c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	431a      	orrs	r2, r3
 80094cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094d0:	69db      	ldr	r3, [r3, #28]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80094d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80094e4:	f021 010c 	bic.w	r1, r1, #12
 80094e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80094f2:	430b      	orrs	r3, r1
 80094f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80094f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009506:	6999      	ldr	r1, [r3, #24]
 8009508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	ea40 0301 	orr.w	r3, r0, r1
 8009512:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8009514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	4b95      	ldr	r3, [pc, #596]	@ (8009770 <UART_SetConfig+0x2e4>)
 800951c:	429a      	cmp	r2, r3
 800951e:	d011      	beq.n	8009544 <UART_SetConfig+0xb8>
 8009520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	4b93      	ldr	r3, [pc, #588]	@ (8009774 <UART_SetConfig+0x2e8>)
 8009528:	429a      	cmp	r2, r3
 800952a:	d00b      	beq.n	8009544 <UART_SetConfig+0xb8>
 800952c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	4b91      	ldr	r3, [pc, #580]	@ (8009778 <UART_SetConfig+0x2ec>)
 8009534:	429a      	cmp	r2, r3
 8009536:	d005      	beq.n	8009544 <UART_SetConfig+0xb8>
 8009538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	4b8f      	ldr	r3, [pc, #572]	@ (800977c <UART_SetConfig+0x2f0>)
 8009540:	429a      	cmp	r2, r3
 8009542:	d104      	bne.n	800954e <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009544:	f7fd fcc2 	bl	8006ecc <HAL_RCC_GetPCLK2Freq>
 8009548:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800954c:	e003      	b.n	8009556 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800954e:	f7fd fca9 	bl	8006ea4 <HAL_RCC_GetPCLK1Freq>
 8009552:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800955a:	69db      	ldr	r3, [r3, #28]
 800955c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009560:	f040 8110 	bne.w	8009784 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009568:	2200      	movs	r2, #0
 800956a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800956e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009572:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009576:	4622      	mov	r2, r4
 8009578:	462b      	mov	r3, r5
 800957a:	1891      	adds	r1, r2, r2
 800957c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800957e:	415b      	adcs	r3, r3
 8009580:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009582:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009586:	4621      	mov	r1, r4
 8009588:	eb12 0801 	adds.w	r8, r2, r1
 800958c:	4629      	mov	r1, r5
 800958e:	eb43 0901 	adc.w	r9, r3, r1
 8009592:	f04f 0200 	mov.w	r2, #0
 8009596:	f04f 0300 	mov.w	r3, #0
 800959a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800959e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80095a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80095a6:	4690      	mov	r8, r2
 80095a8:	4699      	mov	r9, r3
 80095aa:	4623      	mov	r3, r4
 80095ac:	eb18 0303 	adds.w	r3, r8, r3
 80095b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80095b4:	462b      	mov	r3, r5
 80095b6:	eb49 0303 	adc.w	r3, r9, r3
 80095ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80095be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80095ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80095ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80095d2:	460b      	mov	r3, r1
 80095d4:	18db      	adds	r3, r3, r3
 80095d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80095d8:	4613      	mov	r3, r2
 80095da:	eb42 0303 	adc.w	r3, r2, r3
 80095de:	657b      	str	r3, [r7, #84]	@ 0x54
 80095e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80095e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80095e8:	f7f6 fe72 	bl	80002d0 <__aeabi_uldivmod>
 80095ec:	4602      	mov	r2, r0
 80095ee:	460b      	mov	r3, r1
 80095f0:	4b63      	ldr	r3, [pc, #396]	@ (8009780 <UART_SetConfig+0x2f4>)
 80095f2:	fba3 2302 	umull	r2, r3, r3, r2
 80095f6:	095b      	lsrs	r3, r3, #5
 80095f8:	011c      	lsls	r4, r3, #4
 80095fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095fe:	2200      	movs	r2, #0
 8009600:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009604:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009608:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800960c:	4642      	mov	r2, r8
 800960e:	464b      	mov	r3, r9
 8009610:	1891      	adds	r1, r2, r2
 8009612:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009614:	415b      	adcs	r3, r3
 8009616:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009618:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800961c:	4641      	mov	r1, r8
 800961e:	eb12 0a01 	adds.w	sl, r2, r1
 8009622:	4649      	mov	r1, r9
 8009624:	eb43 0b01 	adc.w	fp, r3, r1
 8009628:	f04f 0200 	mov.w	r2, #0
 800962c:	f04f 0300 	mov.w	r3, #0
 8009630:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009634:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009638:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800963c:	4692      	mov	sl, r2
 800963e:	469b      	mov	fp, r3
 8009640:	4643      	mov	r3, r8
 8009642:	eb1a 0303 	adds.w	r3, sl, r3
 8009646:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800964a:	464b      	mov	r3, r9
 800964c:	eb4b 0303 	adc.w	r3, fp, r3
 8009650:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009660:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009664:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009668:	460b      	mov	r3, r1
 800966a:	18db      	adds	r3, r3, r3
 800966c:	643b      	str	r3, [r7, #64]	@ 0x40
 800966e:	4613      	mov	r3, r2
 8009670:	eb42 0303 	adc.w	r3, r2, r3
 8009674:	647b      	str	r3, [r7, #68]	@ 0x44
 8009676:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800967a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800967e:	f7f6 fe27 	bl	80002d0 <__aeabi_uldivmod>
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	4611      	mov	r1, r2
 8009688:	4b3d      	ldr	r3, [pc, #244]	@ (8009780 <UART_SetConfig+0x2f4>)
 800968a:	fba3 2301 	umull	r2, r3, r3, r1
 800968e:	095b      	lsrs	r3, r3, #5
 8009690:	2264      	movs	r2, #100	@ 0x64
 8009692:	fb02 f303 	mul.w	r3, r2, r3
 8009696:	1acb      	subs	r3, r1, r3
 8009698:	00db      	lsls	r3, r3, #3
 800969a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800969e:	4b38      	ldr	r3, [pc, #224]	@ (8009780 <UART_SetConfig+0x2f4>)
 80096a0:	fba3 2302 	umull	r2, r3, r3, r2
 80096a4:	095b      	lsrs	r3, r3, #5
 80096a6:	005b      	lsls	r3, r3, #1
 80096a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80096ac:	441c      	add	r4, r3
 80096ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096b2:	2200      	movs	r2, #0
 80096b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80096b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80096bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80096c0:	4642      	mov	r2, r8
 80096c2:	464b      	mov	r3, r9
 80096c4:	1891      	adds	r1, r2, r2
 80096c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80096c8:	415b      	adcs	r3, r3
 80096ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80096d0:	4641      	mov	r1, r8
 80096d2:	1851      	adds	r1, r2, r1
 80096d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80096d6:	4649      	mov	r1, r9
 80096d8:	414b      	adcs	r3, r1
 80096da:	637b      	str	r3, [r7, #52]	@ 0x34
 80096dc:	f04f 0200 	mov.w	r2, #0
 80096e0:	f04f 0300 	mov.w	r3, #0
 80096e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80096e8:	4659      	mov	r1, fp
 80096ea:	00cb      	lsls	r3, r1, #3
 80096ec:	4651      	mov	r1, sl
 80096ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096f2:	4651      	mov	r1, sl
 80096f4:	00ca      	lsls	r2, r1, #3
 80096f6:	4610      	mov	r0, r2
 80096f8:	4619      	mov	r1, r3
 80096fa:	4603      	mov	r3, r0
 80096fc:	4642      	mov	r2, r8
 80096fe:	189b      	adds	r3, r3, r2
 8009700:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009704:	464b      	mov	r3, r9
 8009706:	460a      	mov	r2, r1
 8009708:	eb42 0303 	adc.w	r3, r2, r3
 800970c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800971c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009720:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009724:	460b      	mov	r3, r1
 8009726:	18db      	adds	r3, r3, r3
 8009728:	62bb      	str	r3, [r7, #40]	@ 0x28
 800972a:	4613      	mov	r3, r2
 800972c:	eb42 0303 	adc.w	r3, r2, r3
 8009730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009732:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009736:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800973a:	f7f6 fdc9 	bl	80002d0 <__aeabi_uldivmod>
 800973e:	4602      	mov	r2, r0
 8009740:	460b      	mov	r3, r1
 8009742:	4b0f      	ldr	r3, [pc, #60]	@ (8009780 <UART_SetConfig+0x2f4>)
 8009744:	fba3 1302 	umull	r1, r3, r3, r2
 8009748:	095b      	lsrs	r3, r3, #5
 800974a:	2164      	movs	r1, #100	@ 0x64
 800974c:	fb01 f303 	mul.w	r3, r1, r3
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	00db      	lsls	r3, r3, #3
 8009754:	3332      	adds	r3, #50	@ 0x32
 8009756:	4a0a      	ldr	r2, [pc, #40]	@ (8009780 <UART_SetConfig+0x2f4>)
 8009758:	fba2 2303 	umull	r2, r3, r2, r3
 800975c:	095b      	lsrs	r3, r3, #5
 800975e:	f003 0207 	and.w	r2, r3, #7
 8009762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4422      	add	r2, r4
 800976a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800976c:	e10a      	b.n	8009984 <UART_SetConfig+0x4f8>
 800976e:	bf00      	nop
 8009770:	40011000 	.word	0x40011000
 8009774:	40011400 	.word	0x40011400
 8009778:	40011800 	.word	0x40011800
 800977c:	40011c00 	.word	0x40011c00
 8009780:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009788:	2200      	movs	r2, #0
 800978a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800978e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009792:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009796:	4642      	mov	r2, r8
 8009798:	464b      	mov	r3, r9
 800979a:	1891      	adds	r1, r2, r2
 800979c:	6239      	str	r1, [r7, #32]
 800979e:	415b      	adcs	r3, r3
 80097a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80097a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097a6:	4641      	mov	r1, r8
 80097a8:	1854      	adds	r4, r2, r1
 80097aa:	4649      	mov	r1, r9
 80097ac:	eb43 0501 	adc.w	r5, r3, r1
 80097b0:	f04f 0200 	mov.w	r2, #0
 80097b4:	f04f 0300 	mov.w	r3, #0
 80097b8:	00eb      	lsls	r3, r5, #3
 80097ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097be:	00e2      	lsls	r2, r4, #3
 80097c0:	4614      	mov	r4, r2
 80097c2:	461d      	mov	r5, r3
 80097c4:	4643      	mov	r3, r8
 80097c6:	18e3      	adds	r3, r4, r3
 80097c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80097cc:	464b      	mov	r3, r9
 80097ce:	eb45 0303 	adc.w	r3, r5, r3
 80097d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80097d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80097e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80097e6:	f04f 0200 	mov.w	r2, #0
 80097ea:	f04f 0300 	mov.w	r3, #0
 80097ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80097f2:	4629      	mov	r1, r5
 80097f4:	008b      	lsls	r3, r1, #2
 80097f6:	4621      	mov	r1, r4
 80097f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097fc:	4621      	mov	r1, r4
 80097fe:	008a      	lsls	r2, r1, #2
 8009800:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009804:	f7f6 fd64 	bl	80002d0 <__aeabi_uldivmod>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	4b60      	ldr	r3, [pc, #384]	@ (8009990 <UART_SetConfig+0x504>)
 800980e:	fba3 2302 	umull	r2, r3, r3, r2
 8009812:	095b      	lsrs	r3, r3, #5
 8009814:	011c      	lsls	r4, r3, #4
 8009816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800981a:	2200      	movs	r2, #0
 800981c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009820:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009824:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009828:	4642      	mov	r2, r8
 800982a:	464b      	mov	r3, r9
 800982c:	1891      	adds	r1, r2, r2
 800982e:	61b9      	str	r1, [r7, #24]
 8009830:	415b      	adcs	r3, r3
 8009832:	61fb      	str	r3, [r7, #28]
 8009834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009838:	4641      	mov	r1, r8
 800983a:	1851      	adds	r1, r2, r1
 800983c:	6139      	str	r1, [r7, #16]
 800983e:	4649      	mov	r1, r9
 8009840:	414b      	adcs	r3, r1
 8009842:	617b      	str	r3, [r7, #20]
 8009844:	f04f 0200 	mov.w	r2, #0
 8009848:	f04f 0300 	mov.w	r3, #0
 800984c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009850:	4659      	mov	r1, fp
 8009852:	00cb      	lsls	r3, r1, #3
 8009854:	4651      	mov	r1, sl
 8009856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800985a:	4651      	mov	r1, sl
 800985c:	00ca      	lsls	r2, r1, #3
 800985e:	4610      	mov	r0, r2
 8009860:	4619      	mov	r1, r3
 8009862:	4603      	mov	r3, r0
 8009864:	4642      	mov	r2, r8
 8009866:	189b      	adds	r3, r3, r2
 8009868:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800986c:	464b      	mov	r3, r9
 800986e:	460a      	mov	r2, r1
 8009870:	eb42 0303 	adc.w	r3, r2, r3
 8009874:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009882:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009884:	f04f 0200 	mov.w	r2, #0
 8009888:	f04f 0300 	mov.w	r3, #0
 800988c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009890:	4649      	mov	r1, r9
 8009892:	008b      	lsls	r3, r1, #2
 8009894:	4641      	mov	r1, r8
 8009896:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800989a:	4641      	mov	r1, r8
 800989c:	008a      	lsls	r2, r1, #2
 800989e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80098a2:	f7f6 fd15 	bl	80002d0 <__aeabi_uldivmod>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4611      	mov	r1, r2
 80098ac:	4b38      	ldr	r3, [pc, #224]	@ (8009990 <UART_SetConfig+0x504>)
 80098ae:	fba3 2301 	umull	r2, r3, r3, r1
 80098b2:	095b      	lsrs	r3, r3, #5
 80098b4:	2264      	movs	r2, #100	@ 0x64
 80098b6:	fb02 f303 	mul.w	r3, r2, r3
 80098ba:	1acb      	subs	r3, r1, r3
 80098bc:	011b      	lsls	r3, r3, #4
 80098be:	3332      	adds	r3, #50	@ 0x32
 80098c0:	4a33      	ldr	r2, [pc, #204]	@ (8009990 <UART_SetConfig+0x504>)
 80098c2:	fba2 2303 	umull	r2, r3, r2, r3
 80098c6:	095b      	lsrs	r3, r3, #5
 80098c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80098cc:	441c      	add	r4, r3
 80098ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098d2:	2200      	movs	r2, #0
 80098d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80098d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80098d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80098dc:	4642      	mov	r2, r8
 80098de:	464b      	mov	r3, r9
 80098e0:	1891      	adds	r1, r2, r2
 80098e2:	60b9      	str	r1, [r7, #8]
 80098e4:	415b      	adcs	r3, r3
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098ec:	4641      	mov	r1, r8
 80098ee:	1851      	adds	r1, r2, r1
 80098f0:	6039      	str	r1, [r7, #0]
 80098f2:	4649      	mov	r1, r9
 80098f4:	414b      	adcs	r3, r1
 80098f6:	607b      	str	r3, [r7, #4]
 80098f8:	f04f 0200 	mov.w	r2, #0
 80098fc:	f04f 0300 	mov.w	r3, #0
 8009900:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009904:	4659      	mov	r1, fp
 8009906:	00cb      	lsls	r3, r1, #3
 8009908:	4651      	mov	r1, sl
 800990a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800990e:	4651      	mov	r1, sl
 8009910:	00ca      	lsls	r2, r1, #3
 8009912:	4610      	mov	r0, r2
 8009914:	4619      	mov	r1, r3
 8009916:	4603      	mov	r3, r0
 8009918:	4642      	mov	r2, r8
 800991a:	189b      	adds	r3, r3, r2
 800991c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800991e:	464b      	mov	r3, r9
 8009920:	460a      	mov	r2, r1
 8009922:	eb42 0303 	adc.w	r3, r2, r3
 8009926:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	663b      	str	r3, [r7, #96]	@ 0x60
 8009932:	667a      	str	r2, [r7, #100]	@ 0x64
 8009934:	f04f 0200 	mov.w	r2, #0
 8009938:	f04f 0300 	mov.w	r3, #0
 800993c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009940:	4649      	mov	r1, r9
 8009942:	008b      	lsls	r3, r1, #2
 8009944:	4641      	mov	r1, r8
 8009946:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800994a:	4641      	mov	r1, r8
 800994c:	008a      	lsls	r2, r1, #2
 800994e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009952:	f7f6 fcbd 	bl	80002d0 <__aeabi_uldivmod>
 8009956:	4602      	mov	r2, r0
 8009958:	460b      	mov	r3, r1
 800995a:	4b0d      	ldr	r3, [pc, #52]	@ (8009990 <UART_SetConfig+0x504>)
 800995c:	fba3 1302 	umull	r1, r3, r3, r2
 8009960:	095b      	lsrs	r3, r3, #5
 8009962:	2164      	movs	r1, #100	@ 0x64
 8009964:	fb01 f303 	mul.w	r3, r1, r3
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	011b      	lsls	r3, r3, #4
 800996c:	3332      	adds	r3, #50	@ 0x32
 800996e:	4a08      	ldr	r2, [pc, #32]	@ (8009990 <UART_SetConfig+0x504>)
 8009970:	fba2 2303 	umull	r2, r3, r2, r3
 8009974:	095b      	lsrs	r3, r3, #5
 8009976:	f003 020f 	and.w	r2, r3, #15
 800997a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4422      	add	r2, r4
 8009982:	609a      	str	r2, [r3, #8]
}
 8009984:	bf00      	nop
 8009986:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800998a:	46bd      	mov	sp, r7
 800998c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009990:	51eb851f 	.word	0x51eb851f

08009994 <__NVIC_SetPriority>:
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	4603      	mov	r3, r0
 800999c:	6039      	str	r1, [r7, #0]
 800999e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	db0a      	blt.n	80099be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	b2da      	uxtb	r2, r3
 80099ac:	490c      	ldr	r1, [pc, #48]	@ (80099e0 <__NVIC_SetPriority+0x4c>)
 80099ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099b2:	0112      	lsls	r2, r2, #4
 80099b4:	b2d2      	uxtb	r2, r2
 80099b6:	440b      	add	r3, r1
 80099b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80099bc:	e00a      	b.n	80099d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	4908      	ldr	r1, [pc, #32]	@ (80099e4 <__NVIC_SetPriority+0x50>)
 80099c4:	79fb      	ldrb	r3, [r7, #7]
 80099c6:	f003 030f 	and.w	r3, r3, #15
 80099ca:	3b04      	subs	r3, #4
 80099cc:	0112      	lsls	r2, r2, #4
 80099ce:	b2d2      	uxtb	r2, r2
 80099d0:	440b      	add	r3, r1
 80099d2:	761a      	strb	r2, [r3, #24]
}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr
 80099e0:	e000e100 	.word	0xe000e100
 80099e4:	e000ed00 	.word	0xe000ed00

080099e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80099e8:	b580      	push	{r7, lr}
 80099ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80099ec:	2100      	movs	r1, #0
 80099ee:	f06f 0004 	mvn.w	r0, #4
 80099f2:	f7ff ffcf 	bl	8009994 <__NVIC_SetPriority>
#endif
}
 80099f6:	bf00      	nop
 80099f8:	bd80      	pop	{r7, pc}
	...

080099fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a02:	f3ef 8305 	mrs	r3, IPSR
 8009a06:	603b      	str	r3, [r7, #0]
  return(result);
 8009a08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d003      	beq.n	8009a16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009a0e:	f06f 0305 	mvn.w	r3, #5
 8009a12:	607b      	str	r3, [r7, #4]
 8009a14:	e00c      	b.n	8009a30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a16:	4b0a      	ldr	r3, [pc, #40]	@ (8009a40 <osKernelInitialize+0x44>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d105      	bne.n	8009a2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009a1e:	4b08      	ldr	r3, [pc, #32]	@ (8009a40 <osKernelInitialize+0x44>)
 8009a20:	2201      	movs	r2, #1
 8009a22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	607b      	str	r3, [r7, #4]
 8009a28:	e002      	b.n	8009a30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a30:	687b      	ldr	r3, [r7, #4]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	2000060c 	.word	0x2000060c

08009a44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a4a:	f3ef 8305 	mrs	r3, IPSR
 8009a4e:	603b      	str	r3, [r7, #0]
  return(result);
 8009a50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009a56:	f06f 0305 	mvn.w	r3, #5
 8009a5a:	607b      	str	r3, [r7, #4]
 8009a5c:	e010      	b.n	8009a80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8009a8c <osKernelStart+0x48>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d109      	bne.n	8009a7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009a66:	f7ff ffbf 	bl	80099e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009a6a:	4b08      	ldr	r3, [pc, #32]	@ (8009a8c <osKernelStart+0x48>)
 8009a6c:	2202      	movs	r2, #2
 8009a6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009a70:	f001 ff04 	bl	800b87c <vTaskStartScheduler>
      stat = osOK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	607b      	str	r3, [r7, #4]
 8009a78:	e002      	b.n	8009a80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a80:	687b      	ldr	r3, [r7, #4]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	2000060c 	.word	0x2000060c

08009a90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08e      	sub	sp, #56	@ 0x38
 8009a94:	af04      	add	r7, sp, #16
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aa0:	f3ef 8305 	mrs	r3, IPSR
 8009aa4:	617b      	str	r3, [r7, #20]
  return(result);
 8009aa6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d17e      	bne.n	8009baa <osThreadNew+0x11a>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d07b      	beq.n	8009baa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009ab2:	2380      	movs	r3, #128	@ 0x80
 8009ab4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009ab6:	2318      	movs	r3, #24
 8009ab8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009aba:	2300      	movs	r3, #0
 8009abc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009abe:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d045      	beq.n	8009b56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d002      	beq.n	8009ad8 <osThreadNew+0x48>
        name = attr->name;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d002      	beq.n	8009ae6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d008      	beq.n	8009afe <osThreadNew+0x6e>
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	2b38      	cmp	r3, #56	@ 0x38
 8009af0:	d805      	bhi.n	8009afe <osThreadNew+0x6e>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	f003 0301 	and.w	r3, r3, #1
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d001      	beq.n	8009b02 <osThreadNew+0x72>
        return (NULL);
 8009afe:	2300      	movs	r3, #0
 8009b00:	e054      	b.n	8009bac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d003      	beq.n	8009b12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	089b      	lsrs	r3, r3, #2
 8009b10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00e      	beq.n	8009b38 <osThreadNew+0xa8>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	2b5b      	cmp	r3, #91	@ 0x5b
 8009b20:	d90a      	bls.n	8009b38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d006      	beq.n	8009b38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	695b      	ldr	r3, [r3, #20]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d002      	beq.n	8009b38 <osThreadNew+0xa8>
        mem = 1;
 8009b32:	2301      	movs	r3, #1
 8009b34:	61bb      	str	r3, [r7, #24]
 8009b36:	e010      	b.n	8009b5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d10c      	bne.n	8009b5a <osThreadNew+0xca>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d108      	bne.n	8009b5a <osThreadNew+0xca>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d104      	bne.n	8009b5a <osThreadNew+0xca>
          mem = 0;
 8009b50:	2300      	movs	r3, #0
 8009b52:	61bb      	str	r3, [r7, #24]
 8009b54:	e001      	b.n	8009b5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d110      	bne.n	8009b82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009b68:	9202      	str	r2, [sp, #8]
 8009b6a:	9301      	str	r3, [sp, #4]
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	6a3a      	ldr	r2, [r7, #32]
 8009b74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f001 fca4 	bl	800b4c4 <xTaskCreateStatic>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	613b      	str	r3, [r7, #16]
 8009b80:	e013      	b.n	8009baa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d110      	bne.n	8009baa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009b88:	6a3b      	ldr	r3, [r7, #32]
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	f107 0310 	add.w	r3, r7, #16
 8009b90:	9301      	str	r3, [sp, #4]
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f001 fcf2 	bl	800b584 <xTaskCreate>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d001      	beq.n	8009baa <osThreadNew+0x11a>
            hTask = NULL;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009baa:	693b      	ldr	r3, [r7, #16]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3728      	adds	r7, #40	@ 0x28
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bbc:	f3ef 8305 	mrs	r3, IPSR
 8009bc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009bc2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d003      	beq.n	8009bd0 <osDelay+0x1c>
    stat = osErrorISR;
 8009bc8:	f06f 0305 	mvn.w	r3, #5
 8009bcc:	60fb      	str	r3, [r7, #12]
 8009bce:	e007      	b.n	8009be0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d002      	beq.n	8009be0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 fe18 	bl	800b810 <vTaskDelay>
    }
  }

  return (stat);
 8009be0:	68fb      	ldr	r3, [r7, #12]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b088      	sub	sp, #32
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bf6:	f3ef 8305 	mrs	r3, IPSR
 8009bfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8009bfc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d174      	bne.n	8009cec <osMutexNew+0x102>
    if (attr != NULL) {
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d003      	beq.n	8009c10 <osMutexNew+0x26>
      type = attr->attr_bits;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	61bb      	str	r3, [r7, #24]
 8009c0e:	e001      	b.n	8009c14 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009c10:	2300      	movs	r3, #0
 8009c12:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	f003 0301 	and.w	r3, r3, #1
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d002      	beq.n	8009c24 <osMutexNew+0x3a>
      rmtx = 1U;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	617b      	str	r3, [r7, #20]
 8009c22:	e001      	b.n	8009c28 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009c24:	2300      	movs	r3, #0
 8009c26:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	f003 0308 	and.w	r3, r3, #8
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d15c      	bne.n	8009cec <osMutexNew+0x102>
      mem = -1;
 8009c32:	f04f 33ff 	mov.w	r3, #4294967295
 8009c36:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d015      	beq.n	8009c6a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d006      	beq.n	8009c54 <osMutexNew+0x6a>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	2b4f      	cmp	r3, #79	@ 0x4f
 8009c4c:	d902      	bls.n	8009c54 <osMutexNew+0x6a>
          mem = 1;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	613b      	str	r3, [r7, #16]
 8009c52:	e00c      	b.n	8009c6e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d108      	bne.n	8009c6e <osMutexNew+0x84>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d104      	bne.n	8009c6e <osMutexNew+0x84>
            mem = 0;
 8009c64:	2300      	movs	r3, #0
 8009c66:	613b      	str	r3, [r7, #16]
 8009c68:	e001      	b.n	8009c6e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d112      	bne.n	8009c9a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d007      	beq.n	8009c8a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	4619      	mov	r1, r3
 8009c80:	2004      	movs	r0, #4
 8009c82:	f000 fcb2 	bl	800a5ea <xQueueCreateMutexStatic>
 8009c86:	61f8      	str	r0, [r7, #28]
 8009c88:	e016      	b.n	8009cb8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	4619      	mov	r1, r3
 8009c90:	2001      	movs	r0, #1
 8009c92:	f000 fcaa 	bl	800a5ea <xQueueCreateMutexStatic>
 8009c96:	61f8      	str	r0, [r7, #28]
 8009c98:	e00e      	b.n	8009cb8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10b      	bne.n	8009cb8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d004      	beq.n	8009cb0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009ca6:	2004      	movs	r0, #4
 8009ca8:	f000 fc87 	bl	800a5ba <xQueueCreateMutex>
 8009cac:	61f8      	str	r0, [r7, #28]
 8009cae:	e003      	b.n	8009cb8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009cb0:	2001      	movs	r0, #1
 8009cb2:	f000 fc82 	bl	800a5ba <xQueueCreateMutex>
 8009cb6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00c      	beq.n	8009cd8 <osMutexNew+0xee>
        if (attr != NULL) {
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d003      	beq.n	8009ccc <osMutexNew+0xe2>
          name = attr->name;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	60fb      	str	r3, [r7, #12]
 8009cca:	e001      	b.n	8009cd0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009cd0:	68f9      	ldr	r1, [r7, #12]
 8009cd2:	69f8      	ldr	r0, [r7, #28]
 8009cd4:	f001 fb6e 	bl	800b3b4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d006      	beq.n	8009cec <osMutexNew+0x102>
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d003      	beq.n	8009cec <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	f043 0301 	orr.w	r3, r3, #1
 8009cea:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009cec:	69fb      	ldr	r3, [r7, #28]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3720      	adds	r7, #32
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b086      	sub	sp, #24
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f023 0301 	bic.w	r3, r3, #1
 8009d06:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f003 0301 	and.w	r3, r3, #1
 8009d0e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009d10:	2300      	movs	r3, #0
 8009d12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d14:	f3ef 8305 	mrs	r3, IPSR
 8009d18:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d1a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d003      	beq.n	8009d28 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8009d20:	f06f 0305 	mvn.w	r3, #5
 8009d24:	617b      	str	r3, [r7, #20]
 8009d26:	e02c      	b.n	8009d82 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d103      	bne.n	8009d36 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8009d2e:	f06f 0303 	mvn.w	r3, #3
 8009d32:	617b      	str	r3, [r7, #20]
 8009d34:	e025      	b.n	8009d82 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d011      	beq.n	8009d60 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	6938      	ldr	r0, [r7, #16]
 8009d40:	f000 fca3 	bl	800a68a <xQueueTakeMutexRecursive>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d01b      	beq.n	8009d82 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d003      	beq.n	8009d58 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8009d50:	f06f 0301 	mvn.w	r3, #1
 8009d54:	617b      	str	r3, [r7, #20]
 8009d56:	e014      	b.n	8009d82 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009d58:	f06f 0302 	mvn.w	r3, #2
 8009d5c:	617b      	str	r3, [r7, #20]
 8009d5e:	e010      	b.n	8009d82 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6938      	ldr	r0, [r7, #16]
 8009d64:	f001 f848 	bl	800adf8 <xQueueSemaphoreTake>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d009      	beq.n	8009d82 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d003      	beq.n	8009d7c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8009d74:	f06f 0301 	mvn.w	r3, #1
 8009d78:	617b      	str	r3, [r7, #20]
 8009d7a:	e002      	b.n	8009d82 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009d7c:	f06f 0302 	mvn.w	r3, #2
 8009d80:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8009d82:	697b      	ldr	r3, [r7, #20]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f023 0301 	bic.w	r3, r3, #1
 8009d9a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f003 0301 	and.w	r3, r3, #1
 8009da2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009da8:	f3ef 8305 	mrs	r3, IPSR
 8009dac:	60bb      	str	r3, [r7, #8]
  return(result);
 8009dae:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d003      	beq.n	8009dbc <osMutexRelease+0x30>
    stat = osErrorISR;
 8009db4:	f06f 0305 	mvn.w	r3, #5
 8009db8:	617b      	str	r3, [r7, #20]
 8009dba:	e01f      	b.n	8009dfc <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d103      	bne.n	8009dca <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8009dc2:	f06f 0303 	mvn.w	r3, #3
 8009dc6:	617b      	str	r3, [r7, #20]
 8009dc8:	e018      	b.n	8009dfc <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d009      	beq.n	8009de4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009dd0:	6938      	ldr	r0, [r7, #16]
 8009dd2:	f000 fc25 	bl	800a620 <xQueueGiveMutexRecursive>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d00f      	beq.n	8009dfc <osMutexRelease+0x70>
        stat = osErrorResource;
 8009ddc:	f06f 0302 	mvn.w	r3, #2
 8009de0:	617b      	str	r3, [r7, #20]
 8009de2:	e00b      	b.n	8009dfc <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009de4:	2300      	movs	r3, #0
 8009de6:	2200      	movs	r2, #0
 8009de8:	2100      	movs	r1, #0
 8009dea:	6938      	ldr	r0, [r7, #16]
 8009dec:	f000 fcf2 	bl	800a7d4 <xQueueGenericSend>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d002      	beq.n	8009dfc <osMutexRelease+0x70>
        stat = osErrorResource;
 8009df6:	f06f 0302 	mvn.w	r3, #2
 8009dfa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009dfc:	697b      	ldr	r3, [r7, #20]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3718      	adds	r7, #24
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b08a      	sub	sp, #40	@ 0x28
 8009e0a:	af02      	add	r7, sp, #8
 8009e0c:	60f8      	str	r0, [r7, #12]
 8009e0e:	60b9      	str	r1, [r7, #8]
 8009e10:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009e12:	2300      	movs	r3, #0
 8009e14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e16:	f3ef 8305 	mrs	r3, IPSR
 8009e1a:	613b      	str	r3, [r7, #16]
  return(result);
 8009e1c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d175      	bne.n	8009f0e <osSemaphoreNew+0x108>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d072      	beq.n	8009f0e <osSemaphoreNew+0x108>
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d86e      	bhi.n	8009f0e <osSemaphoreNew+0x108>
    mem = -1;
 8009e30:	f04f 33ff 	mov.w	r3, #4294967295
 8009e34:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d015      	beq.n	8009e68 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d006      	beq.n	8009e52 <osSemaphoreNew+0x4c>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	2b4f      	cmp	r3, #79	@ 0x4f
 8009e4a:	d902      	bls.n	8009e52 <osSemaphoreNew+0x4c>
        mem = 1;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	61bb      	str	r3, [r7, #24]
 8009e50:	e00c      	b.n	8009e6c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d108      	bne.n	8009e6c <osSemaphoreNew+0x66>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d104      	bne.n	8009e6c <osSemaphoreNew+0x66>
          mem = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	61bb      	str	r3, [r7, #24]
 8009e66:	e001      	b.n	8009e6c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e72:	d04c      	beq.n	8009f0e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d128      	bne.n	8009ecc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d10a      	bne.n	8009e96 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	2203      	movs	r2, #3
 8009e86:	9200      	str	r2, [sp, #0]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	2001      	movs	r0, #1
 8009e8e:	f000 fa9f 	bl	800a3d0 <xQueueGenericCreateStatic>
 8009e92:	61f8      	str	r0, [r7, #28]
 8009e94:	e005      	b.n	8009ea2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009e96:	2203      	movs	r2, #3
 8009e98:	2100      	movs	r1, #0
 8009e9a:	2001      	movs	r0, #1
 8009e9c:	f000 fb15 	bl	800a4ca <xQueueGenericCreate>
 8009ea0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d022      	beq.n	8009eee <osSemaphoreNew+0xe8>
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d01f      	beq.n	8009eee <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009eae:	2300      	movs	r3, #0
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	69f8      	ldr	r0, [r7, #28]
 8009eb6:	f000 fc8d 	bl	800a7d4 <xQueueGenericSend>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d016      	beq.n	8009eee <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009ec0:	69f8      	ldr	r0, [r7, #28]
 8009ec2:	f001 f92b 	bl	800b11c <vQueueDelete>
            hSemaphore = NULL;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	61fb      	str	r3, [r7, #28]
 8009eca:	e010      	b.n	8009eee <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d108      	bne.n	8009ee4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	68b9      	ldr	r1, [r7, #8]
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f000 fc0c 	bl	800a6f8 <xQueueCreateCountingSemaphoreStatic>
 8009ee0:	61f8      	str	r0, [r7, #28]
 8009ee2:	e004      	b.n	8009eee <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009ee4:	68b9      	ldr	r1, [r7, #8]
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f000 fc3f 	bl	800a76a <xQueueCreateCountingSemaphore>
 8009eec:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00c      	beq.n	8009f0e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d003      	beq.n	8009f02 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	617b      	str	r3, [r7, #20]
 8009f00:	e001      	b.n	8009f06 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009f02:	2300      	movs	r3, #0
 8009f04:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009f06:	6979      	ldr	r1, [r7, #20]
 8009f08:	69f8      	ldr	r0, [r7, #28]
 8009f0a:	f001 fa53 	bl	800b3b4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009f0e:	69fb      	ldr	r3, [r7, #28]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3720      	adds	r7, #32
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d103      	bne.n	8009f38 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009f30:	f06f 0303 	mvn.w	r3, #3
 8009f34:	617b      	str	r3, [r7, #20]
 8009f36:	e039      	b.n	8009fac <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f38:	f3ef 8305 	mrs	r3, IPSR
 8009f3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d022      	beq.n	8009f8a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d003      	beq.n	8009f52 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009f4a:	f06f 0303 	mvn.w	r3, #3
 8009f4e:	617b      	str	r3, [r7, #20]
 8009f50:	e02c      	b.n	8009fac <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009f52:	2300      	movs	r3, #0
 8009f54:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009f56:	f107 0308 	add.w	r3, r7, #8
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	6938      	ldr	r0, [r7, #16]
 8009f60:	f001 f85a 	bl	800b018 <xQueueReceiveFromISR>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d003      	beq.n	8009f72 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009f6a:	f06f 0302 	mvn.w	r3, #2
 8009f6e:	617b      	str	r3, [r7, #20]
 8009f70:	e01c      	b.n	8009fac <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d019      	beq.n	8009fac <osSemaphoreAcquire+0x94>
 8009f78:	4b0f      	ldr	r3, [pc, #60]	@ (8009fb8 <osSemaphoreAcquire+0xa0>)
 8009f7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f7e:	601a      	str	r2, [r3, #0]
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	e010      	b.n	8009fac <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009f8a:	6839      	ldr	r1, [r7, #0]
 8009f8c:	6938      	ldr	r0, [r7, #16]
 8009f8e:	f000 ff33 	bl	800adf8 <xQueueSemaphoreTake>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d009      	beq.n	8009fac <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d003      	beq.n	8009fa6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009f9e:	f06f 0301 	mvn.w	r3, #1
 8009fa2:	617b      	str	r3, [r7, #20]
 8009fa4:	e002      	b.n	8009fac <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009fa6:	f06f 0302 	mvn.w	r3, #2
 8009faa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009fac:	697b      	ldr	r3, [r7, #20]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3718      	adds	r7, #24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	e000ed04 	.word	0xe000ed04

08009fbc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d103      	bne.n	8009fda <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009fd2:	f06f 0303 	mvn.w	r3, #3
 8009fd6:	617b      	str	r3, [r7, #20]
 8009fd8:	e02c      	b.n	800a034 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fda:	f3ef 8305 	mrs	r3, IPSR
 8009fde:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d01a      	beq.n	800a01c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009fea:	f107 0308 	add.w	r3, r7, #8
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6938      	ldr	r0, [r7, #16]
 8009ff2:	f000 fd8f 	bl	800ab14 <xQueueGiveFromISR>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d003      	beq.n	800a004 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009ffc:	f06f 0302 	mvn.w	r3, #2
 800a000:	617b      	str	r3, [r7, #20]
 800a002:	e017      	b.n	800a034 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d014      	beq.n	800a034 <osSemaphoreRelease+0x78>
 800a00a:	4b0d      	ldr	r3, [pc, #52]	@ (800a040 <osSemaphoreRelease+0x84>)
 800a00c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a010:	601a      	str	r2, [r3, #0]
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	e00b      	b.n	800a034 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a01c:	2300      	movs	r3, #0
 800a01e:	2200      	movs	r2, #0
 800a020:	2100      	movs	r1, #0
 800a022:	6938      	ldr	r0, [r7, #16]
 800a024:	f000 fbd6 	bl	800a7d4 <xQueueGenericSend>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d002      	beq.n	800a034 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a02e:	f06f 0302 	mvn.w	r3, #2
 800a032:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a034:	697b      	ldr	r3, [r7, #20]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3718      	adds	r7, #24
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	e000ed04 	.word	0xe000ed04

0800a044 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a044:	b580      	push	{r7, lr}
 800a046:	b08a      	sub	sp, #40	@ 0x28
 800a048:	af02      	add	r7, sp, #8
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a050:	2300      	movs	r3, #0
 800a052:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a054:	f3ef 8305 	mrs	r3, IPSR
 800a058:	613b      	str	r3, [r7, #16]
  return(result);
 800a05a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d15f      	bne.n	800a120 <osMessageQueueNew+0xdc>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d05c      	beq.n	800a120 <osMessageQueueNew+0xdc>
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d059      	beq.n	800a120 <osMessageQueueNew+0xdc>
    mem = -1;
 800a06c:	f04f 33ff 	mov.w	r3, #4294967295
 800a070:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d029      	beq.n	800a0cc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d012      	beq.n	800a0a6 <osMessageQueueNew+0x62>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	2b4f      	cmp	r3, #79	@ 0x4f
 800a086:	d90e      	bls.n	800a0a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00a      	beq.n	800a0a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	695a      	ldr	r2, [r3, #20]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	68b9      	ldr	r1, [r7, #8]
 800a098:	fb01 f303 	mul.w	r3, r1, r3
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d302      	bcc.n	800a0a6 <osMessageQueueNew+0x62>
        mem = 1;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	61bb      	str	r3, [r7, #24]
 800a0a4:	e014      	b.n	800a0d0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d110      	bne.n	800a0d0 <osMessageQueueNew+0x8c>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d10c      	bne.n	800a0d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d108      	bne.n	800a0d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d104      	bne.n	800a0d0 <osMessageQueueNew+0x8c>
          mem = 0;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	61bb      	str	r3, [r7, #24]
 800a0ca:	e001      	b.n	800a0d0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d10b      	bne.n	800a0ee <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	691a      	ldr	r2, [r3, #16]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	2100      	movs	r1, #0
 800a0e0:	9100      	str	r1, [sp, #0]
 800a0e2:	68b9      	ldr	r1, [r7, #8]
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f000 f973 	bl	800a3d0 <xQueueGenericCreateStatic>
 800a0ea:	61f8      	str	r0, [r7, #28]
 800a0ec:	e008      	b.n	800a100 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d105      	bne.n	800a100 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	68b9      	ldr	r1, [r7, #8]
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f000 f9e6 	bl	800a4ca <xQueueGenericCreate>
 800a0fe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00c      	beq.n	800a120 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d003      	beq.n	800a114 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	617b      	str	r3, [r7, #20]
 800a112:	e001      	b.n	800a118 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a114:	2300      	movs	r3, #0
 800a116:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a118:	6979      	ldr	r1, [r7, #20]
 800a11a:	69f8      	ldr	r0, [r7, #28]
 800a11c:	f001 f94a 	bl	800b3b4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a120:	69fb      	ldr	r3, [r7, #28]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3720      	adds	r7, #32
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
	...

0800a12c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	4a07      	ldr	r2, [pc, #28]	@ (800a158 <vApplicationGetIdleTaskMemory+0x2c>)
 800a13c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	4a06      	ldr	r2, [pc, #24]	@ (800a15c <vApplicationGetIdleTaskMemory+0x30>)
 800a142:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2280      	movs	r2, #128	@ 0x80
 800a148:	601a      	str	r2, [r3, #0]
}
 800a14a:	bf00      	nop
 800a14c:	3714      	adds	r7, #20
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	20000610 	.word	0x20000610
 800a15c:	2000066c 	.word	0x2000066c

0800a160 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	4a07      	ldr	r2, [pc, #28]	@ (800a18c <vApplicationGetTimerTaskMemory+0x2c>)
 800a170:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	4a06      	ldr	r2, [pc, #24]	@ (800a190 <vApplicationGetTimerTaskMemory+0x30>)
 800a176:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a17e:	601a      	str	r2, [r3, #0]
}
 800a180:	bf00      	nop
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr
 800a18c:	2000086c 	.word	0x2000086c
 800a190:	200008c8 	.word	0x200008c8

0800a194 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f103 0208 	add.w	r2, r3, #8
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f103 0208 	add.w	r2, r3, #8
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f103 0208 	add.w	r2, r3, #8
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a1e2:	bf00      	nop
 800a1e4:	370c      	adds	r7, #12
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr

0800a1ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	b085      	sub	sp, #20
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	689a      	ldr	r2, [r3, #8]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	683a      	ldr	r2, [r7, #0]
 800a212:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	1c5a      	adds	r2, r3, #1
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	601a      	str	r2, [r3, #0]
}
 800a22a:	bf00      	nop
 800a22c:	3714      	adds	r7, #20
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a236:	b480      	push	{r7}
 800a238:	b085      	sub	sp, #20
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24c:	d103      	bne.n	800a256 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	60fb      	str	r3, [r7, #12]
 800a254:	e00c      	b.n	800a270 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	3308      	adds	r3, #8
 800a25a:	60fb      	str	r3, [r7, #12]
 800a25c:	e002      	b.n	800a264 <vListInsert+0x2e>
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	60fb      	str	r3, [r7, #12]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d2f6      	bcs.n	800a25e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	685a      	ldr	r2, [r3, #4]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	683a      	ldr	r2, [r7, #0]
 800a28a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	1c5a      	adds	r2, r3, #1
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	601a      	str	r2, [r3, #0]
}
 800a29c:	bf00      	nop
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	6892      	ldr	r2, [r2, #8]
 800a2be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	6852      	ldr	r2, [r2, #4]
 800a2c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d103      	bne.n	800a2dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	689a      	ldr	r2, [r3, #8]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	1e5a      	subs	r2, r3, #1
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3714      	adds	r7, #20
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d10b      	bne.n	800a328 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a322:	bf00      	nop
 800a324:	bf00      	nop
 800a326:	e7fd      	b.n	800a324 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a328:	f002 fd76 	bl	800ce18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a334:	68f9      	ldr	r1, [r7, #12]
 800a336:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a338:	fb01 f303 	mul.w	r3, r1, r3
 800a33c:	441a      	add	r2, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a358:	3b01      	subs	r3, #1
 800a35a:	68f9      	ldr	r1, [r7, #12]
 800a35c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a35e:	fb01 f303 	mul.w	r3, r1, r3
 800a362:	441a      	add	r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	22ff      	movs	r2, #255	@ 0xff
 800a36c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	22ff      	movs	r2, #255	@ 0xff
 800a374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d114      	bne.n	800a3a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d01a      	beq.n	800a3bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	3310      	adds	r3, #16
 800a38a:	4618      	mov	r0, r3
 800a38c:	f001 fd04 	bl	800bd98 <xTaskRemoveFromEventList>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d012      	beq.n	800a3bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a396:	4b0d      	ldr	r3, [pc, #52]	@ (800a3cc <xQueueGenericReset+0xd0>)
 800a398:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a39c:	601a      	str	r2, [r3, #0]
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	e009      	b.n	800a3bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	3310      	adds	r3, #16
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7ff fef1 	bl	800a194 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	3324      	adds	r3, #36	@ 0x24
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7ff feec 	bl	800a194 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3bc:	f002 fd5e 	bl	800ce7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a3c0:	2301      	movs	r3, #1
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	e000ed04 	.word	0xe000ed04

0800a3d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b08e      	sub	sp, #56	@ 0x38
 800a3d4:	af02      	add	r7, sp, #8
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	607a      	str	r2, [r7, #4]
 800a3dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10b      	bne.n	800a3fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e8:	f383 8811 	msr	BASEPRI, r3
 800a3ec:	f3bf 8f6f 	isb	sy
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a3f6:	bf00      	nop
 800a3f8:	bf00      	nop
 800a3fa:	e7fd      	b.n	800a3f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d10b      	bne.n	800a41a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a406:	f383 8811 	msr	BASEPRI, r3
 800a40a:	f3bf 8f6f 	isb	sy
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a414:	bf00      	nop
 800a416:	bf00      	nop
 800a418:	e7fd      	b.n	800a416 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <xQueueGenericCreateStatic+0x56>
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d001      	beq.n	800a42a <xQueueGenericCreateStatic+0x5a>
 800a426:	2301      	movs	r3, #1
 800a428:	e000      	b.n	800a42c <xQueueGenericCreateStatic+0x5c>
 800a42a:	2300      	movs	r3, #0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10b      	bne.n	800a448 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	623b      	str	r3, [r7, #32]
}
 800a442:	bf00      	nop
 800a444:	bf00      	nop
 800a446:	e7fd      	b.n	800a444 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d102      	bne.n	800a454 <xQueueGenericCreateStatic+0x84>
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d101      	bne.n	800a458 <xQueueGenericCreateStatic+0x88>
 800a454:	2301      	movs	r3, #1
 800a456:	e000      	b.n	800a45a <xQueueGenericCreateStatic+0x8a>
 800a458:	2300      	movs	r3, #0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d10b      	bne.n	800a476 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	61fb      	str	r3, [r7, #28]
}
 800a470:	bf00      	nop
 800a472:	bf00      	nop
 800a474:	e7fd      	b.n	800a472 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a476:	2350      	movs	r3, #80	@ 0x50
 800a478:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	2b50      	cmp	r3, #80	@ 0x50
 800a47e:	d00b      	beq.n	800a498 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	61bb      	str	r3, [r7, #24]
}
 800a492:	bf00      	nop
 800a494:	bf00      	nop
 800a496:	e7fd      	b.n	800a494 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a498:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a49e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00d      	beq.n	800a4c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	4613      	mov	r3, r2
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	68b9      	ldr	r1, [r7, #8]
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f000 f840 	bl	800a540 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3730      	adds	r7, #48	@ 0x30
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b08a      	sub	sp, #40	@ 0x28
 800a4ce:	af02      	add	r7, sp, #8
 800a4d0:	60f8      	str	r0, [r7, #12]
 800a4d2:	60b9      	str	r1, [r7, #8]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10b      	bne.n	800a4f6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	613b      	str	r3, [r7, #16]
}
 800a4f0:	bf00      	nop
 800a4f2:	bf00      	nop
 800a4f4:	e7fd      	b.n	800a4f2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	fb02 f303 	mul.w	r3, r2, r3
 800a4fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	3350      	adds	r3, #80	@ 0x50
 800a504:	4618      	mov	r0, r3
 800a506:	f002 fda9 	bl	800d05c <pvPortMalloc>
 800a50a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d011      	beq.n	800a536 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	3350      	adds	r3, #80	@ 0x50
 800a51a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a524:	79fa      	ldrb	r2, [r7, #7]
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	4613      	mov	r3, r2
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	68b9      	ldr	r1, [r7, #8]
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f000 f805 	bl	800a540 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a536:	69bb      	ldr	r3, [r7, #24]
	}
 800a538:	4618      	mov	r0, r3
 800a53a:	3720      	adds	r7, #32
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
 800a54c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d103      	bne.n	800a55c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	69ba      	ldr	r2, [r7, #24]
 800a558:	601a      	str	r2, [r3, #0]
 800a55a:	e002      	b.n	800a562 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a56e:	2101      	movs	r1, #1
 800a570:	69b8      	ldr	r0, [r7, #24]
 800a572:	f7ff fec3 	bl	800a2fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	78fa      	ldrb	r2, [r7, #3]
 800a57a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a57e:	bf00      	nop
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a586:	b580      	push	{r7, lr}
 800a588:	b082      	sub	sp, #8
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00e      	beq.n	800a5b2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 f911 	bl	800a7d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a5b2:	bf00      	nop
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b086      	sub	sp, #24
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	617b      	str	r3, [r7, #20]
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a5cc:	79fb      	ldrb	r3, [r7, #7]
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	6939      	ldr	r1, [r7, #16]
 800a5d2:	6978      	ldr	r0, [r7, #20]
 800a5d4:	f7ff ff79 	bl	800a4ca <xQueueGenericCreate>
 800a5d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f7ff ffd3 	bl	800a586 <prvInitialiseMutex>

		return xNewQueue;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
	}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3718      	adds	r7, #24
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b088      	sub	sp, #32
 800a5ee:	af02      	add	r7, sp, #8
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	6039      	str	r1, [r7, #0]
 800a5f4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	617b      	str	r3, [r7, #20]
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a5fe:	79fb      	ldrb	r3, [r7, #7]
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2200      	movs	r2, #0
 800a606:	6939      	ldr	r1, [r7, #16]
 800a608:	6978      	ldr	r0, [r7, #20]
 800a60a:	f7ff fee1 	bl	800a3d0 <xQueueGenericCreateStatic>
 800a60e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f7ff ffb8 	bl	800a586 <prvInitialiseMutex>

		return xNewQueue;
 800a616:	68fb      	ldr	r3, [r7, #12]
	}
 800a618:	4618      	mov	r0, r3
 800a61a:	3718      	adds	r7, #24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a620:	b590      	push	{r4, r7, lr}
 800a622:	b087      	sub	sp, #28
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10b      	bne.n	800a64a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800a632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	60fb      	str	r3, [r7, #12]
}
 800a644:	bf00      	nop
 800a646:	bf00      	nop
 800a648:	e7fd      	b.n	800a646 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	689c      	ldr	r4, [r3, #8]
 800a64e:	f001 fd63 	bl	800c118 <xTaskGetCurrentTaskHandle>
 800a652:	4603      	mov	r3, r0
 800a654:	429c      	cmp	r4, r3
 800a656:	d111      	bne.n	800a67c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	1e5a      	subs	r2, r3, #1
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d105      	bne.n	800a676 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a66a:	2300      	movs	r3, #0
 800a66c:	2200      	movs	r2, #0
 800a66e:	2100      	movs	r1, #0
 800a670:	6938      	ldr	r0, [r7, #16]
 800a672:	f000 f8af 	bl	800a7d4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a676:	2301      	movs	r3, #1
 800a678:	617b      	str	r3, [r7, #20]
 800a67a:	e001      	b.n	800a680 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a67c:	2300      	movs	r3, #0
 800a67e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a680:	697b      	ldr	r3, [r7, #20]
	}
 800a682:	4618      	mov	r0, r3
 800a684:	371c      	adds	r7, #28
 800a686:	46bd      	mov	sp, r7
 800a688:	bd90      	pop	{r4, r7, pc}

0800a68a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a68a:	b590      	push	{r4, r7, lr}
 800a68c:	b087      	sub	sp, #28
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10b      	bne.n	800a6b6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800a69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	60fb      	str	r3, [r7, #12]
}
 800a6b0:	bf00      	nop
 800a6b2:	bf00      	nop
 800a6b4:	e7fd      	b.n	800a6b2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	689c      	ldr	r4, [r3, #8]
 800a6ba:	f001 fd2d 	bl	800c118 <xTaskGetCurrentTaskHandle>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	429c      	cmp	r4, r3
 800a6c2:	d107      	bne.n	800a6d4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	1c5a      	adds	r2, r3, #1
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	617b      	str	r3, [r7, #20]
 800a6d2:	e00c      	b.n	800a6ee <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a6d4:	6839      	ldr	r1, [r7, #0]
 800a6d6:	6938      	ldr	r0, [r7, #16]
 800a6d8:	f000 fb8e 	bl	800adf8 <xQueueSemaphoreTake>
 800a6dc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d004      	beq.n	800a6ee <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	1c5a      	adds	r2, r3, #1
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a6ee:	697b      	ldr	r3, [r7, #20]
	}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	371c      	adds	r7, #28
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd90      	pop	{r4, r7, pc}

0800a6f8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b08a      	sub	sp, #40	@ 0x28
 800a6fc:	af02      	add	r7, sp, #8
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10b      	bne.n	800a722 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70e:	f383 8811 	msr	BASEPRI, r3
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	f3bf 8f4f 	dsb	sy
 800a71a:	61bb      	str	r3, [r7, #24]
}
 800a71c:	bf00      	nop
 800a71e:	bf00      	nop
 800a720:	e7fd      	b.n	800a71e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	429a      	cmp	r2, r3
 800a728:	d90b      	bls.n	800a742 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800a72a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	617b      	str	r3, [r7, #20]
}
 800a73c:	bf00      	nop
 800a73e:	bf00      	nop
 800a740:	e7fd      	b.n	800a73e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a742:	2302      	movs	r3, #2
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	2100      	movs	r1, #0
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f7ff fe3f 	bl	800a3d0 <xQueueGenericCreateStatic>
 800a752:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d002      	beq.n	800a760 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	68ba      	ldr	r2, [r7, #8]
 800a75e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a760:	69fb      	ldr	r3, [r7, #28]
	}
 800a762:	4618      	mov	r0, r3
 800a764:	3720      	adds	r7, #32
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b086      	sub	sp, #24
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10b      	bne.n	800a792 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a77a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a77e:	f383 8811 	msr	BASEPRI, r3
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	f3bf 8f4f 	dsb	sy
 800a78a:	613b      	str	r3, [r7, #16]
}
 800a78c:	bf00      	nop
 800a78e:	bf00      	nop
 800a790:	e7fd      	b.n	800a78e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	429a      	cmp	r2, r3
 800a798:	d90b      	bls.n	800a7b2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a79e:	f383 8811 	msr	BASEPRI, r3
 800a7a2:	f3bf 8f6f 	isb	sy
 800a7a6:	f3bf 8f4f 	dsb	sy
 800a7aa:	60fb      	str	r3, [r7, #12]
}
 800a7ac:	bf00      	nop
 800a7ae:	bf00      	nop
 800a7b0:	e7fd      	b.n	800a7ae <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a7b2:	2202      	movs	r2, #2
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f7ff fe87 	bl	800a4ca <xQueueGenericCreate>
 800a7bc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d002      	beq.n	800a7ca <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a7ca:	697b      	ldr	r3, [r7, #20]
	}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3718      	adds	r7, #24
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08e      	sub	sp, #56	@ 0x38
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d10b      	bne.n	800a808 <xQueueGenericSend+0x34>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a802:	bf00      	nop
 800a804:	bf00      	nop
 800a806:	e7fd      	b.n	800a804 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d103      	bne.n	800a816 <xQueueGenericSend+0x42>
 800a80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a812:	2b00      	cmp	r3, #0
 800a814:	d101      	bne.n	800a81a <xQueueGenericSend+0x46>
 800a816:	2301      	movs	r3, #1
 800a818:	e000      	b.n	800a81c <xQueueGenericSend+0x48>
 800a81a:	2300      	movs	r3, #0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10b      	bne.n	800a838 <xQueueGenericSend+0x64>
	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a832:	bf00      	nop
 800a834:	bf00      	nop
 800a836:	e7fd      	b.n	800a834 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d103      	bne.n	800a846 <xQueueGenericSend+0x72>
 800a83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a842:	2b01      	cmp	r3, #1
 800a844:	d101      	bne.n	800a84a <xQueueGenericSend+0x76>
 800a846:	2301      	movs	r3, #1
 800a848:	e000      	b.n	800a84c <xQueueGenericSend+0x78>
 800a84a:	2300      	movs	r3, #0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10b      	bne.n	800a868 <xQueueGenericSend+0x94>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	623b      	str	r3, [r7, #32]
}
 800a862:	bf00      	nop
 800a864:	bf00      	nop
 800a866:	e7fd      	b.n	800a864 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a868:	f001 fc66 	bl	800c138 <xTaskGetSchedulerState>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d102      	bne.n	800a878 <xQueueGenericSend+0xa4>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <xQueueGenericSend+0xa8>
 800a878:	2301      	movs	r3, #1
 800a87a:	e000      	b.n	800a87e <xQueueGenericSend+0xaa>
 800a87c:	2300      	movs	r3, #0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10b      	bne.n	800a89a <xQueueGenericSend+0xc6>
	__asm volatile
 800a882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a886:	f383 8811 	msr	BASEPRI, r3
 800a88a:	f3bf 8f6f 	isb	sy
 800a88e:	f3bf 8f4f 	dsb	sy
 800a892:	61fb      	str	r3, [r7, #28]
}
 800a894:	bf00      	nop
 800a896:	bf00      	nop
 800a898:	e7fd      	b.n	800a896 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a89a:	f002 fabd 	bl	800ce18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d302      	bcc.n	800a8b0 <xQueueGenericSend+0xdc>
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d129      	bne.n	800a904 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	68b9      	ldr	r1, [r7, #8]
 800a8b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8b6:	f000 fc6d 	bl	800b194 <prvCopyDataToQueue>
 800a8ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d010      	beq.n	800a8e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c6:	3324      	adds	r3, #36	@ 0x24
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f001 fa65 	bl	800bd98 <xTaskRemoveFromEventList>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d013      	beq.n	800a8fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a8d4:	4b3f      	ldr	r3, [pc, #252]	@ (800a9d4 <xQueueGenericSend+0x200>)
 800a8d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8da:	601a      	str	r2, [r3, #0]
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	f3bf 8f6f 	isb	sy
 800a8e4:	e00a      	b.n	800a8fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d007      	beq.n	800a8fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a8ec:	4b39      	ldr	r3, [pc, #228]	@ (800a9d4 <xQueueGenericSend+0x200>)
 800a8ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8f2:	601a      	str	r2, [r3, #0]
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a8fc:	f002 fabe 	bl	800ce7c <vPortExitCritical>
				return pdPASS;
 800a900:	2301      	movs	r3, #1
 800a902:	e063      	b.n	800a9cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d103      	bne.n	800a912 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a90a:	f002 fab7 	bl	800ce7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a90e:	2300      	movs	r3, #0
 800a910:	e05c      	b.n	800a9cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a914:	2b00      	cmp	r3, #0
 800a916:	d106      	bne.n	800a926 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a918:	f107 0314 	add.w	r3, r7, #20
 800a91c:	4618      	mov	r0, r3
 800a91e:	f001 fa9f 	bl	800be60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a922:	2301      	movs	r3, #1
 800a924:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a926:	f002 faa9 	bl	800ce7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a92a:	f001 f80f 	bl	800b94c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a92e:	f002 fa73 	bl	800ce18 <vPortEnterCritical>
 800a932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a934:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a938:	b25b      	sxtb	r3, r3
 800a93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a93e:	d103      	bne.n	800a948 <xQueueGenericSend+0x174>
 800a940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a94e:	b25b      	sxtb	r3, r3
 800a950:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a954:	d103      	bne.n	800a95e <xQueueGenericSend+0x18a>
 800a956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a95e:	f002 fa8d 	bl	800ce7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a962:	1d3a      	adds	r2, r7, #4
 800a964:	f107 0314 	add.w	r3, r7, #20
 800a968:	4611      	mov	r1, r2
 800a96a:	4618      	mov	r0, r3
 800a96c:	f001 fa8e 	bl	800be8c <xTaskCheckForTimeOut>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d124      	bne.n	800a9c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a976:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a978:	f000 fd04 	bl	800b384 <prvIsQueueFull>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d018      	beq.n	800a9b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a984:	3310      	adds	r3, #16
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	4611      	mov	r1, r2
 800a98a:	4618      	mov	r0, r3
 800a98c:	f001 f9b2 	bl	800bcf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a990:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a992:	f000 fc8f 	bl	800b2b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a996:	f000 ffe7 	bl	800b968 <xTaskResumeAll>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f47f af7c 	bne.w	800a89a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a9a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a9d4 <xQueueGenericSend+0x200>)
 800a9a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9a8:	601a      	str	r2, [r3, #0]
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	e772      	b.n	800a89a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a9b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9b6:	f000 fc7d 	bl	800b2b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9ba:	f000 ffd5 	bl	800b968 <xTaskResumeAll>
 800a9be:	e76c      	b.n	800a89a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a9c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9c2:	f000 fc77 	bl	800b2b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9c6:	f000 ffcf 	bl	800b968 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a9ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3738      	adds	r7, #56	@ 0x38
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	e000ed04 	.word	0xe000ed04

0800a9d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b090      	sub	sp, #64	@ 0x40
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
 800a9e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d10b      	bne.n	800aa08 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f4:	f383 8811 	msr	BASEPRI, r3
 800a9f8:	f3bf 8f6f 	isb	sy
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aa02:	bf00      	nop
 800aa04:	bf00      	nop
 800aa06:	e7fd      	b.n	800aa04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d103      	bne.n	800aa16 <xQueueGenericSendFromISR+0x3e>
 800aa0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d101      	bne.n	800aa1a <xQueueGenericSendFromISR+0x42>
 800aa16:	2301      	movs	r3, #1
 800aa18:	e000      	b.n	800aa1c <xQueueGenericSendFromISR+0x44>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10b      	bne.n	800aa38 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800aa20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa24:	f383 8811 	msr	BASEPRI, r3
 800aa28:	f3bf 8f6f 	isb	sy
 800aa2c:	f3bf 8f4f 	dsb	sy
 800aa30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aa32:	bf00      	nop
 800aa34:	bf00      	nop
 800aa36:	e7fd      	b.n	800aa34 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d103      	bne.n	800aa46 <xQueueGenericSendFromISR+0x6e>
 800aa3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d101      	bne.n	800aa4a <xQueueGenericSendFromISR+0x72>
 800aa46:	2301      	movs	r3, #1
 800aa48:	e000      	b.n	800aa4c <xQueueGenericSendFromISR+0x74>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d10b      	bne.n	800aa68 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800aa50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	623b      	str	r3, [r7, #32]
}
 800aa62:	bf00      	nop
 800aa64:	bf00      	nop
 800aa66:	e7fd      	b.n	800aa64 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa68:	f002 fab6 	bl	800cfd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aa6c:	f3ef 8211 	mrs	r2, BASEPRI
 800aa70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	61fa      	str	r2, [r7, #28]
 800aa82:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aa84:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa86:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d302      	bcc.n	800aa9a <xQueueGenericSendFromISR+0xc2>
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d12f      	bne.n	800aafa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aaa0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aaa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	68b9      	ldr	r1, [r7, #8]
 800aaae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aab0:	f000 fb70 	bl	800b194 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aab4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800aab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aabc:	d112      	bne.n	800aae4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aabe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d016      	beq.n	800aaf4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac8:	3324      	adds	r3, #36	@ 0x24
 800aaca:	4618      	mov	r0, r3
 800aacc:	f001 f964 	bl	800bd98 <xTaskRemoveFromEventList>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00e      	beq.n	800aaf4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00b      	beq.n	800aaf4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	601a      	str	r2, [r3, #0]
 800aae2:	e007      	b.n	800aaf4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aae4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aae8:	3301      	adds	r3, #1
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	b25a      	sxtb	r2, r3
 800aaee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800aaf8:	e001      	b.n	800aafe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aafa:	2300      	movs	r3, #0
 800aafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aafe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab00:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3740      	adds	r7, #64	@ 0x40
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b08e      	sub	sp, #56	@ 0x38
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ab22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d10b      	bne.n	800ab40 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800ab28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab2c:	f383 8811 	msr	BASEPRI, r3
 800ab30:	f3bf 8f6f 	isb	sy
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	623b      	str	r3, [r7, #32]
}
 800ab3a:	bf00      	nop
 800ab3c:	bf00      	nop
 800ab3e:	e7fd      	b.n	800ab3c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ab40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00b      	beq.n	800ab60 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800ab48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	61fb      	str	r3, [r7, #28]
}
 800ab5a:	bf00      	nop
 800ab5c:	bf00      	nop
 800ab5e:	e7fd      	b.n	800ab5c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ab60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d103      	bne.n	800ab70 <xQueueGiveFromISR+0x5c>
 800ab68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d101      	bne.n	800ab74 <xQueueGiveFromISR+0x60>
 800ab70:	2301      	movs	r3, #1
 800ab72:	e000      	b.n	800ab76 <xQueueGiveFromISR+0x62>
 800ab74:	2300      	movs	r3, #0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d10b      	bne.n	800ab92 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800ab7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	61bb      	str	r3, [r7, #24]
}
 800ab8c:	bf00      	nop
 800ab8e:	bf00      	nop
 800ab90:	e7fd      	b.n	800ab8e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab92:	f002 fa21 	bl	800cfd8 <vPortValidateInterruptPriority>
	__asm volatile
 800ab96:	f3ef 8211 	mrs	r2, BASEPRI
 800ab9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab9e:	f383 8811 	msr	BASEPRI, r3
 800aba2:	f3bf 8f6f 	isb	sy
 800aba6:	f3bf 8f4f 	dsb	sy
 800abaa:	617a      	str	r2, [r7, #20]
 800abac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800abae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abb6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800abb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d22b      	bcs.n	800ac1a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800abc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abce:	1c5a      	adds	r2, r3, #1
 800abd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800abd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800abd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abdc:	d112      	bne.n	800ac04 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d016      	beq.n	800ac14 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe8:	3324      	adds	r3, #36	@ 0x24
 800abea:	4618      	mov	r0, r3
 800abec:	f001 f8d4 	bl	800bd98 <xTaskRemoveFromEventList>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00e      	beq.n	800ac14 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00b      	beq.n	800ac14 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	2201      	movs	r2, #1
 800ac00:	601a      	str	r2, [r3, #0]
 800ac02:	e007      	b.n	800ac14 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac08:	3301      	adds	r3, #1
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	b25a      	sxtb	r2, r3
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ac14:	2301      	movs	r3, #1
 800ac16:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac18:	e001      	b.n	800ac1e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac20:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f383 8811 	msr	BASEPRI, r3
}
 800ac28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3738      	adds	r7, #56	@ 0x38
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b08c      	sub	sp, #48	@ 0x30
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac40:	2300      	movs	r3, #0
 800ac42:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10b      	bne.n	800ac66 <xQueueReceive+0x32>
	__asm volatile
 800ac4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac52:	f383 8811 	msr	BASEPRI, r3
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	623b      	str	r3, [r7, #32]
}
 800ac60:	bf00      	nop
 800ac62:	bf00      	nop
 800ac64:	e7fd      	b.n	800ac62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d103      	bne.n	800ac74 <xQueueReceive+0x40>
 800ac6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d101      	bne.n	800ac78 <xQueueReceive+0x44>
 800ac74:	2301      	movs	r3, #1
 800ac76:	e000      	b.n	800ac7a <xQueueReceive+0x46>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10b      	bne.n	800ac96 <xQueueReceive+0x62>
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	61fb      	str	r3, [r7, #28]
}
 800ac90:	bf00      	nop
 800ac92:	bf00      	nop
 800ac94:	e7fd      	b.n	800ac92 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac96:	f001 fa4f 	bl	800c138 <xTaskGetSchedulerState>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d102      	bne.n	800aca6 <xQueueReceive+0x72>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d101      	bne.n	800acaa <xQueueReceive+0x76>
 800aca6:	2301      	movs	r3, #1
 800aca8:	e000      	b.n	800acac <xQueueReceive+0x78>
 800acaa:	2300      	movs	r3, #0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d10b      	bne.n	800acc8 <xQueueReceive+0x94>
	__asm volatile
 800acb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb4:	f383 8811 	msr	BASEPRI, r3
 800acb8:	f3bf 8f6f 	isb	sy
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	61bb      	str	r3, [r7, #24]
}
 800acc2:	bf00      	nop
 800acc4:	bf00      	nop
 800acc6:	e7fd      	b.n	800acc4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acc8:	f002 f8a6 	bl	800ce18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800accc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acd0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d01f      	beq.n	800ad18 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800acd8:	68b9      	ldr	r1, [r7, #8]
 800acda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acdc:	f000 fac4 	bl	800b268 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ace0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace2:	1e5a      	subs	r2, r3, #1
 800ace4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ace8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d00f      	beq.n	800ad10 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf2:	3310      	adds	r3, #16
 800acf4:	4618      	mov	r0, r3
 800acf6:	f001 f84f 	bl	800bd98 <xTaskRemoveFromEventList>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d007      	beq.n	800ad10 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad00:	4b3c      	ldr	r3, [pc, #240]	@ (800adf4 <xQueueReceive+0x1c0>)
 800ad02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad06:	601a      	str	r2, [r3, #0]
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad10:	f002 f8b4 	bl	800ce7c <vPortExitCritical>
				return pdPASS;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e069      	b.n	800adec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d103      	bne.n	800ad26 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad1e:	f002 f8ad 	bl	800ce7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad22:	2300      	movs	r3, #0
 800ad24:	e062      	b.n	800adec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d106      	bne.n	800ad3a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad2c:	f107 0310 	add.w	r3, r7, #16
 800ad30:	4618      	mov	r0, r3
 800ad32:	f001 f895 	bl	800be60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad36:	2301      	movs	r3, #1
 800ad38:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad3a:	f002 f89f 	bl	800ce7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad3e:	f000 fe05 	bl	800b94c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad42:	f002 f869 	bl	800ce18 <vPortEnterCritical>
 800ad46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad4c:	b25b      	sxtb	r3, r3
 800ad4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad52:	d103      	bne.n	800ad5c <xQueueReceive+0x128>
 800ad54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad56:	2200      	movs	r2, #0
 800ad58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad62:	b25b      	sxtb	r3, r3
 800ad64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad68:	d103      	bne.n	800ad72 <xQueueReceive+0x13e>
 800ad6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad72:	f002 f883 	bl	800ce7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad76:	1d3a      	adds	r2, r7, #4
 800ad78:	f107 0310 	add.w	r3, r7, #16
 800ad7c:	4611      	mov	r1, r2
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f001 f884 	bl	800be8c <xTaskCheckForTimeOut>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d123      	bne.n	800add2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad8c:	f000 fae4 	bl	800b358 <prvIsQueueEmpty>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d017      	beq.n	800adc6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad98:	3324      	adds	r3, #36	@ 0x24
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f000 ffa8 	bl	800bcf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ada4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ada6:	f000 fa85 	bl	800b2b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800adaa:	f000 fddd 	bl	800b968 <xTaskResumeAll>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d189      	bne.n	800acc8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800adb4:	4b0f      	ldr	r3, [pc, #60]	@ (800adf4 <xQueueReceive+0x1c0>)
 800adb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adba:	601a      	str	r2, [r3, #0]
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	e780      	b.n	800acc8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800adc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adc8:	f000 fa74 	bl	800b2b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adcc:	f000 fdcc 	bl	800b968 <xTaskResumeAll>
 800add0:	e77a      	b.n	800acc8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800add2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800add4:	f000 fa6e 	bl	800b2b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800add8:	f000 fdc6 	bl	800b968 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800addc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adde:	f000 fabb 	bl	800b358 <prvIsQueueEmpty>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f43f af6f 	beq.w	800acc8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800adea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800adec:	4618      	mov	r0, r3
 800adee:	3730      	adds	r7, #48	@ 0x30
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	e000ed04 	.word	0xe000ed04

0800adf8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b08e      	sub	sp, #56	@ 0x38
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ae02:	2300      	movs	r3, #0
 800ae04:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ae0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10b      	bne.n	800ae2c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800ae14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	623b      	str	r3, [r7, #32]
}
 800ae26:	bf00      	nop
 800ae28:	bf00      	nop
 800ae2a:	e7fd      	b.n	800ae28 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ae2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00b      	beq.n	800ae4c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	61fb      	str	r3, [r7, #28]
}
 800ae46:	bf00      	nop
 800ae48:	bf00      	nop
 800ae4a:	e7fd      	b.n	800ae48 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae4c:	f001 f974 	bl	800c138 <xTaskGetSchedulerState>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d102      	bne.n	800ae5c <xQueueSemaphoreTake+0x64>
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d101      	bne.n	800ae60 <xQueueSemaphoreTake+0x68>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e000      	b.n	800ae62 <xQueueSemaphoreTake+0x6a>
 800ae60:	2300      	movs	r3, #0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10b      	bne.n	800ae7e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800ae66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae6a:	f383 8811 	msr	BASEPRI, r3
 800ae6e:	f3bf 8f6f 	isb	sy
 800ae72:	f3bf 8f4f 	dsb	sy
 800ae76:	61bb      	str	r3, [r7, #24]
}
 800ae78:	bf00      	nop
 800ae7a:	bf00      	nop
 800ae7c:	e7fd      	b.n	800ae7a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae7e:	f001 ffcb 	bl	800ce18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ae82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae86:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ae88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d024      	beq.n	800aed8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ae8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae90:	1e5a      	subs	r2, r3, #1
 800ae92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae94:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d104      	bne.n	800aea8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ae9e:	f001 fac5 	bl	800c42c <pvTaskIncrementMutexHeldCount>
 800aea2:	4602      	mov	r2, r0
 800aea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d00f      	beq.n	800aed0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aeb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeb2:	3310      	adds	r3, #16
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 ff6f 	bl	800bd98 <xTaskRemoveFromEventList>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d007      	beq.n	800aed0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aec0:	4b54      	ldr	r3, [pc, #336]	@ (800b014 <xQueueSemaphoreTake+0x21c>)
 800aec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aec6:	601a      	str	r2, [r3, #0]
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aed0:	f001 ffd4 	bl	800ce7c <vPortExitCritical>
				return pdPASS;
 800aed4:	2301      	movs	r3, #1
 800aed6:	e098      	b.n	800b00a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d112      	bne.n	800af04 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d00b      	beq.n	800aefc <xQueueSemaphoreTake+0x104>
	__asm volatile
 800aee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee8:	f383 8811 	msr	BASEPRI, r3
 800aeec:	f3bf 8f6f 	isb	sy
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	617b      	str	r3, [r7, #20]
}
 800aef6:	bf00      	nop
 800aef8:	bf00      	nop
 800aefa:	e7fd      	b.n	800aef8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aefc:	f001 ffbe 	bl	800ce7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af00:	2300      	movs	r3, #0
 800af02:	e082      	b.n	800b00a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af06:	2b00      	cmp	r3, #0
 800af08:	d106      	bne.n	800af18 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af0a:	f107 030c 	add.w	r3, r7, #12
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 ffa6 	bl	800be60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af14:	2301      	movs	r3, #1
 800af16:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af18:	f001 ffb0 	bl	800ce7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af1c:	f000 fd16 	bl	800b94c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af20:	f001 ff7a 	bl	800ce18 <vPortEnterCritical>
 800af24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af2a:	b25b      	sxtb	r3, r3
 800af2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af30:	d103      	bne.n	800af3a <xQueueSemaphoreTake+0x142>
 800af32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af34:	2200      	movs	r2, #0
 800af36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af40:	b25b      	sxtb	r3, r3
 800af42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af46:	d103      	bne.n	800af50 <xQueueSemaphoreTake+0x158>
 800af48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af50:	f001 ff94 	bl	800ce7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af54:	463a      	mov	r2, r7
 800af56:	f107 030c 	add.w	r3, r7, #12
 800af5a:	4611      	mov	r1, r2
 800af5c:	4618      	mov	r0, r3
 800af5e:	f000 ff95 	bl	800be8c <xTaskCheckForTimeOut>
 800af62:	4603      	mov	r3, r0
 800af64:	2b00      	cmp	r3, #0
 800af66:	d132      	bne.n	800afce <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800af6a:	f000 f9f5 	bl	800b358 <prvIsQueueEmpty>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d026      	beq.n	800afc2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d109      	bne.n	800af90 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800af7c:	f001 ff4c 	bl	800ce18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	4618      	mov	r0, r3
 800af86:	f001 f8f5 	bl	800c174 <xTaskPriorityInherit>
 800af8a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800af8c:	f001 ff76 	bl	800ce7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af92:	3324      	adds	r3, #36	@ 0x24
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	4611      	mov	r1, r2
 800af98:	4618      	mov	r0, r3
 800af9a:	f000 feab 	bl	800bcf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800afa0:	f000 f988 	bl	800b2b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800afa4:	f000 fce0 	bl	800b968 <xTaskResumeAll>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f47f af67 	bne.w	800ae7e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800afb0:	4b18      	ldr	r3, [pc, #96]	@ (800b014 <xQueueSemaphoreTake+0x21c>)
 800afb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afb6:	601a      	str	r2, [r3, #0]
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	f3bf 8f6f 	isb	sy
 800afc0:	e75d      	b.n	800ae7e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800afc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800afc4:	f000 f976 	bl	800b2b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afc8:	f000 fcce 	bl	800b968 <xTaskResumeAll>
 800afcc:	e757      	b.n	800ae7e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800afce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800afd0:	f000 f970 	bl	800b2b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afd4:	f000 fcc8 	bl	800b968 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800afda:	f000 f9bd 	bl	800b358 <prvIsQueueEmpty>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f43f af4c 	beq.w	800ae7e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800afe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d00d      	beq.n	800b008 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800afec:	f001 ff14 	bl	800ce18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aff0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aff2:	f000 f8b7 	bl	800b164 <prvGetDisinheritPriorityAfterTimeout>
 800aff6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800affe:	4618      	mov	r0, r3
 800b000:	f001 f990 	bl	800c324 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b004:	f001 ff3a 	bl	800ce7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b008:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3738      	adds	r7, #56	@ 0x38
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	e000ed04 	.word	0xe000ed04

0800b018 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b08e      	sub	sp, #56	@ 0x38
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d10b      	bne.n	800b046 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b032:	f383 8811 	msr	BASEPRI, r3
 800b036:	f3bf 8f6f 	isb	sy
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	623b      	str	r3, [r7, #32]
}
 800b040:	bf00      	nop
 800b042:	bf00      	nop
 800b044:	e7fd      	b.n	800b042 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d103      	bne.n	800b054 <xQueueReceiveFromISR+0x3c>
 800b04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b050:	2b00      	cmp	r3, #0
 800b052:	d101      	bne.n	800b058 <xQueueReceiveFromISR+0x40>
 800b054:	2301      	movs	r3, #1
 800b056:	e000      	b.n	800b05a <xQueueReceiveFromISR+0x42>
 800b058:	2300      	movs	r3, #0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d10b      	bne.n	800b076 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	61fb      	str	r3, [r7, #28]
}
 800b070:	bf00      	nop
 800b072:	bf00      	nop
 800b074:	e7fd      	b.n	800b072 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b076:	f001 ffaf 	bl	800cfd8 <vPortValidateInterruptPriority>
	__asm volatile
 800b07a:	f3ef 8211 	mrs	r2, BASEPRI
 800b07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	61ba      	str	r2, [r7, #24]
 800b090:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b092:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b094:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b09a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d02f      	beq.n	800b102 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0ac:	68b9      	ldr	r1, [r7, #8]
 800b0ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0b0:	f000 f8da 	bl	800b268 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b6:	1e5a      	subs	r2, r3, #1
 800b0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b0bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c4:	d112      	bne.n	800b0ec <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c8:	691b      	ldr	r3, [r3, #16]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d016      	beq.n	800b0fc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d0:	3310      	adds	r3, #16
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 fe60 	bl	800bd98 <xTaskRemoveFromEventList>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00e      	beq.n	800b0fc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00b      	beq.n	800b0fc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	601a      	str	r2, [r3, #0]
 800b0ea:	e007      	b.n	800b0fc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b0ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	b25a      	sxtb	r2, r3
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b100:	e001      	b.n	800b106 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b102:	2300      	movs	r3, #0
 800b104:	637b      	str	r3, [r7, #52]	@ 0x34
 800b106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b108:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	f383 8811 	msr	BASEPRI, r3
}
 800b110:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b114:	4618      	mov	r0, r3
 800b116:	3738      	adds	r7, #56	@ 0x38
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d10b      	bne.n	800b146 <vQueueDelete+0x2a>
	__asm volatile
 800b12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b132:	f383 8811 	msr	BASEPRI, r3
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	60bb      	str	r3, [r7, #8]
}
 800b140:	bf00      	nop
 800b142:	bf00      	nop
 800b144:	e7fd      	b.n	800b142 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f000 f95e 	bl	800b408 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b152:	2b00      	cmp	r3, #0
 800b154:	d102      	bne.n	800b15c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800b156:	68f8      	ldr	r0, [r7, #12]
 800b158:	f002 f84e 	bl	800d1f8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b15c:	bf00      	nop
 800b15e:	3710      	adds	r7, #16
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b170:	2b00      	cmp	r3, #0
 800b172:	d006      	beq.n	800b182 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800b17e:	60fb      	str	r3, [r7, #12]
 800b180:	e001      	b.n	800b186 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b182:	2300      	movs	r3, #0
 800b184:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b186:	68fb      	ldr	r3, [r7, #12]
	}
 800b188:	4618      	mov	r0, r3
 800b18a:	3714      	adds	r7, #20
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d10d      	bne.n	800b1ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d14d      	bne.n	800b256 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f001 f840 	bl	800c244 <xTaskPriorityDisinherit>
 800b1c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	609a      	str	r2, [r3, #8]
 800b1cc:	e043      	b.n	800b256 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d119      	bne.n	800b208 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6858      	ldr	r0, [r3, #4]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1dc:	461a      	mov	r2, r3
 800b1de:	68b9      	ldr	r1, [r7, #8]
 800b1e0:	f002 f994 	bl	800d50c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	685a      	ldr	r2, [r3, #4]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ec:	441a      	add	r2, r3
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	685a      	ldr	r2, [r3, #4]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d32b      	bcc.n	800b256 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	605a      	str	r2, [r3, #4]
 800b206:	e026      	b.n	800b256 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	68d8      	ldr	r0, [r3, #12]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b210:	461a      	mov	r2, r3
 800b212:	68b9      	ldr	r1, [r7, #8]
 800b214:	f002 f97a 	bl	800d50c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	68da      	ldr	r2, [r3, #12]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b220:	425b      	negs	r3, r3
 800b222:	441a      	add	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	68da      	ldr	r2, [r3, #12]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	429a      	cmp	r2, r3
 800b232:	d207      	bcs.n	800b244 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	689a      	ldr	r2, [r3, #8]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b23c:	425b      	negs	r3, r3
 800b23e:	441a      	add	r2, r3
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2b02      	cmp	r3, #2
 800b248:	d105      	bne.n	800b256 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d002      	beq.n	800b256 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	3b01      	subs	r3, #1
 800b254:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	1c5a      	adds	r2, r3, #1
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b25e:	697b      	ldr	r3, [r7, #20]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3718      	adds	r7, #24
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b276:	2b00      	cmp	r3, #0
 800b278:	d018      	beq.n	800b2ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	68da      	ldr	r2, [r3, #12]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b282:	441a      	add	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	68da      	ldr	r2, [r3, #12]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	429a      	cmp	r2, r3
 800b292:	d303      	bcc.n	800b29c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	68d9      	ldr	r1, [r3, #12]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	6838      	ldr	r0, [r7, #0]
 800b2a8:	f002 f930 	bl	800d50c <memcpy>
	}
}
 800b2ac:	bf00      	nop
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b2bc:	f001 fdac 	bl	800ce18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2c8:	e011      	b.n	800b2ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d012      	beq.n	800b2f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	3324      	adds	r3, #36	@ 0x24
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f000 fd5e 	bl	800bd98 <xTaskRemoveFromEventList>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b2e2:	f000 fe37 	bl	800bf54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b2e6:	7bfb      	ldrb	r3, [r7, #15]
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	dce9      	bgt.n	800b2ca <prvUnlockQueue+0x16>
 800b2f6:	e000      	b.n	800b2fa <prvUnlockQueue+0x46>
					break;
 800b2f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	22ff      	movs	r2, #255	@ 0xff
 800b2fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b302:	f001 fdbb 	bl	800ce7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b306:	f001 fd87 	bl	800ce18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b310:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b312:	e011      	b.n	800b338 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d012      	beq.n	800b342 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3310      	adds	r3, #16
 800b320:	4618      	mov	r0, r3
 800b322:	f000 fd39 	bl	800bd98 <xTaskRemoveFromEventList>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d001      	beq.n	800b330 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b32c:	f000 fe12 	bl	800bf54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b330:	7bbb      	ldrb	r3, [r7, #14]
 800b332:	3b01      	subs	r3, #1
 800b334:	b2db      	uxtb	r3, r3
 800b336:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	dce9      	bgt.n	800b314 <prvUnlockQueue+0x60>
 800b340:	e000      	b.n	800b344 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b342:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	22ff      	movs	r2, #255	@ 0xff
 800b348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b34c:	f001 fd96 	bl	800ce7c <vPortExitCritical>
}
 800b350:	bf00      	nop
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b360:	f001 fd5a 	bl	800ce18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d102      	bne.n	800b372 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b36c:	2301      	movs	r3, #1
 800b36e:	60fb      	str	r3, [r7, #12]
 800b370:	e001      	b.n	800b376 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b372:	2300      	movs	r3, #0
 800b374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b376:	f001 fd81 	bl	800ce7c <vPortExitCritical>

	return xReturn;
 800b37a:	68fb      	ldr	r3, [r7, #12]
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3710      	adds	r7, #16
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b38c:	f001 fd44 	bl	800ce18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b398:	429a      	cmp	r2, r3
 800b39a:	d102      	bne.n	800b3a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b39c:	2301      	movs	r3, #1
 800b39e:	60fb      	str	r3, [r7, #12]
 800b3a0:	e001      	b.n	800b3a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3a6:	f001 fd69 	bl	800ce7c <vPortExitCritical>

	return xReturn;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3be:	2300      	movs	r3, #0
 800b3c0:	60fb      	str	r3, [r7, #12]
 800b3c2:	e014      	b.n	800b3ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b3c4:	4a0f      	ldr	r2, [pc, #60]	@ (800b404 <vQueueAddToRegistry+0x50>)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d10b      	bne.n	800b3e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b3d0:	490c      	ldr	r1, [pc, #48]	@ (800b404 <vQueueAddToRegistry+0x50>)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	683a      	ldr	r2, [r7, #0]
 800b3d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b3da:	4a0a      	ldr	r2, [pc, #40]	@ (800b404 <vQueueAddToRegistry+0x50>)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	00db      	lsls	r3, r3, #3
 800b3e0:	4413      	add	r3, r2
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b3e6:	e006      	b.n	800b3f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	60fb      	str	r3, [r7, #12]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2b07      	cmp	r3, #7
 800b3f2:	d9e7      	bls.n	800b3c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b3f4:	bf00      	nop
 800b3f6:	bf00      	nop
 800b3f8:	3714      	adds	r7, #20
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	20000cc8 	.word	0x20000cc8

0800b408 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b408:	b480      	push	{r7}
 800b40a:	b085      	sub	sp, #20
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b410:	2300      	movs	r3, #0
 800b412:	60fb      	str	r3, [r7, #12]
 800b414:	e016      	b.n	800b444 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b416:	4a10      	ldr	r2, [pc, #64]	@ (800b458 <vQueueUnregisterQueue+0x50>)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	00db      	lsls	r3, r3, #3
 800b41c:	4413      	add	r3, r2
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	429a      	cmp	r2, r3
 800b424:	d10b      	bne.n	800b43e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b426:	4a0c      	ldr	r2, [pc, #48]	@ (800b458 <vQueueUnregisterQueue+0x50>)
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2100      	movs	r1, #0
 800b42c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b430:	4a09      	ldr	r2, [pc, #36]	@ (800b458 <vQueueUnregisterQueue+0x50>)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	00db      	lsls	r3, r3, #3
 800b436:	4413      	add	r3, r2
 800b438:	2200      	movs	r2, #0
 800b43a:	605a      	str	r2, [r3, #4]
				break;
 800b43c:	e006      	b.n	800b44c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	3301      	adds	r3, #1
 800b442:	60fb      	str	r3, [r7, #12]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2b07      	cmp	r3, #7
 800b448:	d9e5      	bls.n	800b416 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b44a:	bf00      	nop
 800b44c:	bf00      	nop
 800b44e:	3714      	adds	r7, #20
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr
 800b458:	20000cc8 	.word	0x20000cc8

0800b45c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b086      	sub	sp, #24
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b46c:	f001 fcd4 	bl	800ce18 <vPortEnterCritical>
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b476:	b25b      	sxtb	r3, r3
 800b478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b47c:	d103      	bne.n	800b486 <vQueueWaitForMessageRestricted+0x2a>
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	2200      	movs	r2, #0
 800b482:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b48c:	b25b      	sxtb	r3, r3
 800b48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b492:	d103      	bne.n	800b49c <vQueueWaitForMessageRestricted+0x40>
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b49c:	f001 fcee 	bl	800ce7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d106      	bne.n	800b4b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	3324      	adds	r3, #36	@ 0x24
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	68b9      	ldr	r1, [r7, #8]
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f000 fc45 	bl	800bd40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b4b6:	6978      	ldr	r0, [r7, #20]
 800b4b8:	f7ff fefc 	bl	800b2b4 <prvUnlockQueue>
	}
 800b4bc:	bf00      	nop
 800b4be:	3718      	adds	r7, #24
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b08e      	sub	sp, #56	@ 0x38
 800b4c8:	af04      	add	r7, sp, #16
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
 800b4d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b4d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10b      	bne.n	800b4f0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	623b      	str	r3, [r7, #32]
}
 800b4ea:	bf00      	nop
 800b4ec:	bf00      	nop
 800b4ee:	e7fd      	b.n	800b4ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10b      	bne.n	800b50e <xTaskCreateStatic+0x4a>
	__asm volatile
 800b4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	61fb      	str	r3, [r7, #28]
}
 800b508:	bf00      	nop
 800b50a:	bf00      	nop
 800b50c:	e7fd      	b.n	800b50a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b50e:	235c      	movs	r3, #92	@ 0x5c
 800b510:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	2b5c      	cmp	r3, #92	@ 0x5c
 800b516:	d00b      	beq.n	800b530 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b51c:	f383 8811 	msr	BASEPRI, r3
 800b520:	f3bf 8f6f 	isb	sy
 800b524:	f3bf 8f4f 	dsb	sy
 800b528:	61bb      	str	r3, [r7, #24]
}
 800b52a:	bf00      	nop
 800b52c:	bf00      	nop
 800b52e:	e7fd      	b.n	800b52c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b530:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b534:	2b00      	cmp	r3, #0
 800b536:	d01e      	beq.n	800b576 <xTaskCreateStatic+0xb2>
 800b538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d01b      	beq.n	800b576 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b540:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b544:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b546:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b54a:	2202      	movs	r2, #2
 800b54c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b550:	2300      	movs	r3, #0
 800b552:	9303      	str	r3, [sp, #12]
 800b554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b556:	9302      	str	r3, [sp, #8]
 800b558:	f107 0314 	add.w	r3, r7, #20
 800b55c:	9301      	str	r3, [sp, #4]
 800b55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b560:	9300      	str	r3, [sp, #0]
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	68b9      	ldr	r1, [r7, #8]
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f000 f850 	bl	800b60e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b56e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b570:	f000 f8de 	bl	800b730 <prvAddNewTaskToReadyList>
 800b574:	e001      	b.n	800b57a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b576:	2300      	movs	r3, #0
 800b578:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b57a:	697b      	ldr	r3, [r7, #20]
	}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3728      	adds	r7, #40	@ 0x28
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b584:	b580      	push	{r7, lr}
 800b586:	b08c      	sub	sp, #48	@ 0x30
 800b588:	af04      	add	r7, sp, #16
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	603b      	str	r3, [r7, #0]
 800b590:	4613      	mov	r3, r2
 800b592:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b594:	88fb      	ldrh	r3, [r7, #6]
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	4618      	mov	r0, r3
 800b59a:	f001 fd5f 	bl	800d05c <pvPortMalloc>
 800b59e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00e      	beq.n	800b5c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b5a6:	205c      	movs	r0, #92	@ 0x5c
 800b5a8:	f001 fd58 	bl	800d05c <pvPortMalloc>
 800b5ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d003      	beq.n	800b5bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	697a      	ldr	r2, [r7, #20]
 800b5b8:	631a      	str	r2, [r3, #48]	@ 0x30
 800b5ba:	e005      	b.n	800b5c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5bc:	6978      	ldr	r0, [r7, #20]
 800b5be:	f001 fe1b 	bl	800d1f8 <vPortFree>
 800b5c2:	e001      	b.n	800b5c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d017      	beq.n	800b5fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b5d6:	88fa      	ldrh	r2, [r7, #6]
 800b5d8:	2300      	movs	r3, #0
 800b5da:	9303      	str	r3, [sp, #12]
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	9302      	str	r3, [sp, #8]
 800b5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5e2:	9301      	str	r3, [sp, #4]
 800b5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5e6:	9300      	str	r3, [sp, #0]
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	68b9      	ldr	r1, [r7, #8]
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f000 f80e 	bl	800b60e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5f2:	69f8      	ldr	r0, [r7, #28]
 800b5f4:	f000 f89c 	bl	800b730 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	61bb      	str	r3, [r7, #24]
 800b5fc:	e002      	b.n	800b604 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b5fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b602:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b604:	69bb      	ldr	r3, [r7, #24]
	}
 800b606:	4618      	mov	r0, r3
 800b608:	3720      	adds	r7, #32
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b088      	sub	sp, #32
 800b612:	af00      	add	r7, sp, #0
 800b614:	60f8      	str	r0, [r7, #12]
 800b616:	60b9      	str	r1, [r7, #8]
 800b618:	607a      	str	r2, [r7, #4]
 800b61a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b61e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	461a      	mov	r2, r3
 800b626:	21a5      	movs	r1, #165	@ 0xa5
 800b628:	f001 ff3c 	bl	800d4a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b62e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b636:	3b01      	subs	r3, #1
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	4413      	add	r3, r2
 800b63c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	f023 0307 	bic.w	r3, r3, #7
 800b644:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	f003 0307 	and.w	r3, r3, #7
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00b      	beq.n	800b668 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b654:	f383 8811 	msr	BASEPRI, r3
 800b658:	f3bf 8f6f 	isb	sy
 800b65c:	f3bf 8f4f 	dsb	sy
 800b660:	617b      	str	r3, [r7, #20]
}
 800b662:	bf00      	nop
 800b664:	bf00      	nop
 800b666:	e7fd      	b.n	800b664 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d01f      	beq.n	800b6ae <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b66e:	2300      	movs	r3, #0
 800b670:	61fb      	str	r3, [r7, #28]
 800b672:	e012      	b.n	800b69a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b674:	68ba      	ldr	r2, [r7, #8]
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	4413      	add	r3, r2
 800b67a:	7819      	ldrb	r1, [r3, #0]
 800b67c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	4413      	add	r3, r2
 800b682:	3334      	adds	r3, #52	@ 0x34
 800b684:	460a      	mov	r2, r1
 800b686:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b688:	68ba      	ldr	r2, [r7, #8]
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	4413      	add	r3, r2
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d006      	beq.n	800b6a2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	3301      	adds	r3, #1
 800b698:	61fb      	str	r3, [r7, #28]
 800b69a:	69fb      	ldr	r3, [r7, #28]
 800b69c:	2b0f      	cmp	r3, #15
 800b69e:	d9e9      	bls.n	800b674 <prvInitialiseNewTask+0x66>
 800b6a0:	e000      	b.n	800b6a4 <prvInitialiseNewTask+0x96>
			{
				break;
 800b6a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b6ac:	e003      	b.n	800b6b6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b8:	2b37      	cmp	r3, #55	@ 0x37
 800b6ba:	d901      	bls.n	800b6c0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6bc:	2337      	movs	r3, #55	@ 0x37
 800b6be:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6ca:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7fe fd7c 	bl	800a1d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6de:	3318      	adds	r3, #24
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7fe fd77 	bl	800a1d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6fa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fe:	2200      	movs	r2, #0
 800b700:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b704:	2200      	movs	r2, #0
 800b706:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b70a:	683a      	ldr	r2, [r7, #0]
 800b70c:	68f9      	ldr	r1, [r7, #12]
 800b70e:	69b8      	ldr	r0, [r7, #24]
 800b710:	f001 fa4e 	bl	800cbb0 <pxPortInitialiseStack>
 800b714:	4602      	mov	r2, r0
 800b716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b718:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d002      	beq.n	800b726 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b726:	bf00      	nop
 800b728:	3720      	adds	r7, #32
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
	...

0800b730 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b738:	f001 fb6e 	bl	800ce18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b73c:	4b2d      	ldr	r3, [pc, #180]	@ (800b7f4 <prvAddNewTaskToReadyList+0xc4>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3301      	adds	r3, #1
 800b742:	4a2c      	ldr	r2, [pc, #176]	@ (800b7f4 <prvAddNewTaskToReadyList+0xc4>)
 800b744:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b746:	4b2c      	ldr	r3, [pc, #176]	@ (800b7f8 <prvAddNewTaskToReadyList+0xc8>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d109      	bne.n	800b762 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b74e:	4a2a      	ldr	r2, [pc, #168]	@ (800b7f8 <prvAddNewTaskToReadyList+0xc8>)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b754:	4b27      	ldr	r3, [pc, #156]	@ (800b7f4 <prvAddNewTaskToReadyList+0xc4>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d110      	bne.n	800b77e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b75c:	f000 fc1e 	bl	800bf9c <prvInitialiseTaskLists>
 800b760:	e00d      	b.n	800b77e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b762:	4b26      	ldr	r3, [pc, #152]	@ (800b7fc <prvAddNewTaskToReadyList+0xcc>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d109      	bne.n	800b77e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b76a:	4b23      	ldr	r3, [pc, #140]	@ (800b7f8 <prvAddNewTaskToReadyList+0xc8>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b774:	429a      	cmp	r2, r3
 800b776:	d802      	bhi.n	800b77e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b778:	4a1f      	ldr	r2, [pc, #124]	@ (800b7f8 <prvAddNewTaskToReadyList+0xc8>)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b77e:	4b20      	ldr	r3, [pc, #128]	@ (800b800 <prvAddNewTaskToReadyList+0xd0>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	3301      	adds	r3, #1
 800b784:	4a1e      	ldr	r2, [pc, #120]	@ (800b800 <prvAddNewTaskToReadyList+0xd0>)
 800b786:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b788:	4b1d      	ldr	r3, [pc, #116]	@ (800b800 <prvAddNewTaskToReadyList+0xd0>)
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b794:	4b1b      	ldr	r3, [pc, #108]	@ (800b804 <prvAddNewTaskToReadyList+0xd4>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d903      	bls.n	800b7a4 <prvAddNewTaskToReadyList+0x74>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7a0:	4a18      	ldr	r2, [pc, #96]	@ (800b804 <prvAddNewTaskToReadyList+0xd4>)
 800b7a2:	6013      	str	r3, [r2, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	4413      	add	r3, r2
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	4a15      	ldr	r2, [pc, #84]	@ (800b808 <prvAddNewTaskToReadyList+0xd8>)
 800b7b2:	441a      	add	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	3304      	adds	r3, #4
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	4610      	mov	r0, r2
 800b7bc:	f7fe fd17 	bl	800a1ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b7c0:	f001 fb5c 	bl	800ce7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b7c4:	4b0d      	ldr	r3, [pc, #52]	@ (800b7fc <prvAddNewTaskToReadyList+0xcc>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00e      	beq.n	800b7ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b7cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b7f8 <prvAddNewTaskToReadyList+0xc8>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d207      	bcs.n	800b7ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b7da:	4b0c      	ldr	r3, [pc, #48]	@ (800b80c <prvAddNewTaskToReadyList+0xdc>)
 800b7dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7e0:	601a      	str	r2, [r3, #0]
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7ea:	bf00      	nop
 800b7ec:	3708      	adds	r7, #8
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	200011dc 	.word	0x200011dc
 800b7f8:	20000d08 	.word	0x20000d08
 800b7fc:	200011e8 	.word	0x200011e8
 800b800:	200011f8 	.word	0x200011f8
 800b804:	200011e4 	.word	0x200011e4
 800b808:	20000d0c 	.word	0x20000d0c
 800b80c:	e000ed04 	.word	0xe000ed04

0800b810 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b818:	2300      	movs	r3, #0
 800b81a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d018      	beq.n	800b854 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b822:	4b14      	ldr	r3, [pc, #80]	@ (800b874 <vTaskDelay+0x64>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00b      	beq.n	800b842 <vTaskDelay+0x32>
	__asm volatile
 800b82a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b82e:	f383 8811 	msr	BASEPRI, r3
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	f3bf 8f4f 	dsb	sy
 800b83a:	60bb      	str	r3, [r7, #8]
}
 800b83c:	bf00      	nop
 800b83e:	bf00      	nop
 800b840:	e7fd      	b.n	800b83e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b842:	f000 f883 	bl	800b94c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b846:	2100      	movs	r1, #0
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 fe03 	bl	800c454 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b84e:	f000 f88b 	bl	800b968 <xTaskResumeAll>
 800b852:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d107      	bne.n	800b86a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b85a:	4b07      	ldr	r3, [pc, #28]	@ (800b878 <vTaskDelay+0x68>)
 800b85c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b860:	601a      	str	r2, [r3, #0]
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b86a:	bf00      	nop
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	20001204 	.word	0x20001204
 800b878:	e000ed04 	.word	0xe000ed04

0800b87c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b08a      	sub	sp, #40	@ 0x28
 800b880:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b882:	2300      	movs	r3, #0
 800b884:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b886:	2300      	movs	r3, #0
 800b888:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b88a:	463a      	mov	r2, r7
 800b88c:	1d39      	adds	r1, r7, #4
 800b88e:	f107 0308 	add.w	r3, r7, #8
 800b892:	4618      	mov	r0, r3
 800b894:	f7fe fc4a 	bl	800a12c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b898:	6839      	ldr	r1, [r7, #0]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	9202      	str	r2, [sp, #8]
 800b8a0:	9301      	str	r3, [sp, #4]
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	9300      	str	r3, [sp, #0]
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	460a      	mov	r2, r1
 800b8aa:	4922      	ldr	r1, [pc, #136]	@ (800b934 <vTaskStartScheduler+0xb8>)
 800b8ac:	4822      	ldr	r0, [pc, #136]	@ (800b938 <vTaskStartScheduler+0xbc>)
 800b8ae:	f7ff fe09 	bl	800b4c4 <xTaskCreateStatic>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	4a21      	ldr	r2, [pc, #132]	@ (800b93c <vTaskStartScheduler+0xc0>)
 800b8b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b8b8:	4b20      	ldr	r3, [pc, #128]	@ (800b93c <vTaskStartScheduler+0xc0>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d002      	beq.n	800b8c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	617b      	str	r3, [r7, #20]
 800b8c4:	e001      	b.n	800b8ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d102      	bne.n	800b8d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b8d0:	f000 fe14 	bl	800c4fc <xTimerCreateTimerTask>
 800b8d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d116      	bne.n	800b90a <vTaskStartScheduler+0x8e>
	__asm volatile
 800b8dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e0:	f383 8811 	msr	BASEPRI, r3
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	613b      	str	r3, [r7, #16]
}
 800b8ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b8f0:	4b13      	ldr	r3, [pc, #76]	@ (800b940 <vTaskStartScheduler+0xc4>)
 800b8f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b8f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b8f8:	4b12      	ldr	r3, [pc, #72]	@ (800b944 <vTaskStartScheduler+0xc8>)
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b8fe:	4b12      	ldr	r3, [pc, #72]	@ (800b948 <vTaskStartScheduler+0xcc>)
 800b900:	2200      	movs	r2, #0
 800b902:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b904:	f001 f9e4 	bl	800ccd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b908:	e00f      	b.n	800b92a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b910:	d10b      	bne.n	800b92a <vTaskStartScheduler+0xae>
	__asm volatile
 800b912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b916:	f383 8811 	msr	BASEPRI, r3
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	60fb      	str	r3, [r7, #12]
}
 800b924:	bf00      	nop
 800b926:	bf00      	nop
 800b928:	e7fd      	b.n	800b926 <vTaskStartScheduler+0xaa>
}
 800b92a:	bf00      	nop
 800b92c:	3718      	adds	r7, #24
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	0800de28 	.word	0x0800de28
 800b938:	0800bf6d 	.word	0x0800bf6d
 800b93c:	20001200 	.word	0x20001200
 800b940:	200011fc 	.word	0x200011fc
 800b944:	200011e8 	.word	0x200011e8
 800b948:	200011e0 	.word	0x200011e0

0800b94c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b94c:	b480      	push	{r7}
 800b94e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b950:	4b04      	ldr	r3, [pc, #16]	@ (800b964 <vTaskSuspendAll+0x18>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	3301      	adds	r3, #1
 800b956:	4a03      	ldr	r2, [pc, #12]	@ (800b964 <vTaskSuspendAll+0x18>)
 800b958:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b95a:	bf00      	nop
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr
 800b964:	20001204 	.word	0x20001204

0800b968 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b96e:	2300      	movs	r3, #0
 800b970:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b972:	2300      	movs	r3, #0
 800b974:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b976:	4b42      	ldr	r3, [pc, #264]	@ (800ba80 <xTaskResumeAll+0x118>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d10b      	bne.n	800b996 <xTaskResumeAll+0x2e>
	__asm volatile
 800b97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	603b      	str	r3, [r7, #0]
}
 800b990:	bf00      	nop
 800b992:	bf00      	nop
 800b994:	e7fd      	b.n	800b992 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b996:	f001 fa3f 	bl	800ce18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b99a:	4b39      	ldr	r3, [pc, #228]	@ (800ba80 <xTaskResumeAll+0x118>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	3b01      	subs	r3, #1
 800b9a0:	4a37      	ldr	r2, [pc, #220]	@ (800ba80 <xTaskResumeAll+0x118>)
 800b9a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9a4:	4b36      	ldr	r3, [pc, #216]	@ (800ba80 <xTaskResumeAll+0x118>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d162      	bne.n	800ba72 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b9ac:	4b35      	ldr	r3, [pc, #212]	@ (800ba84 <xTaskResumeAll+0x11c>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d05e      	beq.n	800ba72 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9b4:	e02f      	b.n	800ba16 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9b6:	4b34      	ldr	r3, [pc, #208]	@ (800ba88 <xTaskResumeAll+0x120>)
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3318      	adds	r3, #24
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fe fc70 	bl	800a2a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	3304      	adds	r3, #4
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7fe fc6b 	bl	800a2a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9d6:	4b2d      	ldr	r3, [pc, #180]	@ (800ba8c <xTaskResumeAll+0x124>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d903      	bls.n	800b9e6 <xTaskResumeAll+0x7e>
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9e2:	4a2a      	ldr	r2, [pc, #168]	@ (800ba8c <xTaskResumeAll+0x124>)
 800b9e4:	6013      	str	r3, [r2, #0]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	4413      	add	r3, r2
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	4a27      	ldr	r2, [pc, #156]	@ (800ba90 <xTaskResumeAll+0x128>)
 800b9f4:	441a      	add	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	3304      	adds	r3, #4
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	4610      	mov	r0, r2
 800b9fe:	f7fe fbf6 	bl	800a1ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba06:	4b23      	ldr	r3, [pc, #140]	@ (800ba94 <xTaskResumeAll+0x12c>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d302      	bcc.n	800ba16 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ba10:	4b21      	ldr	r3, [pc, #132]	@ (800ba98 <xTaskResumeAll+0x130>)
 800ba12:	2201      	movs	r2, #1
 800ba14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba16:	4b1c      	ldr	r3, [pc, #112]	@ (800ba88 <xTaskResumeAll+0x120>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d1cb      	bne.n	800b9b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d001      	beq.n	800ba28 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba24:	f000 fb58 	bl	800c0d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba28:	4b1c      	ldr	r3, [pc, #112]	@ (800ba9c <xTaskResumeAll+0x134>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d010      	beq.n	800ba56 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba34:	f000 f846 	bl	800bac4 <xTaskIncrementTick>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d002      	beq.n	800ba44 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ba3e:	4b16      	ldr	r3, [pc, #88]	@ (800ba98 <xTaskResumeAll+0x130>)
 800ba40:	2201      	movs	r2, #1
 800ba42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	3b01      	subs	r3, #1
 800ba48:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1f1      	bne.n	800ba34 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ba50:	4b12      	ldr	r3, [pc, #72]	@ (800ba9c <xTaskResumeAll+0x134>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba56:	4b10      	ldr	r3, [pc, #64]	@ (800ba98 <xTaskResumeAll+0x130>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d009      	beq.n	800ba72 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba62:	4b0f      	ldr	r3, [pc, #60]	@ (800baa0 <xTaskResumeAll+0x138>)
 800ba64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba68:	601a      	str	r2, [r3, #0]
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba72:	f001 fa03 	bl	800ce7c <vPortExitCritical>

	return xAlreadyYielded;
 800ba76:	68bb      	ldr	r3, [r7, #8]
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	20001204 	.word	0x20001204
 800ba84:	200011dc 	.word	0x200011dc
 800ba88:	2000119c 	.word	0x2000119c
 800ba8c:	200011e4 	.word	0x200011e4
 800ba90:	20000d0c 	.word	0x20000d0c
 800ba94:	20000d08 	.word	0x20000d08
 800ba98:	200011f0 	.word	0x200011f0
 800ba9c:	200011ec 	.word	0x200011ec
 800baa0:	e000ed04 	.word	0xe000ed04

0800baa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800baaa:	4b05      	ldr	r3, [pc, #20]	@ (800bac0 <xTaskGetTickCount+0x1c>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bab0:	687b      	ldr	r3, [r7, #4]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	370c      	adds	r7, #12
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop
 800bac0:	200011e0 	.word	0x200011e0

0800bac4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b086      	sub	sp, #24
 800bac8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800baca:	2300      	movs	r3, #0
 800bacc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bace:	4b4f      	ldr	r3, [pc, #316]	@ (800bc0c <xTaskIncrementTick+0x148>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	f040 8090 	bne.w	800bbf8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bad8:	4b4d      	ldr	r3, [pc, #308]	@ (800bc10 <xTaskIncrementTick+0x14c>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	3301      	adds	r3, #1
 800bade:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bae0:	4a4b      	ldr	r2, [pc, #300]	@ (800bc10 <xTaskIncrementTick+0x14c>)
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d121      	bne.n	800bb30 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800baec:	4b49      	ldr	r3, [pc, #292]	@ (800bc14 <xTaskIncrementTick+0x150>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d00b      	beq.n	800bb0e <xTaskIncrementTick+0x4a>
	__asm volatile
 800baf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bafa:	f383 8811 	msr	BASEPRI, r3
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	f3bf 8f4f 	dsb	sy
 800bb06:	603b      	str	r3, [r7, #0]
}
 800bb08:	bf00      	nop
 800bb0a:	bf00      	nop
 800bb0c:	e7fd      	b.n	800bb0a <xTaskIncrementTick+0x46>
 800bb0e:	4b41      	ldr	r3, [pc, #260]	@ (800bc14 <xTaskIncrementTick+0x150>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	60fb      	str	r3, [r7, #12]
 800bb14:	4b40      	ldr	r3, [pc, #256]	@ (800bc18 <xTaskIncrementTick+0x154>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a3e      	ldr	r2, [pc, #248]	@ (800bc14 <xTaskIncrementTick+0x150>)
 800bb1a:	6013      	str	r3, [r2, #0]
 800bb1c:	4a3e      	ldr	r2, [pc, #248]	@ (800bc18 <xTaskIncrementTick+0x154>)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6013      	str	r3, [r2, #0]
 800bb22:	4b3e      	ldr	r3, [pc, #248]	@ (800bc1c <xTaskIncrementTick+0x158>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	3301      	adds	r3, #1
 800bb28:	4a3c      	ldr	r2, [pc, #240]	@ (800bc1c <xTaskIncrementTick+0x158>)
 800bb2a:	6013      	str	r3, [r2, #0]
 800bb2c:	f000 fad4 	bl	800c0d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb30:	4b3b      	ldr	r3, [pc, #236]	@ (800bc20 <xTaskIncrementTick+0x15c>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	693a      	ldr	r2, [r7, #16]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d349      	bcc.n	800bbce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb3a:	4b36      	ldr	r3, [pc, #216]	@ (800bc14 <xTaskIncrementTick+0x150>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d104      	bne.n	800bb4e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb44:	4b36      	ldr	r3, [pc, #216]	@ (800bc20 <xTaskIncrementTick+0x15c>)
 800bb46:	f04f 32ff 	mov.w	r2, #4294967295
 800bb4a:	601a      	str	r2, [r3, #0]
					break;
 800bb4c:	e03f      	b.n	800bbce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb4e:	4b31      	ldr	r3, [pc, #196]	@ (800bc14 <xTaskIncrementTick+0x150>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb5e:	693a      	ldr	r2, [r7, #16]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d203      	bcs.n	800bb6e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb66:	4a2e      	ldr	r2, [pc, #184]	@ (800bc20 <xTaskIncrementTick+0x15c>)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb6c:	e02f      	b.n	800bbce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	3304      	adds	r3, #4
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fe fb98 	bl	800a2a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d004      	beq.n	800bb8a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	3318      	adds	r3, #24
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7fe fb8f 	bl	800a2a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb8e:	4b25      	ldr	r3, [pc, #148]	@ (800bc24 <xTaskIncrementTick+0x160>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d903      	bls.n	800bb9e <xTaskIncrementTick+0xda>
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb9a:	4a22      	ldr	r2, [pc, #136]	@ (800bc24 <xTaskIncrementTick+0x160>)
 800bb9c:	6013      	str	r3, [r2, #0]
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bba2:	4613      	mov	r3, r2
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	4413      	add	r3, r2
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	4a1f      	ldr	r2, [pc, #124]	@ (800bc28 <xTaskIncrementTick+0x164>)
 800bbac:	441a      	add	r2, r3
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	3304      	adds	r3, #4
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	4610      	mov	r0, r2
 800bbb6:	f7fe fb1a 	bl	800a1ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbbe:	4b1b      	ldr	r3, [pc, #108]	@ (800bc2c <xTaskIncrementTick+0x168>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d3b8      	bcc.n	800bb3a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbcc:	e7b5      	b.n	800bb3a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bbce:	4b17      	ldr	r3, [pc, #92]	@ (800bc2c <xTaskIncrementTick+0x168>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbd4:	4914      	ldr	r1, [pc, #80]	@ (800bc28 <xTaskIncrementTick+0x164>)
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4413      	add	r3, r2
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	440b      	add	r3, r1
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d901      	bls.n	800bbea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bbea:	4b11      	ldr	r3, [pc, #68]	@ (800bc30 <xTaskIncrementTick+0x16c>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d007      	beq.n	800bc02 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	617b      	str	r3, [r7, #20]
 800bbf6:	e004      	b.n	800bc02 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bbf8:	4b0e      	ldr	r3, [pc, #56]	@ (800bc34 <xTaskIncrementTick+0x170>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	4a0d      	ldr	r2, [pc, #52]	@ (800bc34 <xTaskIncrementTick+0x170>)
 800bc00:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bc02:	697b      	ldr	r3, [r7, #20]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3718      	adds	r7, #24
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}
 800bc0c:	20001204 	.word	0x20001204
 800bc10:	200011e0 	.word	0x200011e0
 800bc14:	20001194 	.word	0x20001194
 800bc18:	20001198 	.word	0x20001198
 800bc1c:	200011f4 	.word	0x200011f4
 800bc20:	200011fc 	.word	0x200011fc
 800bc24:	200011e4 	.word	0x200011e4
 800bc28:	20000d0c 	.word	0x20000d0c
 800bc2c:	20000d08 	.word	0x20000d08
 800bc30:	200011f0 	.word	0x200011f0
 800bc34:	200011ec 	.word	0x200011ec

0800bc38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc3e:	4b28      	ldr	r3, [pc, #160]	@ (800bce0 <vTaskSwitchContext+0xa8>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d003      	beq.n	800bc4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc46:	4b27      	ldr	r3, [pc, #156]	@ (800bce4 <vTaskSwitchContext+0xac>)
 800bc48:	2201      	movs	r2, #1
 800bc4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc4c:	e042      	b.n	800bcd4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800bc4e:	4b25      	ldr	r3, [pc, #148]	@ (800bce4 <vTaskSwitchContext+0xac>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc54:	4b24      	ldr	r3, [pc, #144]	@ (800bce8 <vTaskSwitchContext+0xb0>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	60fb      	str	r3, [r7, #12]
 800bc5a:	e011      	b.n	800bc80 <vTaskSwitchContext+0x48>
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10b      	bne.n	800bc7a <vTaskSwitchContext+0x42>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	607b      	str	r3, [r7, #4]
}
 800bc74:	bf00      	nop
 800bc76:	bf00      	nop
 800bc78:	e7fd      	b.n	800bc76 <vTaskSwitchContext+0x3e>
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	60fb      	str	r3, [r7, #12]
 800bc80:	491a      	ldr	r1, [pc, #104]	@ (800bcec <vTaskSwitchContext+0xb4>)
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	4613      	mov	r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	4413      	add	r3, r2
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	440b      	add	r3, r1
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d0e3      	beq.n	800bc5c <vTaskSwitchContext+0x24>
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	4613      	mov	r3, r2
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	4413      	add	r3, r2
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	4a13      	ldr	r2, [pc, #76]	@ (800bcec <vTaskSwitchContext+0xb4>)
 800bca0:	4413      	add	r3, r2
 800bca2:	60bb      	str	r3, [r7, #8]
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	685a      	ldr	r2, [r3, #4]
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	605a      	str	r2, [r3, #4]
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	685a      	ldr	r2, [r3, #4]
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	3308      	adds	r3, #8
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d104      	bne.n	800bcc4 <vTaskSwitchContext+0x8c>
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	685a      	ldr	r2, [r3, #4]
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	605a      	str	r2, [r3, #4]
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	68db      	ldr	r3, [r3, #12]
 800bcca:	4a09      	ldr	r2, [pc, #36]	@ (800bcf0 <vTaskSwitchContext+0xb8>)
 800bccc:	6013      	str	r3, [r2, #0]
 800bcce:	4a06      	ldr	r2, [pc, #24]	@ (800bce8 <vTaskSwitchContext+0xb0>)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6013      	str	r3, [r2, #0]
}
 800bcd4:	bf00      	nop
 800bcd6:	3714      	adds	r7, #20
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr
 800bce0:	20001204 	.word	0x20001204
 800bce4:	200011f0 	.word	0x200011f0
 800bce8:	200011e4 	.word	0x200011e4
 800bcec:	20000d0c 	.word	0x20000d0c
 800bcf0:	20000d08 	.word	0x20000d08

0800bcf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d10b      	bne.n	800bd1c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bd04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd08:	f383 8811 	msr	BASEPRI, r3
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f3bf 8f4f 	dsb	sy
 800bd14:	60fb      	str	r3, [r7, #12]
}
 800bd16:	bf00      	nop
 800bd18:	bf00      	nop
 800bd1a:	e7fd      	b.n	800bd18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd1c:	4b07      	ldr	r3, [pc, #28]	@ (800bd3c <vTaskPlaceOnEventList+0x48>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	3318      	adds	r3, #24
 800bd22:	4619      	mov	r1, r3
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f7fe fa86 	bl	800a236 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd2a:	2101      	movs	r1, #1
 800bd2c:	6838      	ldr	r0, [r7, #0]
 800bd2e:	f000 fb91 	bl	800c454 <prvAddCurrentTaskToDelayedList>
}
 800bd32:	bf00      	nop
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	20000d08 	.word	0x20000d08

0800bd40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d10b      	bne.n	800bd6a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bd52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd56:	f383 8811 	msr	BASEPRI, r3
 800bd5a:	f3bf 8f6f 	isb	sy
 800bd5e:	f3bf 8f4f 	dsb	sy
 800bd62:	617b      	str	r3, [r7, #20]
}
 800bd64:	bf00      	nop
 800bd66:	bf00      	nop
 800bd68:	e7fd      	b.n	800bd66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd6a:	4b0a      	ldr	r3, [pc, #40]	@ (800bd94 <vTaskPlaceOnEventListRestricted+0x54>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	3318      	adds	r3, #24
 800bd70:	4619      	mov	r1, r3
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	f7fe fa3b 	bl	800a1ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d002      	beq.n	800bd84 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bd7e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd82:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd84:	6879      	ldr	r1, [r7, #4]
 800bd86:	68b8      	ldr	r0, [r7, #8]
 800bd88:	f000 fb64 	bl	800c454 <prvAddCurrentTaskToDelayedList>
	}
 800bd8c:	bf00      	nop
 800bd8e:	3718      	adds	r7, #24
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	20000d08 	.word	0x20000d08

0800bd98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10b      	bne.n	800bdc6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	60fb      	str	r3, [r7, #12]
}
 800bdc0:	bf00      	nop
 800bdc2:	bf00      	nop
 800bdc4:	e7fd      	b.n	800bdc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	3318      	adds	r3, #24
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fe fa6c 	bl	800a2a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdd0:	4b1d      	ldr	r3, [pc, #116]	@ (800be48 <xTaskRemoveFromEventList+0xb0>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d11d      	bne.n	800be14 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	3304      	adds	r3, #4
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fe fa63 	bl	800a2a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bde6:	4b19      	ldr	r3, [pc, #100]	@ (800be4c <xTaskRemoveFromEventList+0xb4>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d903      	bls.n	800bdf6 <xTaskRemoveFromEventList+0x5e>
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdf2:	4a16      	ldr	r2, [pc, #88]	@ (800be4c <xTaskRemoveFromEventList+0xb4>)
 800bdf4:	6013      	str	r3, [r2, #0]
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	4413      	add	r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	4a13      	ldr	r2, [pc, #76]	@ (800be50 <xTaskRemoveFromEventList+0xb8>)
 800be04:	441a      	add	r2, r3
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	3304      	adds	r3, #4
 800be0a:	4619      	mov	r1, r3
 800be0c:	4610      	mov	r0, r2
 800be0e:	f7fe f9ee 	bl	800a1ee <vListInsertEnd>
 800be12:	e005      	b.n	800be20 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	3318      	adds	r3, #24
 800be18:	4619      	mov	r1, r3
 800be1a:	480e      	ldr	r0, [pc, #56]	@ (800be54 <xTaskRemoveFromEventList+0xbc>)
 800be1c:	f7fe f9e7 	bl	800a1ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be24:	4b0c      	ldr	r3, [pc, #48]	@ (800be58 <xTaskRemoveFromEventList+0xc0>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d905      	bls.n	800be3a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be2e:	2301      	movs	r3, #1
 800be30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be32:	4b0a      	ldr	r3, [pc, #40]	@ (800be5c <xTaskRemoveFromEventList+0xc4>)
 800be34:	2201      	movs	r2, #1
 800be36:	601a      	str	r2, [r3, #0]
 800be38:	e001      	b.n	800be3e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800be3a:	2300      	movs	r3, #0
 800be3c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be3e:	697b      	ldr	r3, [r7, #20]
}
 800be40:	4618      	mov	r0, r3
 800be42:	3718      	adds	r7, #24
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	20001204 	.word	0x20001204
 800be4c:	200011e4 	.word	0x200011e4
 800be50:	20000d0c 	.word	0x20000d0c
 800be54:	2000119c 	.word	0x2000119c
 800be58:	20000d08 	.word	0x20000d08
 800be5c:	200011f0 	.word	0x200011f0

0800be60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be68:	4b06      	ldr	r3, [pc, #24]	@ (800be84 <vTaskInternalSetTimeOutState+0x24>)
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be70:	4b05      	ldr	r3, [pc, #20]	@ (800be88 <vTaskInternalSetTimeOutState+0x28>)
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	605a      	str	r2, [r3, #4]
}
 800be78:	bf00      	nop
 800be7a:	370c      	adds	r7, #12
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr
 800be84:	200011f4 	.word	0x200011f4
 800be88:	200011e0 	.word	0x200011e0

0800be8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b088      	sub	sp, #32
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10b      	bne.n	800beb4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800be9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea0:	f383 8811 	msr	BASEPRI, r3
 800bea4:	f3bf 8f6f 	isb	sy
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	613b      	str	r3, [r7, #16]
}
 800beae:	bf00      	nop
 800beb0:	bf00      	nop
 800beb2:	e7fd      	b.n	800beb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d10b      	bne.n	800bed2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800beba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bebe:	f383 8811 	msr	BASEPRI, r3
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	60fb      	str	r3, [r7, #12]
}
 800becc:	bf00      	nop
 800bece:	bf00      	nop
 800bed0:	e7fd      	b.n	800bece <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bed2:	f000 ffa1 	bl	800ce18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bed6:	4b1d      	ldr	r3, [pc, #116]	@ (800bf4c <xTaskCheckForTimeOut+0xc0>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	69ba      	ldr	r2, [r7, #24]
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beee:	d102      	bne.n	800bef6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bef0:	2300      	movs	r3, #0
 800bef2:	61fb      	str	r3, [r7, #28]
 800bef4:	e023      	b.n	800bf3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	4b15      	ldr	r3, [pc, #84]	@ (800bf50 <xTaskCheckForTimeOut+0xc4>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d007      	beq.n	800bf12 <xTaskCheckForTimeOut+0x86>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	69ba      	ldr	r2, [r7, #24]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d302      	bcc.n	800bf12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	61fb      	str	r3, [r7, #28]
 800bf10:	e015      	b.n	800bf3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	697a      	ldr	r2, [r7, #20]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d20b      	bcs.n	800bf34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	1ad2      	subs	r2, r2, r3
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f7ff ff99 	bl	800be60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	61fb      	str	r3, [r7, #28]
 800bf32:	e004      	b.n	800bf3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	2200      	movs	r2, #0
 800bf38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf3e:	f000 ff9d 	bl	800ce7c <vPortExitCritical>

	return xReturn;
 800bf42:	69fb      	ldr	r3, [r7, #28]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3720      	adds	r7, #32
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	200011e0 	.word	0x200011e0
 800bf50:	200011f4 	.word	0x200011f4

0800bf54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf54:	b480      	push	{r7}
 800bf56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf58:	4b03      	ldr	r3, [pc, #12]	@ (800bf68 <vTaskMissedYield+0x14>)
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	601a      	str	r2, [r3, #0]
}
 800bf5e:	bf00      	nop
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr
 800bf68:	200011f0 	.word	0x200011f0

0800bf6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b082      	sub	sp, #8
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf74:	f000 f852 	bl	800c01c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf78:	4b06      	ldr	r3, [pc, #24]	@ (800bf94 <prvIdleTask+0x28>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d9f9      	bls.n	800bf74 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf80:	4b05      	ldr	r3, [pc, #20]	@ (800bf98 <prvIdleTask+0x2c>)
 800bf82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf86:	601a      	str	r2, [r3, #0]
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf90:	e7f0      	b.n	800bf74 <prvIdleTask+0x8>
 800bf92:	bf00      	nop
 800bf94:	20000d0c 	.word	0x20000d0c
 800bf98:	e000ed04 	.word	0xe000ed04

0800bf9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	607b      	str	r3, [r7, #4]
 800bfa6:	e00c      	b.n	800bfc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	4413      	add	r3, r2
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	4a12      	ldr	r2, [pc, #72]	@ (800bffc <prvInitialiseTaskLists+0x60>)
 800bfb4:	4413      	add	r3, r2
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7fe f8ec 	bl	800a194 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	607b      	str	r3, [r7, #4]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2b37      	cmp	r3, #55	@ 0x37
 800bfc6:	d9ef      	bls.n	800bfa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bfc8:	480d      	ldr	r0, [pc, #52]	@ (800c000 <prvInitialiseTaskLists+0x64>)
 800bfca:	f7fe f8e3 	bl	800a194 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bfce:	480d      	ldr	r0, [pc, #52]	@ (800c004 <prvInitialiseTaskLists+0x68>)
 800bfd0:	f7fe f8e0 	bl	800a194 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bfd4:	480c      	ldr	r0, [pc, #48]	@ (800c008 <prvInitialiseTaskLists+0x6c>)
 800bfd6:	f7fe f8dd 	bl	800a194 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bfda:	480c      	ldr	r0, [pc, #48]	@ (800c00c <prvInitialiseTaskLists+0x70>)
 800bfdc:	f7fe f8da 	bl	800a194 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bfe0:	480b      	ldr	r0, [pc, #44]	@ (800c010 <prvInitialiseTaskLists+0x74>)
 800bfe2:	f7fe f8d7 	bl	800a194 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bfe6:	4b0b      	ldr	r3, [pc, #44]	@ (800c014 <prvInitialiseTaskLists+0x78>)
 800bfe8:	4a05      	ldr	r2, [pc, #20]	@ (800c000 <prvInitialiseTaskLists+0x64>)
 800bfea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bfec:	4b0a      	ldr	r3, [pc, #40]	@ (800c018 <prvInitialiseTaskLists+0x7c>)
 800bfee:	4a05      	ldr	r2, [pc, #20]	@ (800c004 <prvInitialiseTaskLists+0x68>)
 800bff0:	601a      	str	r2, [r3, #0]
}
 800bff2:	bf00      	nop
 800bff4:	3708      	adds	r7, #8
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	20000d0c 	.word	0x20000d0c
 800c000:	2000116c 	.word	0x2000116c
 800c004:	20001180 	.word	0x20001180
 800c008:	2000119c 	.word	0x2000119c
 800c00c:	200011b0 	.word	0x200011b0
 800c010:	200011c8 	.word	0x200011c8
 800c014:	20001194 	.word	0x20001194
 800c018:	20001198 	.word	0x20001198

0800c01c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c022:	e019      	b.n	800c058 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c024:	f000 fef8 	bl	800ce18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c028:	4b10      	ldr	r3, [pc, #64]	@ (800c06c <prvCheckTasksWaitingTermination+0x50>)
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	3304      	adds	r3, #4
 800c034:	4618      	mov	r0, r3
 800c036:	f7fe f937 	bl	800a2a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c03a:	4b0d      	ldr	r3, [pc, #52]	@ (800c070 <prvCheckTasksWaitingTermination+0x54>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	3b01      	subs	r3, #1
 800c040:	4a0b      	ldr	r2, [pc, #44]	@ (800c070 <prvCheckTasksWaitingTermination+0x54>)
 800c042:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c044:	4b0b      	ldr	r3, [pc, #44]	@ (800c074 <prvCheckTasksWaitingTermination+0x58>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	3b01      	subs	r3, #1
 800c04a:	4a0a      	ldr	r2, [pc, #40]	@ (800c074 <prvCheckTasksWaitingTermination+0x58>)
 800c04c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c04e:	f000 ff15 	bl	800ce7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 f810 	bl	800c078 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c058:	4b06      	ldr	r3, [pc, #24]	@ (800c074 <prvCheckTasksWaitingTermination+0x58>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1e1      	bne.n	800c024 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c060:	bf00      	nop
 800c062:	bf00      	nop
 800c064:	3708      	adds	r7, #8
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	200011b0 	.word	0x200011b0
 800c070:	200011dc 	.word	0x200011dc
 800c074:	200011c4 	.word	0x200011c4

0800c078 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c086:	2b00      	cmp	r3, #0
 800c088:	d108      	bne.n	800c09c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c08e:	4618      	mov	r0, r3
 800c090:	f001 f8b2 	bl	800d1f8 <vPortFree>
				vPortFree( pxTCB );
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f001 f8af 	bl	800d1f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c09a:	e019      	b.n	800c0d0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d103      	bne.n	800c0ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f001 f8a6 	bl	800d1f8 <vPortFree>
	}
 800c0ac:	e010      	b.n	800c0d0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c0b4:	2b02      	cmp	r3, #2
 800c0b6:	d00b      	beq.n	800c0d0 <prvDeleteTCB+0x58>
	__asm volatile
 800c0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0bc:	f383 8811 	msr	BASEPRI, r3
 800c0c0:	f3bf 8f6f 	isb	sy
 800c0c4:	f3bf 8f4f 	dsb	sy
 800c0c8:	60fb      	str	r3, [r7, #12]
}
 800c0ca:	bf00      	nop
 800c0cc:	bf00      	nop
 800c0ce:	e7fd      	b.n	800c0cc <prvDeleteTCB+0x54>
	}
 800c0d0:	bf00      	nop
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0de:	4b0c      	ldr	r3, [pc, #48]	@ (800c110 <prvResetNextTaskUnblockTime+0x38>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d104      	bne.n	800c0f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c0e8:	4b0a      	ldr	r3, [pc, #40]	@ (800c114 <prvResetNextTaskUnblockTime+0x3c>)
 800c0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c0f0:	e008      	b.n	800c104 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0f2:	4b07      	ldr	r3, [pc, #28]	@ (800c110 <prvResetNextTaskUnblockTime+0x38>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	4a04      	ldr	r2, [pc, #16]	@ (800c114 <prvResetNextTaskUnblockTime+0x3c>)
 800c102:	6013      	str	r3, [r2, #0]
}
 800c104:	bf00      	nop
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr
 800c110:	20001194 	.word	0x20001194
 800c114:	200011fc 	.word	0x200011fc

0800c118 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c11e:	4b05      	ldr	r3, [pc, #20]	@ (800c134 <xTaskGetCurrentTaskHandle+0x1c>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c124:	687b      	ldr	r3, [r7, #4]
	}
 800c126:	4618      	mov	r0, r3
 800c128:	370c      	adds	r7, #12
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	20000d08 	.word	0x20000d08

0800c138 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c13e:	4b0b      	ldr	r3, [pc, #44]	@ (800c16c <xTaskGetSchedulerState+0x34>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d102      	bne.n	800c14c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c146:	2301      	movs	r3, #1
 800c148:	607b      	str	r3, [r7, #4]
 800c14a:	e008      	b.n	800c15e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c14c:	4b08      	ldr	r3, [pc, #32]	@ (800c170 <xTaskGetSchedulerState+0x38>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d102      	bne.n	800c15a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c154:	2302      	movs	r3, #2
 800c156:	607b      	str	r3, [r7, #4]
 800c158:	e001      	b.n	800c15e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c15a:	2300      	movs	r3, #0
 800c15c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c15e:	687b      	ldr	r3, [r7, #4]
	}
 800c160:	4618      	mov	r0, r3
 800c162:	370c      	adds	r7, #12
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr
 800c16c:	200011e8 	.word	0x200011e8
 800c170:	20001204 	.word	0x20001204

0800c174 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c180:	2300      	movs	r3, #0
 800c182:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d051      	beq.n	800c22e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c18e:	4b2a      	ldr	r3, [pc, #168]	@ (800c238 <xTaskPriorityInherit+0xc4>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c194:	429a      	cmp	r2, r3
 800c196:	d241      	bcs.n	800c21c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	699b      	ldr	r3, [r3, #24]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	db06      	blt.n	800c1ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1a0:	4b25      	ldr	r3, [pc, #148]	@ (800c238 <xTaskPriorityInherit+0xc4>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	6959      	ldr	r1, [r3, #20]
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	4413      	add	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	4a1f      	ldr	r2, [pc, #124]	@ (800c23c <xTaskPriorityInherit+0xc8>)
 800c1c0:	4413      	add	r3, r2
 800c1c2:	4299      	cmp	r1, r3
 800c1c4:	d122      	bne.n	800c20c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7fe f86c 	bl	800a2a8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c1d0:	4b19      	ldr	r3, [pc, #100]	@ (800c238 <xTaskPriorityInherit+0xc4>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1de:	4b18      	ldr	r3, [pc, #96]	@ (800c240 <xTaskPriorityInherit+0xcc>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d903      	bls.n	800c1ee <xTaskPriorityInherit+0x7a>
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ea:	4a15      	ldr	r2, [pc, #84]	@ (800c240 <xTaskPriorityInherit+0xcc>)
 800c1ec:	6013      	str	r3, [r2, #0]
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	4413      	add	r3, r2
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	4a10      	ldr	r2, [pc, #64]	@ (800c23c <xTaskPriorityInherit+0xc8>)
 800c1fc:	441a      	add	r2, r3
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	3304      	adds	r3, #4
 800c202:	4619      	mov	r1, r3
 800c204:	4610      	mov	r0, r2
 800c206:	f7fd fff2 	bl	800a1ee <vListInsertEnd>
 800c20a:	e004      	b.n	800c216 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c20c:	4b0a      	ldr	r3, [pc, #40]	@ (800c238 <xTaskPriorityInherit+0xc4>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c216:	2301      	movs	r3, #1
 800c218:	60fb      	str	r3, [r7, #12]
 800c21a:	e008      	b.n	800c22e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c220:	4b05      	ldr	r3, [pc, #20]	@ (800c238 <xTaskPriorityInherit+0xc4>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c226:	429a      	cmp	r2, r3
 800c228:	d201      	bcs.n	800c22e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c22a:	2301      	movs	r3, #1
 800c22c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c22e:	68fb      	ldr	r3, [r7, #12]
	}
 800c230:	4618      	mov	r0, r3
 800c232:	3710      	adds	r7, #16
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	20000d08 	.word	0x20000d08
 800c23c:	20000d0c 	.word	0x20000d0c
 800c240:	200011e4 	.word	0x200011e4

0800c244 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c244:	b580      	push	{r7, lr}
 800c246:	b086      	sub	sp, #24
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c250:	2300      	movs	r3, #0
 800c252:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d058      	beq.n	800c30c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c25a:	4b2f      	ldr	r3, [pc, #188]	@ (800c318 <xTaskPriorityDisinherit+0xd4>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	693a      	ldr	r2, [r7, #16]
 800c260:	429a      	cmp	r2, r3
 800c262:	d00b      	beq.n	800c27c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c268:	f383 8811 	msr	BASEPRI, r3
 800c26c:	f3bf 8f6f 	isb	sy
 800c270:	f3bf 8f4f 	dsb	sy
 800c274:	60fb      	str	r3, [r7, #12]
}
 800c276:	bf00      	nop
 800c278:	bf00      	nop
 800c27a:	e7fd      	b.n	800c278 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c280:	2b00      	cmp	r3, #0
 800c282:	d10b      	bne.n	800c29c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c288:	f383 8811 	msr	BASEPRI, r3
 800c28c:	f3bf 8f6f 	isb	sy
 800c290:	f3bf 8f4f 	dsb	sy
 800c294:	60bb      	str	r3, [r7, #8]
}
 800c296:	bf00      	nop
 800c298:	bf00      	nop
 800c29a:	e7fd      	b.n	800c298 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2a0:	1e5a      	subs	r2, r3, #1
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d02c      	beq.n	800c30c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d128      	bne.n	800c30c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	3304      	adds	r3, #4
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7fd fff2 	bl	800a2a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2dc:	4b0f      	ldr	r3, [pc, #60]	@ (800c31c <xTaskPriorityDisinherit+0xd8>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d903      	bls.n	800c2ec <xTaskPriorityDisinherit+0xa8>
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2e8:	4a0c      	ldr	r2, [pc, #48]	@ (800c31c <xTaskPriorityDisinherit+0xd8>)
 800c2ea:	6013      	str	r3, [r2, #0]
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	4413      	add	r3, r2
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	4a09      	ldr	r2, [pc, #36]	@ (800c320 <xTaskPriorityDisinherit+0xdc>)
 800c2fa:	441a      	add	r2, r3
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	3304      	adds	r3, #4
 800c300:	4619      	mov	r1, r3
 800c302:	4610      	mov	r0, r2
 800c304:	f7fd ff73 	bl	800a1ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c308:	2301      	movs	r3, #1
 800c30a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c30c:	697b      	ldr	r3, [r7, #20]
	}
 800c30e:	4618      	mov	r0, r3
 800c310:	3718      	adds	r7, #24
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	20000d08 	.word	0x20000d08
 800c31c:	200011e4 	.word	0x200011e4
 800c320:	20000d0c 	.word	0x20000d0c

0800c324 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c324:	b580      	push	{r7, lr}
 800c326:	b088      	sub	sp, #32
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c332:	2301      	movs	r3, #1
 800c334:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d06c      	beq.n	800c416 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c340:	2b00      	cmp	r3, #0
 800c342:	d10b      	bne.n	800c35c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c348:	f383 8811 	msr	BASEPRI, r3
 800c34c:	f3bf 8f6f 	isb	sy
 800c350:	f3bf 8f4f 	dsb	sy
 800c354:	60fb      	str	r3, [r7, #12]
}
 800c356:	bf00      	nop
 800c358:	bf00      	nop
 800c35a:	e7fd      	b.n	800c358 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c360:	683a      	ldr	r2, [r7, #0]
 800c362:	429a      	cmp	r2, r3
 800c364:	d902      	bls.n	800c36c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	61fb      	str	r3, [r7, #28]
 800c36a:	e002      	b.n	800c372 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c370:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c376:	69fa      	ldr	r2, [r7, #28]
 800c378:	429a      	cmp	r2, r3
 800c37a:	d04c      	beq.n	800c416 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c380:	697a      	ldr	r2, [r7, #20]
 800c382:	429a      	cmp	r2, r3
 800c384:	d147      	bne.n	800c416 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c386:	4b26      	ldr	r3, [pc, #152]	@ (800c420 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	69ba      	ldr	r2, [r7, #24]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d10b      	bne.n	800c3a8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800c390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c394:	f383 8811 	msr	BASEPRI, r3
 800c398:	f3bf 8f6f 	isb	sy
 800c39c:	f3bf 8f4f 	dsb	sy
 800c3a0:	60bb      	str	r3, [r7, #8]
}
 800c3a2:	bf00      	nop
 800c3a4:	bf00      	nop
 800c3a6:	e7fd      	b.n	800c3a4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	69fa      	ldr	r2, [r7, #28]
 800c3b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c3b4:	69bb      	ldr	r3, [r7, #24]
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	db04      	blt.n	800c3c6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	6959      	ldr	r1, [r3, #20]
 800c3ca:	693a      	ldr	r2, [r7, #16]
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	4413      	add	r3, r2
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	4a13      	ldr	r2, [pc, #76]	@ (800c424 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c3d6:	4413      	add	r3, r2
 800c3d8:	4299      	cmp	r1, r3
 800c3da:	d11c      	bne.n	800c416 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	3304      	adds	r3, #4
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7fd ff61 	bl	800a2a8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3ea:	4b0f      	ldr	r3, [pc, #60]	@ (800c428 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d903      	bls.n	800c3fa <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800c3f2:	69bb      	ldr	r3, [r7, #24]
 800c3f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3f6:	4a0c      	ldr	r2, [pc, #48]	@ (800c428 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c3f8:	6013      	str	r3, [r2, #0]
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3fe:	4613      	mov	r3, r2
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	4413      	add	r3, r2
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4a07      	ldr	r2, [pc, #28]	@ (800c424 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c408:	441a      	add	r2, r3
 800c40a:	69bb      	ldr	r3, [r7, #24]
 800c40c:	3304      	adds	r3, #4
 800c40e:	4619      	mov	r1, r3
 800c410:	4610      	mov	r0, r2
 800c412:	f7fd feec 	bl	800a1ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c416:	bf00      	nop
 800c418:	3720      	adds	r7, #32
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	20000d08 	.word	0x20000d08
 800c424:	20000d0c 	.word	0x20000d0c
 800c428:	200011e4 	.word	0x200011e4

0800c42c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c42c:	b480      	push	{r7}
 800c42e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c430:	4b07      	ldr	r3, [pc, #28]	@ (800c450 <pvTaskIncrementMutexHeldCount+0x24>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d004      	beq.n	800c442 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c438:	4b05      	ldr	r3, [pc, #20]	@ (800c450 <pvTaskIncrementMutexHeldCount+0x24>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c43e:	3201      	adds	r2, #1
 800c440:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800c442:	4b03      	ldr	r3, [pc, #12]	@ (800c450 <pvTaskIncrementMutexHeldCount+0x24>)
 800c444:	681b      	ldr	r3, [r3, #0]
	}
 800c446:	4618      	mov	r0, r3
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr
 800c450:	20000d08 	.word	0x20000d08

0800c454 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c45e:	4b21      	ldr	r3, [pc, #132]	@ (800c4e4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c464:	4b20      	ldr	r3, [pc, #128]	@ (800c4e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	3304      	adds	r3, #4
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fd ff1c 	bl	800a2a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c476:	d10a      	bne.n	800c48e <prvAddCurrentTaskToDelayedList+0x3a>
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d007      	beq.n	800c48e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c47e:	4b1a      	ldr	r3, [pc, #104]	@ (800c4e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	3304      	adds	r3, #4
 800c484:	4619      	mov	r1, r3
 800c486:	4819      	ldr	r0, [pc, #100]	@ (800c4ec <prvAddCurrentTaskToDelayedList+0x98>)
 800c488:	f7fd feb1 	bl	800a1ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c48c:	e026      	b.n	800c4dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c48e:	68fa      	ldr	r2, [r7, #12]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	4413      	add	r3, r2
 800c494:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c496:	4b14      	ldr	r3, [pc, #80]	@ (800c4e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	68ba      	ldr	r2, [r7, #8]
 800c49c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c49e:	68ba      	ldr	r2, [r7, #8]
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d209      	bcs.n	800c4ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4a6:	4b12      	ldr	r3, [pc, #72]	@ (800c4f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	4b0f      	ldr	r3, [pc, #60]	@ (800c4e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	3304      	adds	r3, #4
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	4610      	mov	r0, r2
 800c4b4:	f7fd febf 	bl	800a236 <vListInsert>
}
 800c4b8:	e010      	b.n	800c4dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4ba:	4b0e      	ldr	r3, [pc, #56]	@ (800c4f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	4b0a      	ldr	r3, [pc, #40]	@ (800c4e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	3304      	adds	r3, #4
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	4610      	mov	r0, r2
 800c4c8:	f7fd feb5 	bl	800a236 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c4cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68ba      	ldr	r2, [r7, #8]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d202      	bcs.n	800c4dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c4d6:	4a08      	ldr	r2, [pc, #32]	@ (800c4f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	6013      	str	r3, [r2, #0]
}
 800c4dc:	bf00      	nop
 800c4de:	3710      	adds	r7, #16
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	200011e0 	.word	0x200011e0
 800c4e8:	20000d08 	.word	0x20000d08
 800c4ec:	200011c8 	.word	0x200011c8
 800c4f0:	20001198 	.word	0x20001198
 800c4f4:	20001194 	.word	0x20001194
 800c4f8:	200011fc 	.word	0x200011fc

0800c4fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b08a      	sub	sp, #40	@ 0x28
 800c500:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c502:	2300      	movs	r3, #0
 800c504:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c506:	f000 fb13 	bl	800cb30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c50a:	4b1d      	ldr	r3, [pc, #116]	@ (800c580 <xTimerCreateTimerTask+0x84>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d021      	beq.n	800c556 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c512:	2300      	movs	r3, #0
 800c514:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c516:	2300      	movs	r3, #0
 800c518:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c51a:	1d3a      	adds	r2, r7, #4
 800c51c:	f107 0108 	add.w	r1, r7, #8
 800c520:	f107 030c 	add.w	r3, r7, #12
 800c524:	4618      	mov	r0, r3
 800c526:	f7fd fe1b 	bl	800a160 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c52a:	6879      	ldr	r1, [r7, #4]
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	9202      	str	r2, [sp, #8]
 800c532:	9301      	str	r3, [sp, #4]
 800c534:	2302      	movs	r3, #2
 800c536:	9300      	str	r3, [sp, #0]
 800c538:	2300      	movs	r3, #0
 800c53a:	460a      	mov	r2, r1
 800c53c:	4911      	ldr	r1, [pc, #68]	@ (800c584 <xTimerCreateTimerTask+0x88>)
 800c53e:	4812      	ldr	r0, [pc, #72]	@ (800c588 <xTimerCreateTimerTask+0x8c>)
 800c540:	f7fe ffc0 	bl	800b4c4 <xTaskCreateStatic>
 800c544:	4603      	mov	r3, r0
 800c546:	4a11      	ldr	r2, [pc, #68]	@ (800c58c <xTimerCreateTimerTask+0x90>)
 800c548:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c54a:	4b10      	ldr	r3, [pc, #64]	@ (800c58c <xTimerCreateTimerTask+0x90>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d001      	beq.n	800c556 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c552:	2301      	movs	r3, #1
 800c554:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d10b      	bne.n	800c574 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c560:	f383 8811 	msr	BASEPRI, r3
 800c564:	f3bf 8f6f 	isb	sy
 800c568:	f3bf 8f4f 	dsb	sy
 800c56c:	613b      	str	r3, [r7, #16]
}
 800c56e:	bf00      	nop
 800c570:	bf00      	nop
 800c572:	e7fd      	b.n	800c570 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c574:	697b      	ldr	r3, [r7, #20]
}
 800c576:	4618      	mov	r0, r3
 800c578:	3718      	adds	r7, #24
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	20001238 	.word	0x20001238
 800c584:	0800de30 	.word	0x0800de30
 800c588:	0800c6c9 	.word	0x0800c6c9
 800c58c:	2000123c 	.word	0x2000123c

0800c590 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b08a      	sub	sp, #40	@ 0x28
 800c594:	af00      	add	r7, sp, #0
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	607a      	str	r2, [r7, #4]
 800c59c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10b      	bne.n	800c5c0 <xTimerGenericCommand+0x30>
	__asm volatile
 800c5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ac:	f383 8811 	msr	BASEPRI, r3
 800c5b0:	f3bf 8f6f 	isb	sy
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	623b      	str	r3, [r7, #32]
}
 800c5ba:	bf00      	nop
 800c5bc:	bf00      	nop
 800c5be:	e7fd      	b.n	800c5bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c5c0:	4b19      	ldr	r3, [pc, #100]	@ (800c628 <xTimerGenericCommand+0x98>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d02a      	beq.n	800c61e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	2b05      	cmp	r3, #5
 800c5d8:	dc18      	bgt.n	800c60c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c5da:	f7ff fdad 	bl	800c138 <xTaskGetSchedulerState>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b02      	cmp	r3, #2
 800c5e2:	d109      	bne.n	800c5f8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c5e4:	4b10      	ldr	r3, [pc, #64]	@ (800c628 <xTimerGenericCommand+0x98>)
 800c5e6:	6818      	ldr	r0, [r3, #0]
 800c5e8:	f107 0110 	add.w	r1, r7, #16
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5f0:	f7fe f8f0 	bl	800a7d4 <xQueueGenericSend>
 800c5f4:	6278      	str	r0, [r7, #36]	@ 0x24
 800c5f6:	e012      	b.n	800c61e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c5f8:	4b0b      	ldr	r3, [pc, #44]	@ (800c628 <xTimerGenericCommand+0x98>)
 800c5fa:	6818      	ldr	r0, [r3, #0]
 800c5fc:	f107 0110 	add.w	r1, r7, #16
 800c600:	2300      	movs	r3, #0
 800c602:	2200      	movs	r2, #0
 800c604:	f7fe f8e6 	bl	800a7d4 <xQueueGenericSend>
 800c608:	6278      	str	r0, [r7, #36]	@ 0x24
 800c60a:	e008      	b.n	800c61e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c60c:	4b06      	ldr	r3, [pc, #24]	@ (800c628 <xTimerGenericCommand+0x98>)
 800c60e:	6818      	ldr	r0, [r3, #0]
 800c610:	f107 0110 	add.w	r1, r7, #16
 800c614:	2300      	movs	r3, #0
 800c616:	683a      	ldr	r2, [r7, #0]
 800c618:	f7fe f9de 	bl	800a9d8 <xQueueGenericSendFromISR>
 800c61c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c620:	4618      	mov	r0, r3
 800c622:	3728      	adds	r7, #40	@ 0x28
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	20001238 	.word	0x20001238

0800c62c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b088      	sub	sp, #32
 800c630:	af02      	add	r7, sp, #8
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c636:	4b23      	ldr	r3, [pc, #140]	@ (800c6c4 <prvProcessExpiredTimer+0x98>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	3304      	adds	r3, #4
 800c644:	4618      	mov	r0, r3
 800c646:	f7fd fe2f 	bl	800a2a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c650:	f003 0304 	and.w	r3, r3, #4
 800c654:	2b00      	cmp	r3, #0
 800c656:	d023      	beq.n	800c6a0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	699a      	ldr	r2, [r3, #24]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	18d1      	adds	r1, r2, r3
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	683a      	ldr	r2, [r7, #0]
 800c664:	6978      	ldr	r0, [r7, #20]
 800c666:	f000 f8d5 	bl	800c814 <prvInsertTimerInActiveList>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d020      	beq.n	800c6b2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c670:	2300      	movs	r3, #0
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	2300      	movs	r3, #0
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	2100      	movs	r1, #0
 800c67a:	6978      	ldr	r0, [r7, #20]
 800c67c:	f7ff ff88 	bl	800c590 <xTimerGenericCommand>
 800c680:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d114      	bne.n	800c6b2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c68c:	f383 8811 	msr	BASEPRI, r3
 800c690:	f3bf 8f6f 	isb	sy
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	60fb      	str	r3, [r7, #12]
}
 800c69a:	bf00      	nop
 800c69c:	bf00      	nop
 800c69e:	e7fd      	b.n	800c69c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6a6:	f023 0301 	bic.w	r3, r3, #1
 800c6aa:	b2da      	uxtb	r2, r3
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	6a1b      	ldr	r3, [r3, #32]
 800c6b6:	6978      	ldr	r0, [r7, #20]
 800c6b8:	4798      	blx	r3
}
 800c6ba:	bf00      	nop
 800c6bc:	3718      	adds	r7, #24
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	20001230 	.word	0x20001230

0800c6c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6d0:	f107 0308 	add.w	r3, r7, #8
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f000 f859 	bl	800c78c <prvGetNextExpireTime>
 800c6da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	4619      	mov	r1, r3
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f000 f805 	bl	800c6f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c6e6:	f000 f8d7 	bl	800c898 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6ea:	bf00      	nop
 800c6ec:	e7f0      	b.n	800c6d0 <prvTimerTask+0x8>
	...

0800c6f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c6fa:	f7ff f927 	bl	800b94c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c6fe:	f107 0308 	add.w	r3, r7, #8
 800c702:	4618      	mov	r0, r3
 800c704:	f000 f866 	bl	800c7d4 <prvSampleTimeNow>
 800c708:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d130      	bne.n	800c772 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d10a      	bne.n	800c72c <prvProcessTimerOrBlockTask+0x3c>
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d806      	bhi.n	800c72c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c71e:	f7ff f923 	bl	800b968 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c722:	68f9      	ldr	r1, [r7, #12]
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f7ff ff81 	bl	800c62c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c72a:	e024      	b.n	800c776 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d008      	beq.n	800c744 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c732:	4b13      	ldr	r3, [pc, #76]	@ (800c780 <prvProcessTimerOrBlockTask+0x90>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d101      	bne.n	800c740 <prvProcessTimerOrBlockTask+0x50>
 800c73c:	2301      	movs	r3, #1
 800c73e:	e000      	b.n	800c742 <prvProcessTimerOrBlockTask+0x52>
 800c740:	2300      	movs	r3, #0
 800c742:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c744:	4b0f      	ldr	r3, [pc, #60]	@ (800c784 <prvProcessTimerOrBlockTask+0x94>)
 800c746:	6818      	ldr	r0, [r3, #0]
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	1ad3      	subs	r3, r2, r3
 800c74e:	683a      	ldr	r2, [r7, #0]
 800c750:	4619      	mov	r1, r3
 800c752:	f7fe fe83 	bl	800b45c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c756:	f7ff f907 	bl	800b968 <xTaskResumeAll>
 800c75a:	4603      	mov	r3, r0
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d10a      	bne.n	800c776 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c760:	4b09      	ldr	r3, [pc, #36]	@ (800c788 <prvProcessTimerOrBlockTask+0x98>)
 800c762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c766:	601a      	str	r2, [r3, #0]
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	f3bf 8f6f 	isb	sy
}
 800c770:	e001      	b.n	800c776 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c772:	f7ff f8f9 	bl	800b968 <xTaskResumeAll>
}
 800c776:	bf00      	nop
 800c778:	3710      	adds	r7, #16
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	20001234 	.word	0x20001234
 800c784:	20001238 	.word	0x20001238
 800c788:	e000ed04 	.word	0xe000ed04

0800c78c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c78c:	b480      	push	{r7}
 800c78e:	b085      	sub	sp, #20
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c794:	4b0e      	ldr	r3, [pc, #56]	@ (800c7d0 <prvGetNextExpireTime+0x44>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d101      	bne.n	800c7a2 <prvGetNextExpireTime+0x16>
 800c79e:	2201      	movs	r2, #1
 800c7a0:	e000      	b.n	800c7a4 <prvGetNextExpireTime+0x18>
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d105      	bne.n	800c7bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7b0:	4b07      	ldr	r3, [pc, #28]	@ (800c7d0 <prvGetNextExpireTime+0x44>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	60fb      	str	r3, [r7, #12]
 800c7ba:	e001      	b.n	800c7c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3714      	adds	r7, #20
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop
 800c7d0:	20001230 	.word	0x20001230

0800c7d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c7dc:	f7ff f962 	bl	800baa4 <xTaskGetTickCount>
 800c7e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c7e2:	4b0b      	ldr	r3, [pc, #44]	@ (800c810 <prvSampleTimeNow+0x3c>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	68fa      	ldr	r2, [r7, #12]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d205      	bcs.n	800c7f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c7ec:	f000 f93a 	bl	800ca64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	601a      	str	r2, [r3, #0]
 800c7f6:	e002      	b.n	800c7fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c7fe:	4a04      	ldr	r2, [pc, #16]	@ (800c810 <prvSampleTimeNow+0x3c>)
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c804:	68fb      	ldr	r3, [r7, #12]
}
 800c806:	4618      	mov	r0, r3
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	20001240 	.word	0x20001240

0800c814 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b086      	sub	sp, #24
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	607a      	str	r2, [r7, #4]
 800c820:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c822:	2300      	movs	r3, #0
 800c824:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	68ba      	ldr	r2, [r7, #8]
 800c82a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	68fa      	ldr	r2, [r7, #12]
 800c830:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c832:	68ba      	ldr	r2, [r7, #8]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	429a      	cmp	r2, r3
 800c838:	d812      	bhi.n	800c860 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	1ad2      	subs	r2, r2, r3
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	699b      	ldr	r3, [r3, #24]
 800c844:	429a      	cmp	r2, r3
 800c846:	d302      	bcc.n	800c84e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c848:	2301      	movs	r3, #1
 800c84a:	617b      	str	r3, [r7, #20]
 800c84c:	e01b      	b.n	800c886 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c84e:	4b10      	ldr	r3, [pc, #64]	@ (800c890 <prvInsertTimerInActiveList+0x7c>)
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	3304      	adds	r3, #4
 800c856:	4619      	mov	r1, r3
 800c858:	4610      	mov	r0, r2
 800c85a:	f7fd fcec 	bl	800a236 <vListInsert>
 800c85e:	e012      	b.n	800c886 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	429a      	cmp	r2, r3
 800c866:	d206      	bcs.n	800c876 <prvInsertTimerInActiveList+0x62>
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d302      	bcc.n	800c876 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c870:	2301      	movs	r3, #1
 800c872:	617b      	str	r3, [r7, #20]
 800c874:	e007      	b.n	800c886 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c876:	4b07      	ldr	r3, [pc, #28]	@ (800c894 <prvInsertTimerInActiveList+0x80>)
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	3304      	adds	r3, #4
 800c87e:	4619      	mov	r1, r3
 800c880:	4610      	mov	r0, r2
 800c882:	f7fd fcd8 	bl	800a236 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c886:	697b      	ldr	r3, [r7, #20]
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3718      	adds	r7, #24
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	20001234 	.word	0x20001234
 800c894:	20001230 	.word	0x20001230

0800c898 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b08e      	sub	sp, #56	@ 0x38
 800c89c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c89e:	e0ce      	b.n	800ca3e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	da19      	bge.n	800c8da <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c8a6:	1d3b      	adds	r3, r7, #4
 800c8a8:	3304      	adds	r3, #4
 800c8aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10b      	bne.n	800c8ca <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8b6:	f383 8811 	msr	BASEPRI, r3
 800c8ba:	f3bf 8f6f 	isb	sy
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	61fb      	str	r3, [r7, #28]
}
 800c8c4:	bf00      	nop
 800c8c6:	bf00      	nop
 800c8c8:	e7fd      	b.n	800c8c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8d0:	6850      	ldr	r0, [r2, #4]
 800c8d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8d4:	6892      	ldr	r2, [r2, #8]
 800c8d6:	4611      	mov	r1, r2
 800c8d8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f2c0 80ae 	blt.w	800ca3e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e8:	695b      	ldr	r3, [r3, #20]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d004      	beq.n	800c8f8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f0:	3304      	adds	r3, #4
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fd fcd8 	bl	800a2a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c8f8:	463b      	mov	r3, r7
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7ff ff6a 	bl	800c7d4 <prvSampleTimeNow>
 800c900:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2b09      	cmp	r3, #9
 800c906:	f200 8097 	bhi.w	800ca38 <prvProcessReceivedCommands+0x1a0>
 800c90a:	a201      	add	r2, pc, #4	@ (adr r2, 800c910 <prvProcessReceivedCommands+0x78>)
 800c90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c910:	0800c939 	.word	0x0800c939
 800c914:	0800c939 	.word	0x0800c939
 800c918:	0800c939 	.word	0x0800c939
 800c91c:	0800c9af 	.word	0x0800c9af
 800c920:	0800c9c3 	.word	0x0800c9c3
 800c924:	0800ca0f 	.word	0x0800ca0f
 800c928:	0800c939 	.word	0x0800c939
 800c92c:	0800c939 	.word	0x0800c939
 800c930:	0800c9af 	.word	0x0800c9af
 800c934:	0800c9c3 	.word	0x0800c9c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c93a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c93e:	f043 0301 	orr.w	r3, r3, #1
 800c942:	b2da      	uxtb	r2, r3
 800c944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c946:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c94a:	68ba      	ldr	r2, [r7, #8]
 800c94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c94e:	699b      	ldr	r3, [r3, #24]
 800c950:	18d1      	adds	r1, r2, r3
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c956:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c958:	f7ff ff5c 	bl	800c814 <prvInsertTimerInActiveList>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d06c      	beq.n	800ca3c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c964:	6a1b      	ldr	r3, [r3, #32]
 800c966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c968:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c96c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c970:	f003 0304 	and.w	r3, r3, #4
 800c974:	2b00      	cmp	r3, #0
 800c976:	d061      	beq.n	800ca3c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c978:	68ba      	ldr	r2, [r7, #8]
 800c97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c97c:	699b      	ldr	r3, [r3, #24]
 800c97e:	441a      	add	r2, r3
 800c980:	2300      	movs	r3, #0
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	2300      	movs	r3, #0
 800c986:	2100      	movs	r1, #0
 800c988:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c98a:	f7ff fe01 	bl	800c590 <xTimerGenericCommand>
 800c98e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c990:	6a3b      	ldr	r3, [r7, #32]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d152      	bne.n	800ca3c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c99a:	f383 8811 	msr	BASEPRI, r3
 800c99e:	f3bf 8f6f 	isb	sy
 800c9a2:	f3bf 8f4f 	dsb	sy
 800c9a6:	61bb      	str	r3, [r7, #24]
}
 800c9a8:	bf00      	nop
 800c9aa:	bf00      	nop
 800c9ac:	e7fd      	b.n	800c9aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9b4:	f023 0301 	bic.w	r3, r3, #1
 800c9b8:	b2da      	uxtb	r2, r3
 800c9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c9c0:	e03d      	b.n	800ca3e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9c8:	f043 0301 	orr.w	r3, r3, #1
 800c9cc:	b2da      	uxtb	r2, r3
 800c9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c9d4:	68ba      	ldr	r2, [r7, #8]
 800c9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c9da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9dc:	699b      	ldr	r3, [r3, #24]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d10b      	bne.n	800c9fa <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9e6:	f383 8811 	msr	BASEPRI, r3
 800c9ea:	f3bf 8f6f 	isb	sy
 800c9ee:	f3bf 8f4f 	dsb	sy
 800c9f2:	617b      	str	r3, [r7, #20]
}
 800c9f4:	bf00      	nop
 800c9f6:	bf00      	nop
 800c9f8:	e7fd      	b.n	800c9f6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9fc:	699a      	ldr	r2, [r3, #24]
 800c9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca00:	18d1      	adds	r1, r2, r3
 800ca02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca08:	f7ff ff04 	bl	800c814 <prvInsertTimerInActiveList>
					break;
 800ca0c:	e017      	b.n	800ca3e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ca0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca14:	f003 0302 	and.w	r3, r3, #2
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d103      	bne.n	800ca24 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ca1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca1e:	f000 fbeb 	bl	800d1f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ca22:	e00c      	b.n	800ca3e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca2a:	f023 0301 	bic.w	r3, r3, #1
 800ca2e:	b2da      	uxtb	r2, r3
 800ca30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ca36:	e002      	b.n	800ca3e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ca38:	bf00      	nop
 800ca3a:	e000      	b.n	800ca3e <prvProcessReceivedCommands+0x1a6>
					break;
 800ca3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca3e:	4b08      	ldr	r3, [pc, #32]	@ (800ca60 <prvProcessReceivedCommands+0x1c8>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	1d39      	adds	r1, r7, #4
 800ca44:	2200      	movs	r2, #0
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7fe f8f4 	bl	800ac34 <xQueueReceive>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	f47f af26 	bne.w	800c8a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ca54:	bf00      	nop
 800ca56:	bf00      	nop
 800ca58:	3730      	adds	r7, #48	@ 0x30
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	20001238 	.word	0x20001238

0800ca64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b088      	sub	sp, #32
 800ca68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca6a:	e049      	b.n	800cb00 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca6c:	4b2e      	ldr	r3, [pc, #184]	@ (800cb28 <prvSwitchTimerLists+0xc4>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca76:	4b2c      	ldr	r3, [pc, #176]	@ (800cb28 <prvSwitchTimerLists+0xc4>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	68db      	ldr	r3, [r3, #12]
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	3304      	adds	r3, #4
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7fd fc0f 	bl	800a2a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6a1b      	ldr	r3, [r3, #32]
 800ca8e:	68f8      	ldr	r0, [r7, #12]
 800ca90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca98:	f003 0304 	and.w	r3, r3, #4
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d02f      	beq.n	800cb00 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	699b      	ldr	r3, [r3, #24]
 800caa4:	693a      	ldr	r2, [r7, #16]
 800caa6:	4413      	add	r3, r2
 800caa8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800caaa:	68ba      	ldr	r2, [r7, #8]
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d90e      	bls.n	800cad0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	68ba      	ldr	r2, [r7, #8]
 800cab6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	68fa      	ldr	r2, [r7, #12]
 800cabc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cabe:	4b1a      	ldr	r3, [pc, #104]	@ (800cb28 <prvSwitchTimerLists+0xc4>)
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	3304      	adds	r3, #4
 800cac6:	4619      	mov	r1, r3
 800cac8:	4610      	mov	r0, r2
 800caca:	f7fd fbb4 	bl	800a236 <vListInsert>
 800cace:	e017      	b.n	800cb00 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cad0:	2300      	movs	r3, #0
 800cad2:	9300      	str	r3, [sp, #0]
 800cad4:	2300      	movs	r3, #0
 800cad6:	693a      	ldr	r2, [r7, #16]
 800cad8:	2100      	movs	r1, #0
 800cada:	68f8      	ldr	r0, [r7, #12]
 800cadc:	f7ff fd58 	bl	800c590 <xTimerGenericCommand>
 800cae0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d10b      	bne.n	800cb00 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caec:	f383 8811 	msr	BASEPRI, r3
 800caf0:	f3bf 8f6f 	isb	sy
 800caf4:	f3bf 8f4f 	dsb	sy
 800caf8:	603b      	str	r3, [r7, #0]
}
 800cafa:	bf00      	nop
 800cafc:	bf00      	nop
 800cafe:	e7fd      	b.n	800cafc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb00:	4b09      	ldr	r3, [pc, #36]	@ (800cb28 <prvSwitchTimerLists+0xc4>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1b0      	bne.n	800ca6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cb0a:	4b07      	ldr	r3, [pc, #28]	@ (800cb28 <prvSwitchTimerLists+0xc4>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cb10:	4b06      	ldr	r3, [pc, #24]	@ (800cb2c <prvSwitchTimerLists+0xc8>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a04      	ldr	r2, [pc, #16]	@ (800cb28 <prvSwitchTimerLists+0xc4>)
 800cb16:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cb18:	4a04      	ldr	r2, [pc, #16]	@ (800cb2c <prvSwitchTimerLists+0xc8>)
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	6013      	str	r3, [r2, #0]
}
 800cb1e:	bf00      	nop
 800cb20:	3718      	adds	r7, #24
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	20001230 	.word	0x20001230
 800cb2c:	20001234 	.word	0x20001234

0800cb30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cb36:	f000 f96f 	bl	800ce18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cb3a:	4b15      	ldr	r3, [pc, #84]	@ (800cb90 <prvCheckForValidListAndQueue+0x60>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d120      	bne.n	800cb84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cb42:	4814      	ldr	r0, [pc, #80]	@ (800cb94 <prvCheckForValidListAndQueue+0x64>)
 800cb44:	f7fd fb26 	bl	800a194 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cb48:	4813      	ldr	r0, [pc, #76]	@ (800cb98 <prvCheckForValidListAndQueue+0x68>)
 800cb4a:	f7fd fb23 	bl	800a194 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cb4e:	4b13      	ldr	r3, [pc, #76]	@ (800cb9c <prvCheckForValidListAndQueue+0x6c>)
 800cb50:	4a10      	ldr	r2, [pc, #64]	@ (800cb94 <prvCheckForValidListAndQueue+0x64>)
 800cb52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cb54:	4b12      	ldr	r3, [pc, #72]	@ (800cba0 <prvCheckForValidListAndQueue+0x70>)
 800cb56:	4a10      	ldr	r2, [pc, #64]	@ (800cb98 <prvCheckForValidListAndQueue+0x68>)
 800cb58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	9300      	str	r3, [sp, #0]
 800cb5e:	4b11      	ldr	r3, [pc, #68]	@ (800cba4 <prvCheckForValidListAndQueue+0x74>)
 800cb60:	4a11      	ldr	r2, [pc, #68]	@ (800cba8 <prvCheckForValidListAndQueue+0x78>)
 800cb62:	2110      	movs	r1, #16
 800cb64:	200a      	movs	r0, #10
 800cb66:	f7fd fc33 	bl	800a3d0 <xQueueGenericCreateStatic>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	4a08      	ldr	r2, [pc, #32]	@ (800cb90 <prvCheckForValidListAndQueue+0x60>)
 800cb6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cb70:	4b07      	ldr	r3, [pc, #28]	@ (800cb90 <prvCheckForValidListAndQueue+0x60>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d005      	beq.n	800cb84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cb78:	4b05      	ldr	r3, [pc, #20]	@ (800cb90 <prvCheckForValidListAndQueue+0x60>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	490b      	ldr	r1, [pc, #44]	@ (800cbac <prvCheckForValidListAndQueue+0x7c>)
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7fe fc18 	bl	800b3b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb84:	f000 f97a 	bl	800ce7c <vPortExitCritical>
}
 800cb88:	bf00      	nop
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	20001238 	.word	0x20001238
 800cb94:	20001208 	.word	0x20001208
 800cb98:	2000121c 	.word	0x2000121c
 800cb9c:	20001230 	.word	0x20001230
 800cba0:	20001234 	.word	0x20001234
 800cba4:	200012e4 	.word	0x200012e4
 800cba8:	20001244 	.word	0x20001244
 800cbac:	0800de38 	.word	0x0800de38

0800cbb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b085      	sub	sp, #20
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	3b04      	subs	r3, #4
 800cbc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cbc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	3b04      	subs	r3, #4
 800cbce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	f023 0201 	bic.w	r2, r3, #1
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	3b04      	subs	r3, #4
 800cbde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cbe0:	4a0c      	ldr	r2, [pc, #48]	@ (800cc14 <pxPortInitialiseStack+0x64>)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	3b14      	subs	r3, #20
 800cbea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	3b04      	subs	r3, #4
 800cbf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f06f 0202 	mvn.w	r2, #2
 800cbfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	3b20      	subs	r3, #32
 800cc04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cc06:	68fb      	ldr	r3, [r7, #12]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3714      	adds	r7, #20
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr
 800cc14:	0800cc19 	.word	0x0800cc19

0800cc18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cc22:	4b13      	ldr	r3, [pc, #76]	@ (800cc70 <prvTaskExitError+0x58>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc2a:	d00b      	beq.n	800cc44 <prvTaskExitError+0x2c>
	__asm volatile
 800cc2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc30:	f383 8811 	msr	BASEPRI, r3
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	60fb      	str	r3, [r7, #12]
}
 800cc3e:	bf00      	nop
 800cc40:	bf00      	nop
 800cc42:	e7fd      	b.n	800cc40 <prvTaskExitError+0x28>
	__asm volatile
 800cc44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc48:	f383 8811 	msr	BASEPRI, r3
 800cc4c:	f3bf 8f6f 	isb	sy
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	60bb      	str	r3, [r7, #8]
}
 800cc56:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cc58:	bf00      	nop
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d0fc      	beq.n	800cc5a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cc60:	bf00      	nop
 800cc62:	bf00      	nop
 800cc64:	3714      	adds	r7, #20
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop
 800cc70:	2000000c 	.word	0x2000000c
	...

0800cc80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc80:	4b07      	ldr	r3, [pc, #28]	@ (800cca0 <pxCurrentTCBConst2>)
 800cc82:	6819      	ldr	r1, [r3, #0]
 800cc84:	6808      	ldr	r0, [r1, #0]
 800cc86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc8a:	f380 8809 	msr	PSP, r0
 800cc8e:	f3bf 8f6f 	isb	sy
 800cc92:	f04f 0000 	mov.w	r0, #0
 800cc96:	f380 8811 	msr	BASEPRI, r0
 800cc9a:	4770      	bx	lr
 800cc9c:	f3af 8000 	nop.w

0800cca0 <pxCurrentTCBConst2>:
 800cca0:	20000d08 	.word	0x20000d08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cca4:	bf00      	nop
 800cca6:	bf00      	nop

0800cca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cca8:	4808      	ldr	r0, [pc, #32]	@ (800cccc <prvPortStartFirstTask+0x24>)
 800ccaa:	6800      	ldr	r0, [r0, #0]
 800ccac:	6800      	ldr	r0, [r0, #0]
 800ccae:	f380 8808 	msr	MSP, r0
 800ccb2:	f04f 0000 	mov.w	r0, #0
 800ccb6:	f380 8814 	msr	CONTROL, r0
 800ccba:	b662      	cpsie	i
 800ccbc:	b661      	cpsie	f
 800ccbe:	f3bf 8f4f 	dsb	sy
 800ccc2:	f3bf 8f6f 	isb	sy
 800ccc6:	df00      	svc	0
 800ccc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ccca:	bf00      	nop
 800cccc:	e000ed08 	.word	0xe000ed08

0800ccd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b086      	sub	sp, #24
 800ccd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ccd6:	4b47      	ldr	r3, [pc, #284]	@ (800cdf4 <xPortStartScheduler+0x124>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4a47      	ldr	r2, [pc, #284]	@ (800cdf8 <xPortStartScheduler+0x128>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d10b      	bne.n	800ccf8 <xPortStartScheduler+0x28>
	__asm volatile
 800cce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce4:	f383 8811 	msr	BASEPRI, r3
 800cce8:	f3bf 8f6f 	isb	sy
 800ccec:	f3bf 8f4f 	dsb	sy
 800ccf0:	60fb      	str	r3, [r7, #12]
}
 800ccf2:	bf00      	nop
 800ccf4:	bf00      	nop
 800ccf6:	e7fd      	b.n	800ccf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ccf8:	4b3e      	ldr	r3, [pc, #248]	@ (800cdf4 <xPortStartScheduler+0x124>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	4a3f      	ldr	r2, [pc, #252]	@ (800cdfc <xPortStartScheduler+0x12c>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d10b      	bne.n	800cd1a <xPortStartScheduler+0x4a>
	__asm volatile
 800cd02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd06:	f383 8811 	msr	BASEPRI, r3
 800cd0a:	f3bf 8f6f 	isb	sy
 800cd0e:	f3bf 8f4f 	dsb	sy
 800cd12:	613b      	str	r3, [r7, #16]
}
 800cd14:	bf00      	nop
 800cd16:	bf00      	nop
 800cd18:	e7fd      	b.n	800cd16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd1a:	4b39      	ldr	r3, [pc, #228]	@ (800ce00 <xPortStartScheduler+0x130>)
 800cd1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	22ff      	movs	r2, #255	@ 0xff
 800cd2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cd34:	78fb      	ldrb	r3, [r7, #3]
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cd3c:	b2da      	uxtb	r2, r3
 800cd3e:	4b31      	ldr	r3, [pc, #196]	@ (800ce04 <xPortStartScheduler+0x134>)
 800cd40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cd42:	4b31      	ldr	r3, [pc, #196]	@ (800ce08 <xPortStartScheduler+0x138>)
 800cd44:	2207      	movs	r2, #7
 800cd46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd48:	e009      	b.n	800cd5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cd4a:	4b2f      	ldr	r3, [pc, #188]	@ (800ce08 <xPortStartScheduler+0x138>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	3b01      	subs	r3, #1
 800cd50:	4a2d      	ldr	r2, [pc, #180]	@ (800ce08 <xPortStartScheduler+0x138>)
 800cd52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cd54:	78fb      	ldrb	r3, [r7, #3]
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	005b      	lsls	r3, r3, #1
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd5e:	78fb      	ldrb	r3, [r7, #3]
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd66:	2b80      	cmp	r3, #128	@ 0x80
 800cd68:	d0ef      	beq.n	800cd4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cd6a:	4b27      	ldr	r3, [pc, #156]	@ (800ce08 <xPortStartScheduler+0x138>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f1c3 0307 	rsb	r3, r3, #7
 800cd72:	2b04      	cmp	r3, #4
 800cd74:	d00b      	beq.n	800cd8e <xPortStartScheduler+0xbe>
	__asm volatile
 800cd76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd7a:	f383 8811 	msr	BASEPRI, r3
 800cd7e:	f3bf 8f6f 	isb	sy
 800cd82:	f3bf 8f4f 	dsb	sy
 800cd86:	60bb      	str	r3, [r7, #8]
}
 800cd88:	bf00      	nop
 800cd8a:	bf00      	nop
 800cd8c:	e7fd      	b.n	800cd8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd8e:	4b1e      	ldr	r3, [pc, #120]	@ (800ce08 <xPortStartScheduler+0x138>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	021b      	lsls	r3, r3, #8
 800cd94:	4a1c      	ldr	r2, [pc, #112]	@ (800ce08 <xPortStartScheduler+0x138>)
 800cd96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd98:	4b1b      	ldr	r3, [pc, #108]	@ (800ce08 <xPortStartScheduler+0x138>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cda0:	4a19      	ldr	r2, [pc, #100]	@ (800ce08 <xPortStartScheduler+0x138>)
 800cda2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	b2da      	uxtb	r2, r3
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cdac:	4b17      	ldr	r3, [pc, #92]	@ (800ce0c <xPortStartScheduler+0x13c>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a16      	ldr	r2, [pc, #88]	@ (800ce0c <xPortStartScheduler+0x13c>)
 800cdb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cdb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cdb8:	4b14      	ldr	r3, [pc, #80]	@ (800ce0c <xPortStartScheduler+0x13c>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a13      	ldr	r2, [pc, #76]	@ (800ce0c <xPortStartScheduler+0x13c>)
 800cdbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cdc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cdc4:	f000 f8da 	bl	800cf7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cdc8:	4b11      	ldr	r3, [pc, #68]	@ (800ce10 <xPortStartScheduler+0x140>)
 800cdca:	2200      	movs	r2, #0
 800cdcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cdce:	f000 f8f9 	bl	800cfc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cdd2:	4b10      	ldr	r3, [pc, #64]	@ (800ce14 <xPortStartScheduler+0x144>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4a0f      	ldr	r2, [pc, #60]	@ (800ce14 <xPortStartScheduler+0x144>)
 800cdd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cddc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cdde:	f7ff ff63 	bl	800cca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cde2:	f7fe ff29 	bl	800bc38 <vTaskSwitchContext>
	prvTaskExitError();
 800cde6:	f7ff ff17 	bl	800cc18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cdea:	2300      	movs	r3, #0
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3718      	adds	r7, #24
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	e000ed00 	.word	0xe000ed00
 800cdf8:	410fc271 	.word	0x410fc271
 800cdfc:	410fc270 	.word	0x410fc270
 800ce00:	e000e400 	.word	0xe000e400
 800ce04:	20001334 	.word	0x20001334
 800ce08:	20001338 	.word	0x20001338
 800ce0c:	e000ed20 	.word	0xe000ed20
 800ce10:	2000000c 	.word	0x2000000c
 800ce14:	e000ef34 	.word	0xe000ef34

0800ce18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	607b      	str	r3, [r7, #4]
}
 800ce30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ce32:	4b10      	ldr	r3, [pc, #64]	@ (800ce74 <vPortEnterCritical+0x5c>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	3301      	adds	r3, #1
 800ce38:	4a0e      	ldr	r2, [pc, #56]	@ (800ce74 <vPortEnterCritical+0x5c>)
 800ce3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ce3c:	4b0d      	ldr	r3, [pc, #52]	@ (800ce74 <vPortEnterCritical+0x5c>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d110      	bne.n	800ce66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce44:	4b0c      	ldr	r3, [pc, #48]	@ (800ce78 <vPortEnterCritical+0x60>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	b2db      	uxtb	r3, r3
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00b      	beq.n	800ce66 <vPortEnterCritical+0x4e>
	__asm volatile
 800ce4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce52:	f383 8811 	msr	BASEPRI, r3
 800ce56:	f3bf 8f6f 	isb	sy
 800ce5a:	f3bf 8f4f 	dsb	sy
 800ce5e:	603b      	str	r3, [r7, #0]
}
 800ce60:	bf00      	nop
 800ce62:	bf00      	nop
 800ce64:	e7fd      	b.n	800ce62 <vPortEnterCritical+0x4a>
	}
}
 800ce66:	bf00      	nop
 800ce68:	370c      	adds	r7, #12
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	2000000c 	.word	0x2000000c
 800ce78:	e000ed04 	.word	0xe000ed04

0800ce7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce82:	4b12      	ldr	r3, [pc, #72]	@ (800cecc <vPortExitCritical+0x50>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d10b      	bne.n	800cea2 <vPortExitCritical+0x26>
	__asm volatile
 800ce8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce8e:	f383 8811 	msr	BASEPRI, r3
 800ce92:	f3bf 8f6f 	isb	sy
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	607b      	str	r3, [r7, #4]
}
 800ce9c:	bf00      	nop
 800ce9e:	bf00      	nop
 800cea0:	e7fd      	b.n	800ce9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cea2:	4b0a      	ldr	r3, [pc, #40]	@ (800cecc <vPortExitCritical+0x50>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	3b01      	subs	r3, #1
 800cea8:	4a08      	ldr	r2, [pc, #32]	@ (800cecc <vPortExitCritical+0x50>)
 800ceaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ceac:	4b07      	ldr	r3, [pc, #28]	@ (800cecc <vPortExitCritical+0x50>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d105      	bne.n	800cec0 <vPortExitCritical+0x44>
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	f383 8811 	msr	BASEPRI, r3
}
 800cebe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cec0:	bf00      	nop
 800cec2:	370c      	adds	r7, #12
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr
 800cecc:	2000000c 	.word	0x2000000c

0800ced0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ced0:	f3ef 8009 	mrs	r0, PSP
 800ced4:	f3bf 8f6f 	isb	sy
 800ced8:	4b15      	ldr	r3, [pc, #84]	@ (800cf30 <pxCurrentTCBConst>)
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	f01e 0f10 	tst.w	lr, #16
 800cee0:	bf08      	it	eq
 800cee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceea:	6010      	str	r0, [r2, #0]
 800ceec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cef0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cef4:	f380 8811 	msr	BASEPRI, r0
 800cef8:	f3bf 8f4f 	dsb	sy
 800cefc:	f3bf 8f6f 	isb	sy
 800cf00:	f7fe fe9a 	bl	800bc38 <vTaskSwitchContext>
 800cf04:	f04f 0000 	mov.w	r0, #0
 800cf08:	f380 8811 	msr	BASEPRI, r0
 800cf0c:	bc09      	pop	{r0, r3}
 800cf0e:	6819      	ldr	r1, [r3, #0]
 800cf10:	6808      	ldr	r0, [r1, #0]
 800cf12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf16:	f01e 0f10 	tst.w	lr, #16
 800cf1a:	bf08      	it	eq
 800cf1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cf20:	f380 8809 	msr	PSP, r0
 800cf24:	f3bf 8f6f 	isb	sy
 800cf28:	4770      	bx	lr
 800cf2a:	bf00      	nop
 800cf2c:	f3af 8000 	nop.w

0800cf30 <pxCurrentTCBConst>:
 800cf30:	20000d08 	.word	0x20000d08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cf34:	bf00      	nop
 800cf36:	bf00      	nop

0800cf38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf42:	f383 8811 	msr	BASEPRI, r3
 800cf46:	f3bf 8f6f 	isb	sy
 800cf4a:	f3bf 8f4f 	dsb	sy
 800cf4e:	607b      	str	r3, [r7, #4]
}
 800cf50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cf52:	f7fe fdb7 	bl	800bac4 <xTaskIncrementTick>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d003      	beq.n	800cf64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf5c:	4b06      	ldr	r3, [pc, #24]	@ (800cf78 <xPortSysTickHandler+0x40>)
 800cf5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf62:	601a      	str	r2, [r3, #0]
 800cf64:	2300      	movs	r3, #0
 800cf66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	f383 8811 	msr	BASEPRI, r3
}
 800cf6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cf70:	bf00      	nop
 800cf72:	3708      	adds	r7, #8
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	e000ed04 	.word	0xe000ed04

0800cf7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf80:	4b0b      	ldr	r3, [pc, #44]	@ (800cfb0 <vPortSetupTimerInterrupt+0x34>)
 800cf82:	2200      	movs	r2, #0
 800cf84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf86:	4b0b      	ldr	r3, [pc, #44]	@ (800cfb4 <vPortSetupTimerInterrupt+0x38>)
 800cf88:	2200      	movs	r2, #0
 800cf8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf8c:	4b0a      	ldr	r3, [pc, #40]	@ (800cfb8 <vPortSetupTimerInterrupt+0x3c>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4a0a      	ldr	r2, [pc, #40]	@ (800cfbc <vPortSetupTimerInterrupt+0x40>)
 800cf92:	fba2 2303 	umull	r2, r3, r2, r3
 800cf96:	099b      	lsrs	r3, r3, #6
 800cf98:	4a09      	ldr	r2, [pc, #36]	@ (800cfc0 <vPortSetupTimerInterrupt+0x44>)
 800cf9a:	3b01      	subs	r3, #1
 800cf9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf9e:	4b04      	ldr	r3, [pc, #16]	@ (800cfb0 <vPortSetupTimerInterrupt+0x34>)
 800cfa0:	2207      	movs	r2, #7
 800cfa2:	601a      	str	r2, [r3, #0]
}
 800cfa4:	bf00      	nop
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr
 800cfae:	bf00      	nop
 800cfb0:	e000e010 	.word	0xe000e010
 800cfb4:	e000e018 	.word	0xe000e018
 800cfb8:	20000000 	.word	0x20000000
 800cfbc:	10624dd3 	.word	0x10624dd3
 800cfc0:	e000e014 	.word	0xe000e014

0800cfc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cfc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cfd4 <vPortEnableVFP+0x10>
 800cfc8:	6801      	ldr	r1, [r0, #0]
 800cfca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cfce:	6001      	str	r1, [r0, #0]
 800cfd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cfd2:	bf00      	nop
 800cfd4:	e000ed88 	.word	0xe000ed88

0800cfd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cfde:	f3ef 8305 	mrs	r3, IPSR
 800cfe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2b0f      	cmp	r3, #15
 800cfe8:	d915      	bls.n	800d016 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cfea:	4a18      	ldr	r2, [pc, #96]	@ (800d04c <vPortValidateInterruptPriority+0x74>)
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	4413      	add	r3, r2
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cff4:	4b16      	ldr	r3, [pc, #88]	@ (800d050 <vPortValidateInterruptPriority+0x78>)
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	7afa      	ldrb	r2, [r7, #11]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d20b      	bcs.n	800d016 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d002:	f383 8811 	msr	BASEPRI, r3
 800d006:	f3bf 8f6f 	isb	sy
 800d00a:	f3bf 8f4f 	dsb	sy
 800d00e:	607b      	str	r3, [r7, #4]
}
 800d010:	bf00      	nop
 800d012:	bf00      	nop
 800d014:	e7fd      	b.n	800d012 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d016:	4b0f      	ldr	r3, [pc, #60]	@ (800d054 <vPortValidateInterruptPriority+0x7c>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d01e:	4b0e      	ldr	r3, [pc, #56]	@ (800d058 <vPortValidateInterruptPriority+0x80>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	429a      	cmp	r2, r3
 800d024:	d90b      	bls.n	800d03e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d02a:	f383 8811 	msr	BASEPRI, r3
 800d02e:	f3bf 8f6f 	isb	sy
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	603b      	str	r3, [r7, #0]
}
 800d038:	bf00      	nop
 800d03a:	bf00      	nop
 800d03c:	e7fd      	b.n	800d03a <vPortValidateInterruptPriority+0x62>
	}
 800d03e:	bf00      	nop
 800d040:	3714      	adds	r7, #20
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	e000e3f0 	.word	0xe000e3f0
 800d050:	20001334 	.word	0x20001334
 800d054:	e000ed0c 	.word	0xe000ed0c
 800d058:	20001338 	.word	0x20001338

0800d05c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b08a      	sub	sp, #40	@ 0x28
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d064:	2300      	movs	r3, #0
 800d066:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d068:	f7fe fc70 	bl	800b94c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d06c:	4b5c      	ldr	r3, [pc, #368]	@ (800d1e0 <pvPortMalloc+0x184>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d101      	bne.n	800d078 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d074:	f000 f924 	bl	800d2c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d078:	4b5a      	ldr	r3, [pc, #360]	@ (800d1e4 <pvPortMalloc+0x188>)
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	4013      	ands	r3, r2
 800d080:	2b00      	cmp	r3, #0
 800d082:	f040 8095 	bne.w	800d1b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d01e      	beq.n	800d0ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d08c:	2208      	movs	r2, #8
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	4413      	add	r3, r2
 800d092:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f003 0307 	and.w	r3, r3, #7
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d015      	beq.n	800d0ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f023 0307 	bic.w	r3, r3, #7
 800d0a4:	3308      	adds	r3, #8
 800d0a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f003 0307 	and.w	r3, r3, #7
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d00b      	beq.n	800d0ca <pvPortMalloc+0x6e>
	__asm volatile
 800d0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0b6:	f383 8811 	msr	BASEPRI, r3
 800d0ba:	f3bf 8f6f 	isb	sy
 800d0be:	f3bf 8f4f 	dsb	sy
 800d0c2:	617b      	str	r3, [r7, #20]
}
 800d0c4:	bf00      	nop
 800d0c6:	bf00      	nop
 800d0c8:	e7fd      	b.n	800d0c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d06f      	beq.n	800d1b0 <pvPortMalloc+0x154>
 800d0d0:	4b45      	ldr	r3, [pc, #276]	@ (800d1e8 <pvPortMalloc+0x18c>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	687a      	ldr	r2, [r7, #4]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d86a      	bhi.n	800d1b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d0da:	4b44      	ldr	r3, [pc, #272]	@ (800d1ec <pvPortMalloc+0x190>)
 800d0dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d0de:	4b43      	ldr	r3, [pc, #268]	@ (800d1ec <pvPortMalloc+0x190>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0e4:	e004      	b.n	800d0f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	687a      	ldr	r2, [r7, #4]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d903      	bls.n	800d102 <pvPortMalloc+0xa6>
 800d0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d1f1      	bne.n	800d0e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d102:	4b37      	ldr	r3, [pc, #220]	@ (800d1e0 <pvPortMalloc+0x184>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d108:	429a      	cmp	r2, r3
 800d10a:	d051      	beq.n	800d1b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d10c:	6a3b      	ldr	r3, [r7, #32]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	2208      	movs	r2, #8
 800d112:	4413      	add	r3, r2
 800d114:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	6a3b      	ldr	r3, [r7, #32]
 800d11c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d120:	685a      	ldr	r2, [r3, #4]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	1ad2      	subs	r2, r2, r3
 800d126:	2308      	movs	r3, #8
 800d128:	005b      	lsls	r3, r3, #1
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d920      	bls.n	800d170 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d12e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	4413      	add	r3, r2
 800d134:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d136:	69bb      	ldr	r3, [r7, #24]
 800d138:	f003 0307 	and.w	r3, r3, #7
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d00b      	beq.n	800d158 <pvPortMalloc+0xfc>
	__asm volatile
 800d140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d144:	f383 8811 	msr	BASEPRI, r3
 800d148:	f3bf 8f6f 	isb	sy
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	613b      	str	r3, [r7, #16]
}
 800d152:	bf00      	nop
 800d154:	bf00      	nop
 800d156:	e7fd      	b.n	800d154 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d15a:	685a      	ldr	r2, [r3, #4]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	1ad2      	subs	r2, r2, r3
 800d160:	69bb      	ldr	r3, [r7, #24]
 800d162:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d166:	687a      	ldr	r2, [r7, #4]
 800d168:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d16a:	69b8      	ldr	r0, [r7, #24]
 800d16c:	f000 f90a 	bl	800d384 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d170:	4b1d      	ldr	r3, [pc, #116]	@ (800d1e8 <pvPortMalloc+0x18c>)
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	1ad3      	subs	r3, r2, r3
 800d17a:	4a1b      	ldr	r2, [pc, #108]	@ (800d1e8 <pvPortMalloc+0x18c>)
 800d17c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d17e:	4b1a      	ldr	r3, [pc, #104]	@ (800d1e8 <pvPortMalloc+0x18c>)
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	4b1b      	ldr	r3, [pc, #108]	@ (800d1f0 <pvPortMalloc+0x194>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	429a      	cmp	r2, r3
 800d188:	d203      	bcs.n	800d192 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d18a:	4b17      	ldr	r3, [pc, #92]	@ (800d1e8 <pvPortMalloc+0x18c>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	4a18      	ldr	r2, [pc, #96]	@ (800d1f0 <pvPortMalloc+0x194>)
 800d190:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d194:	685a      	ldr	r2, [r3, #4]
 800d196:	4b13      	ldr	r3, [pc, #76]	@ (800d1e4 <pvPortMalloc+0x188>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	431a      	orrs	r2, r3
 800d19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d19e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d1a6:	4b13      	ldr	r3, [pc, #76]	@ (800d1f4 <pvPortMalloc+0x198>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	4a11      	ldr	r2, [pc, #68]	@ (800d1f4 <pvPortMalloc+0x198>)
 800d1ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d1b0:	f7fe fbda 	bl	800b968 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	f003 0307 	and.w	r3, r3, #7
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d00b      	beq.n	800d1d6 <pvPortMalloc+0x17a>
	__asm volatile
 800d1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1c2:	f383 8811 	msr	BASEPRI, r3
 800d1c6:	f3bf 8f6f 	isb	sy
 800d1ca:	f3bf 8f4f 	dsb	sy
 800d1ce:	60fb      	str	r3, [r7, #12]
}
 800d1d0:	bf00      	nop
 800d1d2:	bf00      	nop
 800d1d4:	e7fd      	b.n	800d1d2 <pvPortMalloc+0x176>
	return pvReturn;
 800d1d6:	69fb      	ldr	r3, [r7, #28]
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3728      	adds	r7, #40	@ 0x28
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	20004f44 	.word	0x20004f44
 800d1e4:	20004f58 	.word	0x20004f58
 800d1e8:	20004f48 	.word	0x20004f48
 800d1ec:	20004f3c 	.word	0x20004f3c
 800d1f0:	20004f4c 	.word	0x20004f4c
 800d1f4:	20004f50 	.word	0x20004f50

0800d1f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b086      	sub	sp, #24
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d04f      	beq.n	800d2aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d20a:	2308      	movs	r3, #8
 800d20c:	425b      	negs	r3, r3
 800d20e:	697a      	ldr	r2, [r7, #20]
 800d210:	4413      	add	r3, r2
 800d212:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	685a      	ldr	r2, [r3, #4]
 800d21c:	4b25      	ldr	r3, [pc, #148]	@ (800d2b4 <vPortFree+0xbc>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4013      	ands	r3, r2
 800d222:	2b00      	cmp	r3, #0
 800d224:	d10b      	bne.n	800d23e <vPortFree+0x46>
	__asm volatile
 800d226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d22a:	f383 8811 	msr	BASEPRI, r3
 800d22e:	f3bf 8f6f 	isb	sy
 800d232:	f3bf 8f4f 	dsb	sy
 800d236:	60fb      	str	r3, [r7, #12]
}
 800d238:	bf00      	nop
 800d23a:	bf00      	nop
 800d23c:	e7fd      	b.n	800d23a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d00b      	beq.n	800d25e <vPortFree+0x66>
	__asm volatile
 800d246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d24a:	f383 8811 	msr	BASEPRI, r3
 800d24e:	f3bf 8f6f 	isb	sy
 800d252:	f3bf 8f4f 	dsb	sy
 800d256:	60bb      	str	r3, [r7, #8]
}
 800d258:	bf00      	nop
 800d25a:	bf00      	nop
 800d25c:	e7fd      	b.n	800d25a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	685a      	ldr	r2, [r3, #4]
 800d262:	4b14      	ldr	r3, [pc, #80]	@ (800d2b4 <vPortFree+0xbc>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4013      	ands	r3, r2
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d01e      	beq.n	800d2aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d11a      	bne.n	800d2aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	685a      	ldr	r2, [r3, #4]
 800d278:	4b0e      	ldr	r3, [pc, #56]	@ (800d2b4 <vPortFree+0xbc>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	43db      	mvns	r3, r3
 800d27e:	401a      	ands	r2, r3
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d284:	f7fe fb62 	bl	800b94c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	685a      	ldr	r2, [r3, #4]
 800d28c:	4b0a      	ldr	r3, [pc, #40]	@ (800d2b8 <vPortFree+0xc0>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4413      	add	r3, r2
 800d292:	4a09      	ldr	r2, [pc, #36]	@ (800d2b8 <vPortFree+0xc0>)
 800d294:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d296:	6938      	ldr	r0, [r7, #16]
 800d298:	f000 f874 	bl	800d384 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d29c:	4b07      	ldr	r3, [pc, #28]	@ (800d2bc <vPortFree+0xc4>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	4a06      	ldr	r2, [pc, #24]	@ (800d2bc <vPortFree+0xc4>)
 800d2a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d2a6:	f7fe fb5f 	bl	800b968 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d2aa:	bf00      	nop
 800d2ac:	3718      	adds	r7, #24
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	20004f58 	.word	0x20004f58
 800d2b8:	20004f48 	.word	0x20004f48
 800d2bc:	20004f54 	.word	0x20004f54

0800d2c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b085      	sub	sp, #20
 800d2c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d2c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d2ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d2cc:	4b27      	ldr	r3, [pc, #156]	@ (800d36c <prvHeapInit+0xac>)
 800d2ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f003 0307 	and.w	r3, r3, #7
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00c      	beq.n	800d2f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	3307      	adds	r3, #7
 800d2de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f023 0307 	bic.w	r3, r3, #7
 800d2e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	1ad3      	subs	r3, r2, r3
 800d2ee:	4a1f      	ldr	r2, [pc, #124]	@ (800d36c <prvHeapInit+0xac>)
 800d2f0:	4413      	add	r3, r2
 800d2f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d2f8:	4a1d      	ldr	r2, [pc, #116]	@ (800d370 <prvHeapInit+0xb0>)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d2fe:	4b1c      	ldr	r3, [pc, #112]	@ (800d370 <prvHeapInit+0xb0>)
 800d300:	2200      	movs	r2, #0
 800d302:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	68ba      	ldr	r2, [r7, #8]
 800d308:	4413      	add	r3, r2
 800d30a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d30c:	2208      	movs	r2, #8
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	1a9b      	subs	r3, r3, r2
 800d312:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f023 0307 	bic.w	r3, r3, #7
 800d31a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	4a15      	ldr	r2, [pc, #84]	@ (800d374 <prvHeapInit+0xb4>)
 800d320:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d322:	4b14      	ldr	r3, [pc, #80]	@ (800d374 <prvHeapInit+0xb4>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2200      	movs	r2, #0
 800d328:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d32a:	4b12      	ldr	r3, [pc, #72]	@ (800d374 <prvHeapInit+0xb4>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	2200      	movs	r2, #0
 800d330:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	1ad2      	subs	r2, r2, r3
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d340:	4b0c      	ldr	r3, [pc, #48]	@ (800d374 <prvHeapInit+0xb4>)
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	4a0a      	ldr	r2, [pc, #40]	@ (800d378 <prvHeapInit+0xb8>)
 800d34e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	4a09      	ldr	r2, [pc, #36]	@ (800d37c <prvHeapInit+0xbc>)
 800d356:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d358:	4b09      	ldr	r3, [pc, #36]	@ (800d380 <prvHeapInit+0xc0>)
 800d35a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d35e:	601a      	str	r2, [r3, #0]
}
 800d360:	bf00      	nop
 800d362:	3714      	adds	r7, #20
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr
 800d36c:	2000133c 	.word	0x2000133c
 800d370:	20004f3c 	.word	0x20004f3c
 800d374:	20004f44 	.word	0x20004f44
 800d378:	20004f4c 	.word	0x20004f4c
 800d37c:	20004f48 	.word	0x20004f48
 800d380:	20004f58 	.word	0x20004f58

0800d384 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d384:	b480      	push	{r7}
 800d386:	b085      	sub	sp, #20
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d38c:	4b28      	ldr	r3, [pc, #160]	@ (800d430 <prvInsertBlockIntoFreeList+0xac>)
 800d38e:	60fb      	str	r3, [r7, #12]
 800d390:	e002      	b.n	800d398 <prvInsertBlockIntoFreeList+0x14>
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	60fb      	str	r3, [r7, #12]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d8f7      	bhi.n	800d392 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	68ba      	ldr	r2, [r7, #8]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d108      	bne.n	800d3c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	685a      	ldr	r2, [r3, #4]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	441a      	add	r2, r3
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	68ba      	ldr	r2, [r7, #8]
 800d3d0:	441a      	add	r2, r3
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d118      	bne.n	800d40c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	4b15      	ldr	r3, [pc, #84]	@ (800d434 <prvInsertBlockIntoFreeList+0xb0>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d00d      	beq.n	800d402 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	685a      	ldr	r2, [r3, #4]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	441a      	add	r2, r3
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	601a      	str	r2, [r3, #0]
 800d400:	e008      	b.n	800d414 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d402:	4b0c      	ldr	r3, [pc, #48]	@ (800d434 <prvInsertBlockIntoFreeList+0xb0>)
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	601a      	str	r2, [r3, #0]
 800d40a:	e003      	b.n	800d414 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d002      	beq.n	800d422 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	687a      	ldr	r2, [r7, #4]
 800d420:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d422:	bf00      	nop
 800d424:	3714      	adds	r7, #20
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	20004f3c 	.word	0x20004f3c
 800d434:	20004f44 	.word	0x20004f44

0800d438 <sniprintf>:
 800d438:	b40c      	push	{r2, r3}
 800d43a:	b530      	push	{r4, r5, lr}
 800d43c:	4b18      	ldr	r3, [pc, #96]	@ (800d4a0 <sniprintf+0x68>)
 800d43e:	1e0c      	subs	r4, r1, #0
 800d440:	681d      	ldr	r5, [r3, #0]
 800d442:	b09d      	sub	sp, #116	@ 0x74
 800d444:	da08      	bge.n	800d458 <sniprintf+0x20>
 800d446:	238b      	movs	r3, #139	@ 0x8b
 800d448:	602b      	str	r3, [r5, #0]
 800d44a:	f04f 30ff 	mov.w	r0, #4294967295
 800d44e:	b01d      	add	sp, #116	@ 0x74
 800d450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d454:	b002      	add	sp, #8
 800d456:	4770      	bx	lr
 800d458:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d45c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d460:	f04f 0300 	mov.w	r3, #0
 800d464:	931b      	str	r3, [sp, #108]	@ 0x6c
 800d466:	bf14      	ite	ne
 800d468:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d46c:	4623      	moveq	r3, r4
 800d46e:	9304      	str	r3, [sp, #16]
 800d470:	9307      	str	r3, [sp, #28]
 800d472:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d476:	9002      	str	r0, [sp, #8]
 800d478:	9006      	str	r0, [sp, #24]
 800d47a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d47e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d480:	ab21      	add	r3, sp, #132	@ 0x84
 800d482:	a902      	add	r1, sp, #8
 800d484:	4628      	mov	r0, r5
 800d486:	9301      	str	r3, [sp, #4]
 800d488:	f000 f9a2 	bl	800d7d0 <_svfiprintf_r>
 800d48c:	1c43      	adds	r3, r0, #1
 800d48e:	bfbc      	itt	lt
 800d490:	238b      	movlt	r3, #139	@ 0x8b
 800d492:	602b      	strlt	r3, [r5, #0]
 800d494:	2c00      	cmp	r4, #0
 800d496:	d0da      	beq.n	800d44e <sniprintf+0x16>
 800d498:	9b02      	ldr	r3, [sp, #8]
 800d49a:	2200      	movs	r2, #0
 800d49c:	701a      	strb	r2, [r3, #0]
 800d49e:	e7d6      	b.n	800d44e <sniprintf+0x16>
 800d4a0:	20000010 	.word	0x20000010

0800d4a4 <memset>:
 800d4a4:	4402      	add	r2, r0
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d100      	bne.n	800d4ae <memset+0xa>
 800d4ac:	4770      	bx	lr
 800d4ae:	f803 1b01 	strb.w	r1, [r3], #1
 800d4b2:	e7f9      	b.n	800d4a8 <memset+0x4>

0800d4b4 <__errno>:
 800d4b4:	4b01      	ldr	r3, [pc, #4]	@ (800d4bc <__errno+0x8>)
 800d4b6:	6818      	ldr	r0, [r3, #0]
 800d4b8:	4770      	bx	lr
 800d4ba:	bf00      	nop
 800d4bc:	20000010 	.word	0x20000010

0800d4c0 <__libc_init_array>:
 800d4c0:	b570      	push	{r4, r5, r6, lr}
 800d4c2:	4d0d      	ldr	r5, [pc, #52]	@ (800d4f8 <__libc_init_array+0x38>)
 800d4c4:	4c0d      	ldr	r4, [pc, #52]	@ (800d4fc <__libc_init_array+0x3c>)
 800d4c6:	1b64      	subs	r4, r4, r5
 800d4c8:	10a4      	asrs	r4, r4, #2
 800d4ca:	2600      	movs	r6, #0
 800d4cc:	42a6      	cmp	r6, r4
 800d4ce:	d109      	bne.n	800d4e4 <__libc_init_array+0x24>
 800d4d0:	4d0b      	ldr	r5, [pc, #44]	@ (800d500 <__libc_init_array+0x40>)
 800d4d2:	4c0c      	ldr	r4, [pc, #48]	@ (800d504 <__libc_init_array+0x44>)
 800d4d4:	f000 fc64 	bl	800dda0 <_init>
 800d4d8:	1b64      	subs	r4, r4, r5
 800d4da:	10a4      	asrs	r4, r4, #2
 800d4dc:	2600      	movs	r6, #0
 800d4de:	42a6      	cmp	r6, r4
 800d4e0:	d105      	bne.n	800d4ee <__libc_init_array+0x2e>
 800d4e2:	bd70      	pop	{r4, r5, r6, pc}
 800d4e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4e8:	4798      	blx	r3
 800d4ea:	3601      	adds	r6, #1
 800d4ec:	e7ee      	b.n	800d4cc <__libc_init_array+0xc>
 800d4ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4f2:	4798      	blx	r3
 800d4f4:	3601      	adds	r6, #1
 800d4f6:	e7f2      	b.n	800d4de <__libc_init_array+0x1e>
 800d4f8:	0800df78 	.word	0x0800df78
 800d4fc:	0800df78 	.word	0x0800df78
 800d500:	0800df78 	.word	0x0800df78
 800d504:	0800df7c 	.word	0x0800df7c

0800d508 <__retarget_lock_acquire_recursive>:
 800d508:	4770      	bx	lr

0800d50a <__retarget_lock_release_recursive>:
 800d50a:	4770      	bx	lr

0800d50c <memcpy>:
 800d50c:	440a      	add	r2, r1
 800d50e:	4291      	cmp	r1, r2
 800d510:	f100 33ff 	add.w	r3, r0, #4294967295
 800d514:	d100      	bne.n	800d518 <memcpy+0xc>
 800d516:	4770      	bx	lr
 800d518:	b510      	push	{r4, lr}
 800d51a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d51e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d522:	4291      	cmp	r1, r2
 800d524:	d1f9      	bne.n	800d51a <memcpy+0xe>
 800d526:	bd10      	pop	{r4, pc}

0800d528 <_free_r>:
 800d528:	b538      	push	{r3, r4, r5, lr}
 800d52a:	4605      	mov	r5, r0
 800d52c:	2900      	cmp	r1, #0
 800d52e:	d041      	beq.n	800d5b4 <_free_r+0x8c>
 800d530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d534:	1f0c      	subs	r4, r1, #4
 800d536:	2b00      	cmp	r3, #0
 800d538:	bfb8      	it	lt
 800d53a:	18e4      	addlt	r4, r4, r3
 800d53c:	f000 f8e0 	bl	800d700 <__malloc_lock>
 800d540:	4a1d      	ldr	r2, [pc, #116]	@ (800d5b8 <_free_r+0x90>)
 800d542:	6813      	ldr	r3, [r2, #0]
 800d544:	b933      	cbnz	r3, 800d554 <_free_r+0x2c>
 800d546:	6063      	str	r3, [r4, #4]
 800d548:	6014      	str	r4, [r2, #0]
 800d54a:	4628      	mov	r0, r5
 800d54c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d550:	f000 b8dc 	b.w	800d70c <__malloc_unlock>
 800d554:	42a3      	cmp	r3, r4
 800d556:	d908      	bls.n	800d56a <_free_r+0x42>
 800d558:	6820      	ldr	r0, [r4, #0]
 800d55a:	1821      	adds	r1, r4, r0
 800d55c:	428b      	cmp	r3, r1
 800d55e:	bf01      	itttt	eq
 800d560:	6819      	ldreq	r1, [r3, #0]
 800d562:	685b      	ldreq	r3, [r3, #4]
 800d564:	1809      	addeq	r1, r1, r0
 800d566:	6021      	streq	r1, [r4, #0]
 800d568:	e7ed      	b.n	800d546 <_free_r+0x1e>
 800d56a:	461a      	mov	r2, r3
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	b10b      	cbz	r3, 800d574 <_free_r+0x4c>
 800d570:	42a3      	cmp	r3, r4
 800d572:	d9fa      	bls.n	800d56a <_free_r+0x42>
 800d574:	6811      	ldr	r1, [r2, #0]
 800d576:	1850      	adds	r0, r2, r1
 800d578:	42a0      	cmp	r0, r4
 800d57a:	d10b      	bne.n	800d594 <_free_r+0x6c>
 800d57c:	6820      	ldr	r0, [r4, #0]
 800d57e:	4401      	add	r1, r0
 800d580:	1850      	adds	r0, r2, r1
 800d582:	4283      	cmp	r3, r0
 800d584:	6011      	str	r1, [r2, #0]
 800d586:	d1e0      	bne.n	800d54a <_free_r+0x22>
 800d588:	6818      	ldr	r0, [r3, #0]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	6053      	str	r3, [r2, #4]
 800d58e:	4408      	add	r0, r1
 800d590:	6010      	str	r0, [r2, #0]
 800d592:	e7da      	b.n	800d54a <_free_r+0x22>
 800d594:	d902      	bls.n	800d59c <_free_r+0x74>
 800d596:	230c      	movs	r3, #12
 800d598:	602b      	str	r3, [r5, #0]
 800d59a:	e7d6      	b.n	800d54a <_free_r+0x22>
 800d59c:	6820      	ldr	r0, [r4, #0]
 800d59e:	1821      	adds	r1, r4, r0
 800d5a0:	428b      	cmp	r3, r1
 800d5a2:	bf04      	itt	eq
 800d5a4:	6819      	ldreq	r1, [r3, #0]
 800d5a6:	685b      	ldreq	r3, [r3, #4]
 800d5a8:	6063      	str	r3, [r4, #4]
 800d5aa:	bf04      	itt	eq
 800d5ac:	1809      	addeq	r1, r1, r0
 800d5ae:	6021      	streq	r1, [r4, #0]
 800d5b0:	6054      	str	r4, [r2, #4]
 800d5b2:	e7ca      	b.n	800d54a <_free_r+0x22>
 800d5b4:	bd38      	pop	{r3, r4, r5, pc}
 800d5b6:	bf00      	nop
 800d5b8:	200050a0 	.word	0x200050a0

0800d5bc <sbrk_aligned>:
 800d5bc:	b570      	push	{r4, r5, r6, lr}
 800d5be:	4e0f      	ldr	r6, [pc, #60]	@ (800d5fc <sbrk_aligned+0x40>)
 800d5c0:	460c      	mov	r4, r1
 800d5c2:	6831      	ldr	r1, [r6, #0]
 800d5c4:	4605      	mov	r5, r0
 800d5c6:	b911      	cbnz	r1, 800d5ce <sbrk_aligned+0x12>
 800d5c8:	f000 fba4 	bl	800dd14 <_sbrk_r>
 800d5cc:	6030      	str	r0, [r6, #0]
 800d5ce:	4621      	mov	r1, r4
 800d5d0:	4628      	mov	r0, r5
 800d5d2:	f000 fb9f 	bl	800dd14 <_sbrk_r>
 800d5d6:	1c43      	adds	r3, r0, #1
 800d5d8:	d103      	bne.n	800d5e2 <sbrk_aligned+0x26>
 800d5da:	f04f 34ff 	mov.w	r4, #4294967295
 800d5de:	4620      	mov	r0, r4
 800d5e0:	bd70      	pop	{r4, r5, r6, pc}
 800d5e2:	1cc4      	adds	r4, r0, #3
 800d5e4:	f024 0403 	bic.w	r4, r4, #3
 800d5e8:	42a0      	cmp	r0, r4
 800d5ea:	d0f8      	beq.n	800d5de <sbrk_aligned+0x22>
 800d5ec:	1a21      	subs	r1, r4, r0
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	f000 fb90 	bl	800dd14 <_sbrk_r>
 800d5f4:	3001      	adds	r0, #1
 800d5f6:	d1f2      	bne.n	800d5de <sbrk_aligned+0x22>
 800d5f8:	e7ef      	b.n	800d5da <sbrk_aligned+0x1e>
 800d5fa:	bf00      	nop
 800d5fc:	2000509c 	.word	0x2000509c

0800d600 <_malloc_r>:
 800d600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d604:	1ccd      	adds	r5, r1, #3
 800d606:	f025 0503 	bic.w	r5, r5, #3
 800d60a:	3508      	adds	r5, #8
 800d60c:	2d0c      	cmp	r5, #12
 800d60e:	bf38      	it	cc
 800d610:	250c      	movcc	r5, #12
 800d612:	2d00      	cmp	r5, #0
 800d614:	4606      	mov	r6, r0
 800d616:	db01      	blt.n	800d61c <_malloc_r+0x1c>
 800d618:	42a9      	cmp	r1, r5
 800d61a:	d904      	bls.n	800d626 <_malloc_r+0x26>
 800d61c:	230c      	movs	r3, #12
 800d61e:	6033      	str	r3, [r6, #0]
 800d620:	2000      	movs	r0, #0
 800d622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d626:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d6fc <_malloc_r+0xfc>
 800d62a:	f000 f869 	bl	800d700 <__malloc_lock>
 800d62e:	f8d8 3000 	ldr.w	r3, [r8]
 800d632:	461c      	mov	r4, r3
 800d634:	bb44      	cbnz	r4, 800d688 <_malloc_r+0x88>
 800d636:	4629      	mov	r1, r5
 800d638:	4630      	mov	r0, r6
 800d63a:	f7ff ffbf 	bl	800d5bc <sbrk_aligned>
 800d63e:	1c43      	adds	r3, r0, #1
 800d640:	4604      	mov	r4, r0
 800d642:	d158      	bne.n	800d6f6 <_malloc_r+0xf6>
 800d644:	f8d8 4000 	ldr.w	r4, [r8]
 800d648:	4627      	mov	r7, r4
 800d64a:	2f00      	cmp	r7, #0
 800d64c:	d143      	bne.n	800d6d6 <_malloc_r+0xd6>
 800d64e:	2c00      	cmp	r4, #0
 800d650:	d04b      	beq.n	800d6ea <_malloc_r+0xea>
 800d652:	6823      	ldr	r3, [r4, #0]
 800d654:	4639      	mov	r1, r7
 800d656:	4630      	mov	r0, r6
 800d658:	eb04 0903 	add.w	r9, r4, r3
 800d65c:	f000 fb5a 	bl	800dd14 <_sbrk_r>
 800d660:	4581      	cmp	r9, r0
 800d662:	d142      	bne.n	800d6ea <_malloc_r+0xea>
 800d664:	6821      	ldr	r1, [r4, #0]
 800d666:	1a6d      	subs	r5, r5, r1
 800d668:	4629      	mov	r1, r5
 800d66a:	4630      	mov	r0, r6
 800d66c:	f7ff ffa6 	bl	800d5bc <sbrk_aligned>
 800d670:	3001      	adds	r0, #1
 800d672:	d03a      	beq.n	800d6ea <_malloc_r+0xea>
 800d674:	6823      	ldr	r3, [r4, #0]
 800d676:	442b      	add	r3, r5
 800d678:	6023      	str	r3, [r4, #0]
 800d67a:	f8d8 3000 	ldr.w	r3, [r8]
 800d67e:	685a      	ldr	r2, [r3, #4]
 800d680:	bb62      	cbnz	r2, 800d6dc <_malloc_r+0xdc>
 800d682:	f8c8 7000 	str.w	r7, [r8]
 800d686:	e00f      	b.n	800d6a8 <_malloc_r+0xa8>
 800d688:	6822      	ldr	r2, [r4, #0]
 800d68a:	1b52      	subs	r2, r2, r5
 800d68c:	d420      	bmi.n	800d6d0 <_malloc_r+0xd0>
 800d68e:	2a0b      	cmp	r2, #11
 800d690:	d917      	bls.n	800d6c2 <_malloc_r+0xc2>
 800d692:	1961      	adds	r1, r4, r5
 800d694:	42a3      	cmp	r3, r4
 800d696:	6025      	str	r5, [r4, #0]
 800d698:	bf18      	it	ne
 800d69a:	6059      	strne	r1, [r3, #4]
 800d69c:	6863      	ldr	r3, [r4, #4]
 800d69e:	bf08      	it	eq
 800d6a0:	f8c8 1000 	streq.w	r1, [r8]
 800d6a4:	5162      	str	r2, [r4, r5]
 800d6a6:	604b      	str	r3, [r1, #4]
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	f000 f82f 	bl	800d70c <__malloc_unlock>
 800d6ae:	f104 000b 	add.w	r0, r4, #11
 800d6b2:	1d23      	adds	r3, r4, #4
 800d6b4:	f020 0007 	bic.w	r0, r0, #7
 800d6b8:	1ac2      	subs	r2, r0, r3
 800d6ba:	bf1c      	itt	ne
 800d6bc:	1a1b      	subne	r3, r3, r0
 800d6be:	50a3      	strne	r3, [r4, r2]
 800d6c0:	e7af      	b.n	800d622 <_malloc_r+0x22>
 800d6c2:	6862      	ldr	r2, [r4, #4]
 800d6c4:	42a3      	cmp	r3, r4
 800d6c6:	bf0c      	ite	eq
 800d6c8:	f8c8 2000 	streq.w	r2, [r8]
 800d6cc:	605a      	strne	r2, [r3, #4]
 800d6ce:	e7eb      	b.n	800d6a8 <_malloc_r+0xa8>
 800d6d0:	4623      	mov	r3, r4
 800d6d2:	6864      	ldr	r4, [r4, #4]
 800d6d4:	e7ae      	b.n	800d634 <_malloc_r+0x34>
 800d6d6:	463c      	mov	r4, r7
 800d6d8:	687f      	ldr	r7, [r7, #4]
 800d6da:	e7b6      	b.n	800d64a <_malloc_r+0x4a>
 800d6dc:	461a      	mov	r2, r3
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	42a3      	cmp	r3, r4
 800d6e2:	d1fb      	bne.n	800d6dc <_malloc_r+0xdc>
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	6053      	str	r3, [r2, #4]
 800d6e8:	e7de      	b.n	800d6a8 <_malloc_r+0xa8>
 800d6ea:	230c      	movs	r3, #12
 800d6ec:	6033      	str	r3, [r6, #0]
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	f000 f80c 	bl	800d70c <__malloc_unlock>
 800d6f4:	e794      	b.n	800d620 <_malloc_r+0x20>
 800d6f6:	6005      	str	r5, [r0, #0]
 800d6f8:	e7d6      	b.n	800d6a8 <_malloc_r+0xa8>
 800d6fa:	bf00      	nop
 800d6fc:	200050a0 	.word	0x200050a0

0800d700 <__malloc_lock>:
 800d700:	4801      	ldr	r0, [pc, #4]	@ (800d708 <__malloc_lock+0x8>)
 800d702:	f7ff bf01 	b.w	800d508 <__retarget_lock_acquire_recursive>
 800d706:	bf00      	nop
 800d708:	20005098 	.word	0x20005098

0800d70c <__malloc_unlock>:
 800d70c:	4801      	ldr	r0, [pc, #4]	@ (800d714 <__malloc_unlock+0x8>)
 800d70e:	f7ff befc 	b.w	800d50a <__retarget_lock_release_recursive>
 800d712:	bf00      	nop
 800d714:	20005098 	.word	0x20005098

0800d718 <__ssputs_r>:
 800d718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d71c:	688e      	ldr	r6, [r1, #8]
 800d71e:	461f      	mov	r7, r3
 800d720:	42be      	cmp	r6, r7
 800d722:	680b      	ldr	r3, [r1, #0]
 800d724:	4682      	mov	sl, r0
 800d726:	460c      	mov	r4, r1
 800d728:	4690      	mov	r8, r2
 800d72a:	d82d      	bhi.n	800d788 <__ssputs_r+0x70>
 800d72c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d730:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d734:	d026      	beq.n	800d784 <__ssputs_r+0x6c>
 800d736:	6965      	ldr	r5, [r4, #20]
 800d738:	6909      	ldr	r1, [r1, #16]
 800d73a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d73e:	eba3 0901 	sub.w	r9, r3, r1
 800d742:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d746:	1c7b      	adds	r3, r7, #1
 800d748:	444b      	add	r3, r9
 800d74a:	106d      	asrs	r5, r5, #1
 800d74c:	429d      	cmp	r5, r3
 800d74e:	bf38      	it	cc
 800d750:	461d      	movcc	r5, r3
 800d752:	0553      	lsls	r3, r2, #21
 800d754:	d527      	bpl.n	800d7a6 <__ssputs_r+0x8e>
 800d756:	4629      	mov	r1, r5
 800d758:	f7ff ff52 	bl	800d600 <_malloc_r>
 800d75c:	4606      	mov	r6, r0
 800d75e:	b360      	cbz	r0, 800d7ba <__ssputs_r+0xa2>
 800d760:	6921      	ldr	r1, [r4, #16]
 800d762:	464a      	mov	r2, r9
 800d764:	f7ff fed2 	bl	800d50c <memcpy>
 800d768:	89a3      	ldrh	r3, [r4, #12]
 800d76a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d76e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d772:	81a3      	strh	r3, [r4, #12]
 800d774:	6126      	str	r6, [r4, #16]
 800d776:	6165      	str	r5, [r4, #20]
 800d778:	444e      	add	r6, r9
 800d77a:	eba5 0509 	sub.w	r5, r5, r9
 800d77e:	6026      	str	r6, [r4, #0]
 800d780:	60a5      	str	r5, [r4, #8]
 800d782:	463e      	mov	r6, r7
 800d784:	42be      	cmp	r6, r7
 800d786:	d900      	bls.n	800d78a <__ssputs_r+0x72>
 800d788:	463e      	mov	r6, r7
 800d78a:	6820      	ldr	r0, [r4, #0]
 800d78c:	4632      	mov	r2, r6
 800d78e:	4641      	mov	r1, r8
 800d790:	f000 faa6 	bl	800dce0 <memmove>
 800d794:	68a3      	ldr	r3, [r4, #8]
 800d796:	1b9b      	subs	r3, r3, r6
 800d798:	60a3      	str	r3, [r4, #8]
 800d79a:	6823      	ldr	r3, [r4, #0]
 800d79c:	4433      	add	r3, r6
 800d79e:	6023      	str	r3, [r4, #0]
 800d7a0:	2000      	movs	r0, #0
 800d7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7a6:	462a      	mov	r2, r5
 800d7a8:	f000 fac4 	bl	800dd34 <_realloc_r>
 800d7ac:	4606      	mov	r6, r0
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	d1e0      	bne.n	800d774 <__ssputs_r+0x5c>
 800d7b2:	6921      	ldr	r1, [r4, #16]
 800d7b4:	4650      	mov	r0, sl
 800d7b6:	f7ff feb7 	bl	800d528 <_free_r>
 800d7ba:	230c      	movs	r3, #12
 800d7bc:	f8ca 3000 	str.w	r3, [sl]
 800d7c0:	89a3      	ldrh	r3, [r4, #12]
 800d7c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7c6:	81a3      	strh	r3, [r4, #12]
 800d7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7cc:	e7e9      	b.n	800d7a2 <__ssputs_r+0x8a>
	...

0800d7d0 <_svfiprintf_r>:
 800d7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d4:	4698      	mov	r8, r3
 800d7d6:	898b      	ldrh	r3, [r1, #12]
 800d7d8:	061b      	lsls	r3, r3, #24
 800d7da:	b09d      	sub	sp, #116	@ 0x74
 800d7dc:	4607      	mov	r7, r0
 800d7de:	460d      	mov	r5, r1
 800d7e0:	4614      	mov	r4, r2
 800d7e2:	d510      	bpl.n	800d806 <_svfiprintf_r+0x36>
 800d7e4:	690b      	ldr	r3, [r1, #16]
 800d7e6:	b973      	cbnz	r3, 800d806 <_svfiprintf_r+0x36>
 800d7e8:	2140      	movs	r1, #64	@ 0x40
 800d7ea:	f7ff ff09 	bl	800d600 <_malloc_r>
 800d7ee:	6028      	str	r0, [r5, #0]
 800d7f0:	6128      	str	r0, [r5, #16]
 800d7f2:	b930      	cbnz	r0, 800d802 <_svfiprintf_r+0x32>
 800d7f4:	230c      	movs	r3, #12
 800d7f6:	603b      	str	r3, [r7, #0]
 800d7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7fc:	b01d      	add	sp, #116	@ 0x74
 800d7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d802:	2340      	movs	r3, #64	@ 0x40
 800d804:	616b      	str	r3, [r5, #20]
 800d806:	2300      	movs	r3, #0
 800d808:	9309      	str	r3, [sp, #36]	@ 0x24
 800d80a:	2320      	movs	r3, #32
 800d80c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d810:	f8cd 800c 	str.w	r8, [sp, #12]
 800d814:	2330      	movs	r3, #48	@ 0x30
 800d816:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d9b4 <_svfiprintf_r+0x1e4>
 800d81a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d81e:	f04f 0901 	mov.w	r9, #1
 800d822:	4623      	mov	r3, r4
 800d824:	469a      	mov	sl, r3
 800d826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d82a:	b10a      	cbz	r2, 800d830 <_svfiprintf_r+0x60>
 800d82c:	2a25      	cmp	r2, #37	@ 0x25
 800d82e:	d1f9      	bne.n	800d824 <_svfiprintf_r+0x54>
 800d830:	ebba 0b04 	subs.w	fp, sl, r4
 800d834:	d00b      	beq.n	800d84e <_svfiprintf_r+0x7e>
 800d836:	465b      	mov	r3, fp
 800d838:	4622      	mov	r2, r4
 800d83a:	4629      	mov	r1, r5
 800d83c:	4638      	mov	r0, r7
 800d83e:	f7ff ff6b 	bl	800d718 <__ssputs_r>
 800d842:	3001      	adds	r0, #1
 800d844:	f000 80a7 	beq.w	800d996 <_svfiprintf_r+0x1c6>
 800d848:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d84a:	445a      	add	r2, fp
 800d84c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d84e:	f89a 3000 	ldrb.w	r3, [sl]
 800d852:	2b00      	cmp	r3, #0
 800d854:	f000 809f 	beq.w	800d996 <_svfiprintf_r+0x1c6>
 800d858:	2300      	movs	r3, #0
 800d85a:	f04f 32ff 	mov.w	r2, #4294967295
 800d85e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d862:	f10a 0a01 	add.w	sl, sl, #1
 800d866:	9304      	str	r3, [sp, #16]
 800d868:	9307      	str	r3, [sp, #28]
 800d86a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d86e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d870:	4654      	mov	r4, sl
 800d872:	2205      	movs	r2, #5
 800d874:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d878:	484e      	ldr	r0, [pc, #312]	@ (800d9b4 <_svfiprintf_r+0x1e4>)
 800d87a:	f7f2 fcd9 	bl	8000230 <memchr>
 800d87e:	9a04      	ldr	r2, [sp, #16]
 800d880:	b9d8      	cbnz	r0, 800d8ba <_svfiprintf_r+0xea>
 800d882:	06d0      	lsls	r0, r2, #27
 800d884:	bf44      	itt	mi
 800d886:	2320      	movmi	r3, #32
 800d888:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d88c:	0711      	lsls	r1, r2, #28
 800d88e:	bf44      	itt	mi
 800d890:	232b      	movmi	r3, #43	@ 0x2b
 800d892:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d896:	f89a 3000 	ldrb.w	r3, [sl]
 800d89a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d89c:	d015      	beq.n	800d8ca <_svfiprintf_r+0xfa>
 800d89e:	9a07      	ldr	r2, [sp, #28]
 800d8a0:	4654      	mov	r4, sl
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	f04f 0c0a 	mov.w	ip, #10
 800d8a8:	4621      	mov	r1, r4
 800d8aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8ae:	3b30      	subs	r3, #48	@ 0x30
 800d8b0:	2b09      	cmp	r3, #9
 800d8b2:	d94b      	bls.n	800d94c <_svfiprintf_r+0x17c>
 800d8b4:	b1b0      	cbz	r0, 800d8e4 <_svfiprintf_r+0x114>
 800d8b6:	9207      	str	r2, [sp, #28]
 800d8b8:	e014      	b.n	800d8e4 <_svfiprintf_r+0x114>
 800d8ba:	eba0 0308 	sub.w	r3, r0, r8
 800d8be:	fa09 f303 	lsl.w	r3, r9, r3
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	9304      	str	r3, [sp, #16]
 800d8c6:	46a2      	mov	sl, r4
 800d8c8:	e7d2      	b.n	800d870 <_svfiprintf_r+0xa0>
 800d8ca:	9b03      	ldr	r3, [sp, #12]
 800d8cc:	1d19      	adds	r1, r3, #4
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	9103      	str	r1, [sp, #12]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	bfbb      	ittet	lt
 800d8d6:	425b      	neglt	r3, r3
 800d8d8:	f042 0202 	orrlt.w	r2, r2, #2
 800d8dc:	9307      	strge	r3, [sp, #28]
 800d8de:	9307      	strlt	r3, [sp, #28]
 800d8e0:	bfb8      	it	lt
 800d8e2:	9204      	strlt	r2, [sp, #16]
 800d8e4:	7823      	ldrb	r3, [r4, #0]
 800d8e6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8e8:	d10a      	bne.n	800d900 <_svfiprintf_r+0x130>
 800d8ea:	7863      	ldrb	r3, [r4, #1]
 800d8ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8ee:	d132      	bne.n	800d956 <_svfiprintf_r+0x186>
 800d8f0:	9b03      	ldr	r3, [sp, #12]
 800d8f2:	1d1a      	adds	r2, r3, #4
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	9203      	str	r2, [sp, #12]
 800d8f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d8fc:	3402      	adds	r4, #2
 800d8fe:	9305      	str	r3, [sp, #20]
 800d900:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d9c4 <_svfiprintf_r+0x1f4>
 800d904:	7821      	ldrb	r1, [r4, #0]
 800d906:	2203      	movs	r2, #3
 800d908:	4650      	mov	r0, sl
 800d90a:	f7f2 fc91 	bl	8000230 <memchr>
 800d90e:	b138      	cbz	r0, 800d920 <_svfiprintf_r+0x150>
 800d910:	9b04      	ldr	r3, [sp, #16]
 800d912:	eba0 000a 	sub.w	r0, r0, sl
 800d916:	2240      	movs	r2, #64	@ 0x40
 800d918:	4082      	lsls	r2, r0
 800d91a:	4313      	orrs	r3, r2
 800d91c:	3401      	adds	r4, #1
 800d91e:	9304      	str	r3, [sp, #16]
 800d920:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d924:	4824      	ldr	r0, [pc, #144]	@ (800d9b8 <_svfiprintf_r+0x1e8>)
 800d926:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d92a:	2206      	movs	r2, #6
 800d92c:	f7f2 fc80 	bl	8000230 <memchr>
 800d930:	2800      	cmp	r0, #0
 800d932:	d036      	beq.n	800d9a2 <_svfiprintf_r+0x1d2>
 800d934:	4b21      	ldr	r3, [pc, #132]	@ (800d9bc <_svfiprintf_r+0x1ec>)
 800d936:	bb1b      	cbnz	r3, 800d980 <_svfiprintf_r+0x1b0>
 800d938:	9b03      	ldr	r3, [sp, #12]
 800d93a:	3307      	adds	r3, #7
 800d93c:	f023 0307 	bic.w	r3, r3, #7
 800d940:	3308      	adds	r3, #8
 800d942:	9303      	str	r3, [sp, #12]
 800d944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d946:	4433      	add	r3, r6
 800d948:	9309      	str	r3, [sp, #36]	@ 0x24
 800d94a:	e76a      	b.n	800d822 <_svfiprintf_r+0x52>
 800d94c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d950:	460c      	mov	r4, r1
 800d952:	2001      	movs	r0, #1
 800d954:	e7a8      	b.n	800d8a8 <_svfiprintf_r+0xd8>
 800d956:	2300      	movs	r3, #0
 800d958:	3401      	adds	r4, #1
 800d95a:	9305      	str	r3, [sp, #20]
 800d95c:	4619      	mov	r1, r3
 800d95e:	f04f 0c0a 	mov.w	ip, #10
 800d962:	4620      	mov	r0, r4
 800d964:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d968:	3a30      	subs	r2, #48	@ 0x30
 800d96a:	2a09      	cmp	r2, #9
 800d96c:	d903      	bls.n	800d976 <_svfiprintf_r+0x1a6>
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d0c6      	beq.n	800d900 <_svfiprintf_r+0x130>
 800d972:	9105      	str	r1, [sp, #20]
 800d974:	e7c4      	b.n	800d900 <_svfiprintf_r+0x130>
 800d976:	fb0c 2101 	mla	r1, ip, r1, r2
 800d97a:	4604      	mov	r4, r0
 800d97c:	2301      	movs	r3, #1
 800d97e:	e7f0      	b.n	800d962 <_svfiprintf_r+0x192>
 800d980:	ab03      	add	r3, sp, #12
 800d982:	9300      	str	r3, [sp, #0]
 800d984:	462a      	mov	r2, r5
 800d986:	4b0e      	ldr	r3, [pc, #56]	@ (800d9c0 <_svfiprintf_r+0x1f0>)
 800d988:	a904      	add	r1, sp, #16
 800d98a:	4638      	mov	r0, r7
 800d98c:	f3af 8000 	nop.w
 800d990:	1c42      	adds	r2, r0, #1
 800d992:	4606      	mov	r6, r0
 800d994:	d1d6      	bne.n	800d944 <_svfiprintf_r+0x174>
 800d996:	89ab      	ldrh	r3, [r5, #12]
 800d998:	065b      	lsls	r3, r3, #25
 800d99a:	f53f af2d 	bmi.w	800d7f8 <_svfiprintf_r+0x28>
 800d99e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d9a0:	e72c      	b.n	800d7fc <_svfiprintf_r+0x2c>
 800d9a2:	ab03      	add	r3, sp, #12
 800d9a4:	9300      	str	r3, [sp, #0]
 800d9a6:	462a      	mov	r2, r5
 800d9a8:	4b05      	ldr	r3, [pc, #20]	@ (800d9c0 <_svfiprintf_r+0x1f0>)
 800d9aa:	a904      	add	r1, sp, #16
 800d9ac:	4638      	mov	r0, r7
 800d9ae:	f000 f879 	bl	800daa4 <_printf_i>
 800d9b2:	e7ed      	b.n	800d990 <_svfiprintf_r+0x1c0>
 800d9b4:	0800df3c 	.word	0x0800df3c
 800d9b8:	0800df46 	.word	0x0800df46
 800d9bc:	00000000 	.word	0x00000000
 800d9c0:	0800d719 	.word	0x0800d719
 800d9c4:	0800df42 	.word	0x0800df42

0800d9c8 <_printf_common>:
 800d9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9cc:	4616      	mov	r6, r2
 800d9ce:	4698      	mov	r8, r3
 800d9d0:	688a      	ldr	r2, [r1, #8]
 800d9d2:	690b      	ldr	r3, [r1, #16]
 800d9d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	bfb8      	it	lt
 800d9dc:	4613      	movlt	r3, r2
 800d9de:	6033      	str	r3, [r6, #0]
 800d9e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d9e4:	4607      	mov	r7, r0
 800d9e6:	460c      	mov	r4, r1
 800d9e8:	b10a      	cbz	r2, 800d9ee <_printf_common+0x26>
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	6033      	str	r3, [r6, #0]
 800d9ee:	6823      	ldr	r3, [r4, #0]
 800d9f0:	0699      	lsls	r1, r3, #26
 800d9f2:	bf42      	ittt	mi
 800d9f4:	6833      	ldrmi	r3, [r6, #0]
 800d9f6:	3302      	addmi	r3, #2
 800d9f8:	6033      	strmi	r3, [r6, #0]
 800d9fa:	6825      	ldr	r5, [r4, #0]
 800d9fc:	f015 0506 	ands.w	r5, r5, #6
 800da00:	d106      	bne.n	800da10 <_printf_common+0x48>
 800da02:	f104 0a19 	add.w	sl, r4, #25
 800da06:	68e3      	ldr	r3, [r4, #12]
 800da08:	6832      	ldr	r2, [r6, #0]
 800da0a:	1a9b      	subs	r3, r3, r2
 800da0c:	42ab      	cmp	r3, r5
 800da0e:	dc26      	bgt.n	800da5e <_printf_common+0x96>
 800da10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800da14:	6822      	ldr	r2, [r4, #0]
 800da16:	3b00      	subs	r3, #0
 800da18:	bf18      	it	ne
 800da1a:	2301      	movne	r3, #1
 800da1c:	0692      	lsls	r2, r2, #26
 800da1e:	d42b      	bmi.n	800da78 <_printf_common+0xb0>
 800da20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800da24:	4641      	mov	r1, r8
 800da26:	4638      	mov	r0, r7
 800da28:	47c8      	blx	r9
 800da2a:	3001      	adds	r0, #1
 800da2c:	d01e      	beq.n	800da6c <_printf_common+0xa4>
 800da2e:	6823      	ldr	r3, [r4, #0]
 800da30:	6922      	ldr	r2, [r4, #16]
 800da32:	f003 0306 	and.w	r3, r3, #6
 800da36:	2b04      	cmp	r3, #4
 800da38:	bf02      	ittt	eq
 800da3a:	68e5      	ldreq	r5, [r4, #12]
 800da3c:	6833      	ldreq	r3, [r6, #0]
 800da3e:	1aed      	subeq	r5, r5, r3
 800da40:	68a3      	ldr	r3, [r4, #8]
 800da42:	bf0c      	ite	eq
 800da44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da48:	2500      	movne	r5, #0
 800da4a:	4293      	cmp	r3, r2
 800da4c:	bfc4      	itt	gt
 800da4e:	1a9b      	subgt	r3, r3, r2
 800da50:	18ed      	addgt	r5, r5, r3
 800da52:	2600      	movs	r6, #0
 800da54:	341a      	adds	r4, #26
 800da56:	42b5      	cmp	r5, r6
 800da58:	d11a      	bne.n	800da90 <_printf_common+0xc8>
 800da5a:	2000      	movs	r0, #0
 800da5c:	e008      	b.n	800da70 <_printf_common+0xa8>
 800da5e:	2301      	movs	r3, #1
 800da60:	4652      	mov	r2, sl
 800da62:	4641      	mov	r1, r8
 800da64:	4638      	mov	r0, r7
 800da66:	47c8      	blx	r9
 800da68:	3001      	adds	r0, #1
 800da6a:	d103      	bne.n	800da74 <_printf_common+0xac>
 800da6c:	f04f 30ff 	mov.w	r0, #4294967295
 800da70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da74:	3501      	adds	r5, #1
 800da76:	e7c6      	b.n	800da06 <_printf_common+0x3e>
 800da78:	18e1      	adds	r1, r4, r3
 800da7a:	1c5a      	adds	r2, r3, #1
 800da7c:	2030      	movs	r0, #48	@ 0x30
 800da7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da82:	4422      	add	r2, r4
 800da84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da8c:	3302      	adds	r3, #2
 800da8e:	e7c7      	b.n	800da20 <_printf_common+0x58>
 800da90:	2301      	movs	r3, #1
 800da92:	4622      	mov	r2, r4
 800da94:	4641      	mov	r1, r8
 800da96:	4638      	mov	r0, r7
 800da98:	47c8      	blx	r9
 800da9a:	3001      	adds	r0, #1
 800da9c:	d0e6      	beq.n	800da6c <_printf_common+0xa4>
 800da9e:	3601      	adds	r6, #1
 800daa0:	e7d9      	b.n	800da56 <_printf_common+0x8e>
	...

0800daa4 <_printf_i>:
 800daa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800daa8:	7e0f      	ldrb	r7, [r1, #24]
 800daaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800daac:	2f78      	cmp	r7, #120	@ 0x78
 800daae:	4691      	mov	r9, r2
 800dab0:	4680      	mov	r8, r0
 800dab2:	460c      	mov	r4, r1
 800dab4:	469a      	mov	sl, r3
 800dab6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800daba:	d807      	bhi.n	800dacc <_printf_i+0x28>
 800dabc:	2f62      	cmp	r7, #98	@ 0x62
 800dabe:	d80a      	bhi.n	800dad6 <_printf_i+0x32>
 800dac0:	2f00      	cmp	r7, #0
 800dac2:	f000 80d1 	beq.w	800dc68 <_printf_i+0x1c4>
 800dac6:	2f58      	cmp	r7, #88	@ 0x58
 800dac8:	f000 80b8 	beq.w	800dc3c <_printf_i+0x198>
 800dacc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dad0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dad4:	e03a      	b.n	800db4c <_printf_i+0xa8>
 800dad6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dada:	2b15      	cmp	r3, #21
 800dadc:	d8f6      	bhi.n	800dacc <_printf_i+0x28>
 800dade:	a101      	add	r1, pc, #4	@ (adr r1, 800dae4 <_printf_i+0x40>)
 800dae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dae4:	0800db3d 	.word	0x0800db3d
 800dae8:	0800db51 	.word	0x0800db51
 800daec:	0800dacd 	.word	0x0800dacd
 800daf0:	0800dacd 	.word	0x0800dacd
 800daf4:	0800dacd 	.word	0x0800dacd
 800daf8:	0800dacd 	.word	0x0800dacd
 800dafc:	0800db51 	.word	0x0800db51
 800db00:	0800dacd 	.word	0x0800dacd
 800db04:	0800dacd 	.word	0x0800dacd
 800db08:	0800dacd 	.word	0x0800dacd
 800db0c:	0800dacd 	.word	0x0800dacd
 800db10:	0800dc4f 	.word	0x0800dc4f
 800db14:	0800db7b 	.word	0x0800db7b
 800db18:	0800dc09 	.word	0x0800dc09
 800db1c:	0800dacd 	.word	0x0800dacd
 800db20:	0800dacd 	.word	0x0800dacd
 800db24:	0800dc71 	.word	0x0800dc71
 800db28:	0800dacd 	.word	0x0800dacd
 800db2c:	0800db7b 	.word	0x0800db7b
 800db30:	0800dacd 	.word	0x0800dacd
 800db34:	0800dacd 	.word	0x0800dacd
 800db38:	0800dc11 	.word	0x0800dc11
 800db3c:	6833      	ldr	r3, [r6, #0]
 800db3e:	1d1a      	adds	r2, r3, #4
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	6032      	str	r2, [r6, #0]
 800db44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db4c:	2301      	movs	r3, #1
 800db4e:	e09c      	b.n	800dc8a <_printf_i+0x1e6>
 800db50:	6833      	ldr	r3, [r6, #0]
 800db52:	6820      	ldr	r0, [r4, #0]
 800db54:	1d19      	adds	r1, r3, #4
 800db56:	6031      	str	r1, [r6, #0]
 800db58:	0606      	lsls	r6, r0, #24
 800db5a:	d501      	bpl.n	800db60 <_printf_i+0xbc>
 800db5c:	681d      	ldr	r5, [r3, #0]
 800db5e:	e003      	b.n	800db68 <_printf_i+0xc4>
 800db60:	0645      	lsls	r5, r0, #25
 800db62:	d5fb      	bpl.n	800db5c <_printf_i+0xb8>
 800db64:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db68:	2d00      	cmp	r5, #0
 800db6a:	da03      	bge.n	800db74 <_printf_i+0xd0>
 800db6c:	232d      	movs	r3, #45	@ 0x2d
 800db6e:	426d      	negs	r5, r5
 800db70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db74:	4858      	ldr	r0, [pc, #352]	@ (800dcd8 <_printf_i+0x234>)
 800db76:	230a      	movs	r3, #10
 800db78:	e011      	b.n	800db9e <_printf_i+0xfa>
 800db7a:	6821      	ldr	r1, [r4, #0]
 800db7c:	6833      	ldr	r3, [r6, #0]
 800db7e:	0608      	lsls	r0, r1, #24
 800db80:	f853 5b04 	ldr.w	r5, [r3], #4
 800db84:	d402      	bmi.n	800db8c <_printf_i+0xe8>
 800db86:	0649      	lsls	r1, r1, #25
 800db88:	bf48      	it	mi
 800db8a:	b2ad      	uxthmi	r5, r5
 800db8c:	2f6f      	cmp	r7, #111	@ 0x6f
 800db8e:	4852      	ldr	r0, [pc, #328]	@ (800dcd8 <_printf_i+0x234>)
 800db90:	6033      	str	r3, [r6, #0]
 800db92:	bf14      	ite	ne
 800db94:	230a      	movne	r3, #10
 800db96:	2308      	moveq	r3, #8
 800db98:	2100      	movs	r1, #0
 800db9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db9e:	6866      	ldr	r6, [r4, #4]
 800dba0:	60a6      	str	r6, [r4, #8]
 800dba2:	2e00      	cmp	r6, #0
 800dba4:	db05      	blt.n	800dbb2 <_printf_i+0x10e>
 800dba6:	6821      	ldr	r1, [r4, #0]
 800dba8:	432e      	orrs	r6, r5
 800dbaa:	f021 0104 	bic.w	r1, r1, #4
 800dbae:	6021      	str	r1, [r4, #0]
 800dbb0:	d04b      	beq.n	800dc4a <_printf_i+0x1a6>
 800dbb2:	4616      	mov	r6, r2
 800dbb4:	fbb5 f1f3 	udiv	r1, r5, r3
 800dbb8:	fb03 5711 	mls	r7, r3, r1, r5
 800dbbc:	5dc7      	ldrb	r7, [r0, r7]
 800dbbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dbc2:	462f      	mov	r7, r5
 800dbc4:	42bb      	cmp	r3, r7
 800dbc6:	460d      	mov	r5, r1
 800dbc8:	d9f4      	bls.n	800dbb4 <_printf_i+0x110>
 800dbca:	2b08      	cmp	r3, #8
 800dbcc:	d10b      	bne.n	800dbe6 <_printf_i+0x142>
 800dbce:	6823      	ldr	r3, [r4, #0]
 800dbd0:	07df      	lsls	r7, r3, #31
 800dbd2:	d508      	bpl.n	800dbe6 <_printf_i+0x142>
 800dbd4:	6923      	ldr	r3, [r4, #16]
 800dbd6:	6861      	ldr	r1, [r4, #4]
 800dbd8:	4299      	cmp	r1, r3
 800dbda:	bfde      	ittt	le
 800dbdc:	2330      	movle	r3, #48	@ 0x30
 800dbde:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dbe2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dbe6:	1b92      	subs	r2, r2, r6
 800dbe8:	6122      	str	r2, [r4, #16]
 800dbea:	f8cd a000 	str.w	sl, [sp]
 800dbee:	464b      	mov	r3, r9
 800dbf0:	aa03      	add	r2, sp, #12
 800dbf2:	4621      	mov	r1, r4
 800dbf4:	4640      	mov	r0, r8
 800dbf6:	f7ff fee7 	bl	800d9c8 <_printf_common>
 800dbfa:	3001      	adds	r0, #1
 800dbfc:	d14a      	bne.n	800dc94 <_printf_i+0x1f0>
 800dbfe:	f04f 30ff 	mov.w	r0, #4294967295
 800dc02:	b004      	add	sp, #16
 800dc04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc08:	6823      	ldr	r3, [r4, #0]
 800dc0a:	f043 0320 	orr.w	r3, r3, #32
 800dc0e:	6023      	str	r3, [r4, #0]
 800dc10:	4832      	ldr	r0, [pc, #200]	@ (800dcdc <_printf_i+0x238>)
 800dc12:	2778      	movs	r7, #120	@ 0x78
 800dc14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dc18:	6823      	ldr	r3, [r4, #0]
 800dc1a:	6831      	ldr	r1, [r6, #0]
 800dc1c:	061f      	lsls	r7, r3, #24
 800dc1e:	f851 5b04 	ldr.w	r5, [r1], #4
 800dc22:	d402      	bmi.n	800dc2a <_printf_i+0x186>
 800dc24:	065f      	lsls	r7, r3, #25
 800dc26:	bf48      	it	mi
 800dc28:	b2ad      	uxthmi	r5, r5
 800dc2a:	6031      	str	r1, [r6, #0]
 800dc2c:	07d9      	lsls	r1, r3, #31
 800dc2e:	bf44      	itt	mi
 800dc30:	f043 0320 	orrmi.w	r3, r3, #32
 800dc34:	6023      	strmi	r3, [r4, #0]
 800dc36:	b11d      	cbz	r5, 800dc40 <_printf_i+0x19c>
 800dc38:	2310      	movs	r3, #16
 800dc3a:	e7ad      	b.n	800db98 <_printf_i+0xf4>
 800dc3c:	4826      	ldr	r0, [pc, #152]	@ (800dcd8 <_printf_i+0x234>)
 800dc3e:	e7e9      	b.n	800dc14 <_printf_i+0x170>
 800dc40:	6823      	ldr	r3, [r4, #0]
 800dc42:	f023 0320 	bic.w	r3, r3, #32
 800dc46:	6023      	str	r3, [r4, #0]
 800dc48:	e7f6      	b.n	800dc38 <_printf_i+0x194>
 800dc4a:	4616      	mov	r6, r2
 800dc4c:	e7bd      	b.n	800dbca <_printf_i+0x126>
 800dc4e:	6833      	ldr	r3, [r6, #0]
 800dc50:	6825      	ldr	r5, [r4, #0]
 800dc52:	6961      	ldr	r1, [r4, #20]
 800dc54:	1d18      	adds	r0, r3, #4
 800dc56:	6030      	str	r0, [r6, #0]
 800dc58:	062e      	lsls	r6, r5, #24
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	d501      	bpl.n	800dc62 <_printf_i+0x1be>
 800dc5e:	6019      	str	r1, [r3, #0]
 800dc60:	e002      	b.n	800dc68 <_printf_i+0x1c4>
 800dc62:	0668      	lsls	r0, r5, #25
 800dc64:	d5fb      	bpl.n	800dc5e <_printf_i+0x1ba>
 800dc66:	8019      	strh	r1, [r3, #0]
 800dc68:	2300      	movs	r3, #0
 800dc6a:	6123      	str	r3, [r4, #16]
 800dc6c:	4616      	mov	r6, r2
 800dc6e:	e7bc      	b.n	800dbea <_printf_i+0x146>
 800dc70:	6833      	ldr	r3, [r6, #0]
 800dc72:	1d1a      	adds	r2, r3, #4
 800dc74:	6032      	str	r2, [r6, #0]
 800dc76:	681e      	ldr	r6, [r3, #0]
 800dc78:	6862      	ldr	r2, [r4, #4]
 800dc7a:	2100      	movs	r1, #0
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	f7f2 fad7 	bl	8000230 <memchr>
 800dc82:	b108      	cbz	r0, 800dc88 <_printf_i+0x1e4>
 800dc84:	1b80      	subs	r0, r0, r6
 800dc86:	6060      	str	r0, [r4, #4]
 800dc88:	6863      	ldr	r3, [r4, #4]
 800dc8a:	6123      	str	r3, [r4, #16]
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc92:	e7aa      	b.n	800dbea <_printf_i+0x146>
 800dc94:	6923      	ldr	r3, [r4, #16]
 800dc96:	4632      	mov	r2, r6
 800dc98:	4649      	mov	r1, r9
 800dc9a:	4640      	mov	r0, r8
 800dc9c:	47d0      	blx	sl
 800dc9e:	3001      	adds	r0, #1
 800dca0:	d0ad      	beq.n	800dbfe <_printf_i+0x15a>
 800dca2:	6823      	ldr	r3, [r4, #0]
 800dca4:	079b      	lsls	r3, r3, #30
 800dca6:	d413      	bmi.n	800dcd0 <_printf_i+0x22c>
 800dca8:	68e0      	ldr	r0, [r4, #12]
 800dcaa:	9b03      	ldr	r3, [sp, #12]
 800dcac:	4298      	cmp	r0, r3
 800dcae:	bfb8      	it	lt
 800dcb0:	4618      	movlt	r0, r3
 800dcb2:	e7a6      	b.n	800dc02 <_printf_i+0x15e>
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	4632      	mov	r2, r6
 800dcb8:	4649      	mov	r1, r9
 800dcba:	4640      	mov	r0, r8
 800dcbc:	47d0      	blx	sl
 800dcbe:	3001      	adds	r0, #1
 800dcc0:	d09d      	beq.n	800dbfe <_printf_i+0x15a>
 800dcc2:	3501      	adds	r5, #1
 800dcc4:	68e3      	ldr	r3, [r4, #12]
 800dcc6:	9903      	ldr	r1, [sp, #12]
 800dcc8:	1a5b      	subs	r3, r3, r1
 800dcca:	42ab      	cmp	r3, r5
 800dccc:	dcf2      	bgt.n	800dcb4 <_printf_i+0x210>
 800dcce:	e7eb      	b.n	800dca8 <_printf_i+0x204>
 800dcd0:	2500      	movs	r5, #0
 800dcd2:	f104 0619 	add.w	r6, r4, #25
 800dcd6:	e7f5      	b.n	800dcc4 <_printf_i+0x220>
 800dcd8:	0800df4d 	.word	0x0800df4d
 800dcdc:	0800df5e 	.word	0x0800df5e

0800dce0 <memmove>:
 800dce0:	4288      	cmp	r0, r1
 800dce2:	b510      	push	{r4, lr}
 800dce4:	eb01 0402 	add.w	r4, r1, r2
 800dce8:	d902      	bls.n	800dcf0 <memmove+0x10>
 800dcea:	4284      	cmp	r4, r0
 800dcec:	4623      	mov	r3, r4
 800dcee:	d807      	bhi.n	800dd00 <memmove+0x20>
 800dcf0:	1e43      	subs	r3, r0, #1
 800dcf2:	42a1      	cmp	r1, r4
 800dcf4:	d008      	beq.n	800dd08 <memmove+0x28>
 800dcf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dcfe:	e7f8      	b.n	800dcf2 <memmove+0x12>
 800dd00:	4402      	add	r2, r0
 800dd02:	4601      	mov	r1, r0
 800dd04:	428a      	cmp	r2, r1
 800dd06:	d100      	bne.n	800dd0a <memmove+0x2a>
 800dd08:	bd10      	pop	{r4, pc}
 800dd0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd12:	e7f7      	b.n	800dd04 <memmove+0x24>

0800dd14 <_sbrk_r>:
 800dd14:	b538      	push	{r3, r4, r5, lr}
 800dd16:	4d06      	ldr	r5, [pc, #24]	@ (800dd30 <_sbrk_r+0x1c>)
 800dd18:	2300      	movs	r3, #0
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	4608      	mov	r0, r1
 800dd1e:	602b      	str	r3, [r5, #0]
 800dd20:	f7f4 f9c0 	bl	80020a4 <_sbrk>
 800dd24:	1c43      	adds	r3, r0, #1
 800dd26:	d102      	bne.n	800dd2e <_sbrk_r+0x1a>
 800dd28:	682b      	ldr	r3, [r5, #0]
 800dd2a:	b103      	cbz	r3, 800dd2e <_sbrk_r+0x1a>
 800dd2c:	6023      	str	r3, [r4, #0]
 800dd2e:	bd38      	pop	{r3, r4, r5, pc}
 800dd30:	20005094 	.word	0x20005094

0800dd34 <_realloc_r>:
 800dd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd38:	4607      	mov	r7, r0
 800dd3a:	4614      	mov	r4, r2
 800dd3c:	460d      	mov	r5, r1
 800dd3e:	b921      	cbnz	r1, 800dd4a <_realloc_r+0x16>
 800dd40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd44:	4611      	mov	r1, r2
 800dd46:	f7ff bc5b 	b.w	800d600 <_malloc_r>
 800dd4a:	b92a      	cbnz	r2, 800dd58 <_realloc_r+0x24>
 800dd4c:	f7ff fbec 	bl	800d528 <_free_r>
 800dd50:	4625      	mov	r5, r4
 800dd52:	4628      	mov	r0, r5
 800dd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd58:	f000 f81a 	bl	800dd90 <_malloc_usable_size_r>
 800dd5c:	4284      	cmp	r4, r0
 800dd5e:	4606      	mov	r6, r0
 800dd60:	d802      	bhi.n	800dd68 <_realloc_r+0x34>
 800dd62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dd66:	d8f4      	bhi.n	800dd52 <_realloc_r+0x1e>
 800dd68:	4621      	mov	r1, r4
 800dd6a:	4638      	mov	r0, r7
 800dd6c:	f7ff fc48 	bl	800d600 <_malloc_r>
 800dd70:	4680      	mov	r8, r0
 800dd72:	b908      	cbnz	r0, 800dd78 <_realloc_r+0x44>
 800dd74:	4645      	mov	r5, r8
 800dd76:	e7ec      	b.n	800dd52 <_realloc_r+0x1e>
 800dd78:	42b4      	cmp	r4, r6
 800dd7a:	4622      	mov	r2, r4
 800dd7c:	4629      	mov	r1, r5
 800dd7e:	bf28      	it	cs
 800dd80:	4632      	movcs	r2, r6
 800dd82:	f7ff fbc3 	bl	800d50c <memcpy>
 800dd86:	4629      	mov	r1, r5
 800dd88:	4638      	mov	r0, r7
 800dd8a:	f7ff fbcd 	bl	800d528 <_free_r>
 800dd8e:	e7f1      	b.n	800dd74 <_realloc_r+0x40>

0800dd90 <_malloc_usable_size_r>:
 800dd90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd94:	1f18      	subs	r0, r3, #4
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	bfbc      	itt	lt
 800dd9a:	580b      	ldrlt	r3, [r1, r0]
 800dd9c:	18c0      	addlt	r0, r0, r3
 800dd9e:	4770      	bx	lr

0800dda0 <_init>:
 800dda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dda2:	bf00      	nop
 800dda4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dda6:	bc08      	pop	{r3}
 800dda8:	469e      	mov	lr, r3
 800ddaa:	4770      	bx	lr

0800ddac <_fini>:
 800ddac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddae:	bf00      	nop
 800ddb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddb2:	bc08      	pop	{r3}
 800ddb4:	469e      	mov	lr, r3
 800ddb6:	4770      	bx	lr
