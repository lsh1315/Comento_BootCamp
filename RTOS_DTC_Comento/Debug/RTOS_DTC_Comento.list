
RTOS_DTC_Comento.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca14  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800cbf4  0800cbf4  0000dbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd54  0800cd54  0000e010  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd54  0800cd54  0000dd54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd5c  0800cd5c  0000e010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd5c  0800cd5c  0000dd5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd60  0800cd60  0000dd60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800cd64  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ec8  20000010  0800cd74  0000e010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ed8  0800cd74  0000eed8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7a6  00000000  00000000  0000e040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fa6  00000000  00000000  0002a7e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c0  00000000  00000000  0002e790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001276  00000000  00000000  0002ff50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ca1  00000000  00000000  000311c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c4a9  00000000  00000000  00054e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e258f  00000000  00000000  00071310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015389f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006388  00000000  00000000  001538e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00159c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cbdc 	.word	0x0800cbdc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	0800cbdc 	.word	0x0800cbdc

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <CAN_Manager_Init>:
#include "can_manager.h"

static CAN_TxHeaderTypeDef tx_header;

HAL_StatusTypeDef CAN_Manager_Init(CAN_HandleTypeDef* hcan)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    tx_header.ExtId = CAN_DTC_TRANSMIT_ID;
 8000554:	4b12      	ldr	r3, [pc, #72]	@ (80005a0 <CAN_Manager_Init+0x54>)
 8000556:	4a13      	ldr	r2, [pc, #76]	@ (80005a4 <CAN_Manager_Init+0x58>)
 8000558:	605a      	str	r2, [r3, #4]
    tx_header.IDE = CAN_ID_EXT;
 800055a:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <CAN_Manager_Init+0x54>)
 800055c:	2204      	movs	r2, #4
 800055e:	609a      	str	r2, [r3, #8]
    tx_header.RTR = CAN_RTR_DATA;
 8000560:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <CAN_Manager_Init+0x54>)
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
    tx_header.DLC = 8; // Default DLC, will be updated in transmit function
 8000566:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <CAN_Manager_Init+0x54>)
 8000568:	2208      	movs	r2, #8
 800056a:	611a      	str	r2, [r3, #16]
    tx_header.TransmitGlobalTime = DISABLE;
 800056c:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <CAN_Manager_Init+0x54>)
 800056e:	2200      	movs	r2, #0
 8000570:	751a      	strb	r2, [r3, #20]

    // Activate CAN peripheral
    if (HAL_CAN_Start(hcan) != HAL_OK) {
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f002 f825 	bl	80025c2 <HAL_CAN_Start>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <CAN_Manager_Init+0x36>
        return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e009      	b.n	8000596 <CAN_Manager_Init+0x4a>
    }

    // Activate notifications
    if (HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 8000582:	2101      	movs	r1, #1
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f002 f970 	bl	800286a <HAL_CAN_ActivateNotification>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <CAN_Manager_Init+0x48>
        return HAL_ERROR;
 8000590:	2301      	movs	r3, #1
 8000592:	e000      	b.n	8000596 <CAN_Manager_Init+0x4a>
    }

    return HAL_OK;
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	2000002c 	.word	0x2000002c
 80005a4:	18ff50e5 	.word	0x18ff50e5

080005a8 <CAN_Manager_Transmit_DTC>:

HAL_StatusTypeDef CAN_Manager_Transmit_DTC(CAN_HandleTypeDef* hcan, uint8_t* dtc_data, uint16_t size)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	@ 0x28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	4613      	mov	r3, r2
 80005b4:	80fb      	strh	r3, [r7, #6]
    uint32_t tx_mailbox;
    uint16_t sent_bytes = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    while (sent_bytes < size) {
 80005ba:	e041      	b.n	8000640 <CAN_Manager_Transmit_DTC+0x98>
        uint8_t tx_data[8] = {0};
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
        uint8_t bytes_to_send = (size - sent_bytes >= 8) ? 8 : (size - sent_bytes);
 80005c6:	88fa      	ldrh	r2, [r7, #6]
 80005c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80005ca:	1ad3      	subs	r3, r2, r3
 80005cc:	2b08      	cmp	r3, #8
 80005ce:	bfa8      	it	ge
 80005d0:	2308      	movge	r3, #8
 80005d2:	77fb      	strb	r3, [r7, #31]

        for (int i = 0; i < bytes_to_send; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	623b      	str	r3, [r7, #32]
 80005d8:	e00f      	b.n	80005fa <CAN_Manager_Transmit_DTC+0x52>
            tx_data[i] = dtc_data[sent_bytes + i];
 80005da:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80005dc:	6a3b      	ldr	r3, [r7, #32]
 80005de:	4413      	add	r3, r2
 80005e0:	461a      	mov	r2, r3
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	4413      	add	r3, r2
 80005e6:	7819      	ldrb	r1, [r3, #0]
 80005e8:	f107 0210 	add.w	r2, r7, #16
 80005ec:	6a3b      	ldr	r3, [r7, #32]
 80005ee:	4413      	add	r3, r2
 80005f0:	460a      	mov	r2, r1
 80005f2:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < bytes_to_send; i++) {
 80005f4:	6a3b      	ldr	r3, [r7, #32]
 80005f6:	3301      	adds	r3, #1
 80005f8:	623b      	str	r3, [r7, #32]
 80005fa:	7ffb      	ldrb	r3, [r7, #31]
 80005fc:	6a3a      	ldr	r2, [r7, #32]
 80005fe:	429a      	cmp	r2, r3
 8000600:	dbeb      	blt.n	80005da <CAN_Manager_Transmit_DTC+0x32>
        }

        tx_header.DLC = bytes_to_send;
 8000602:	7ffb      	ldrb	r3, [r7, #31]
 8000604:	4a13      	ldr	r2, [pc, #76]	@ (8000654 <CAN_Manager_Transmit_DTC+0xac>)
 8000606:	6113      	str	r3, [r2, #16]

        // Wait for a free mailbox
        while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0);
 8000608:	bf00      	nop
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	f002 f8f8 	bl	8002800 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0f9      	beq.n	800060a <CAN_Manager_Transmit_DTC+0x62>

        if (HAL_CAN_AddTxMessage(hcan, &tx_header, tx_data, &tx_mailbox) != HAL_OK) {
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	f107 0210 	add.w	r2, r7, #16
 800061e:	490d      	ldr	r1, [pc, #52]	@ (8000654 <CAN_Manager_Transmit_DTC+0xac>)
 8000620:	68f8      	ldr	r0, [r7, #12]
 8000622:	f002 f812 	bl	800264a <HAL_CAN_AddTxMessage>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <CAN_Manager_Transmit_DTC+0x88>
            return HAL_ERROR;
 800062c:	2301      	movs	r3, #1
 800062e:	e00c      	b.n	800064a <CAN_Manager_Transmit_DTC+0xa2>
        }

        sent_bytes += bytes_to_send;
 8000630:	7ffb      	ldrb	r3, [r7, #31]
 8000632:	b29a      	uxth	r2, r3
 8000634:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000636:	4413      	add	r3, r2
 8000638:	84fb      	strh	r3, [r7, #38]	@ 0x26

        // A small delay might be necessary depending on bus load
        HAL_Delay(1);
 800063a:	2001      	movs	r0, #1
 800063c:	f001 fc30 	bl	8001ea0 <HAL_Delay>
    while (sent_bytes < size) {
 8000640:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	429a      	cmp	r2, r3
 8000646:	d3b9      	bcc.n	80005bc <CAN_Manager_Transmit_DTC+0x14>
    }

    return HAL_OK;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3728      	adds	r7, #40	@ 0x28
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000002c 	.word	0x2000002c

08000658 <DTC_Set>:
/**
 * @brief Sets a specific DTC to indicate a fault has occurred.
 * @param code The DTC to set.
 */
void DTC_Set(DTC_Code_t code)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
    if (code < DTC_CODE_COUNT) {
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b03      	cmp	r3, #3
 8000666:	d80a      	bhi.n	800067e <DTC_Set+0x26>
        uint32_t old_bitmask = dtc_status_bitmask;
 8000668:	4b08      	ldr	r3, [pc, #32]	@ (800068c <DTC_Set+0x34>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	60fb      	str	r3, [r7, #12]
        dtc_status_bitmask |= (1UL << code);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2201      	movs	r2, #1
 8000672:	409a      	lsls	r2, r3
 8000674:	4b05      	ldr	r3, [pc, #20]	@ (800068c <DTC_Set+0x34>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4313      	orrs	r3, r2
 800067a:	4a04      	ldr	r2, [pc, #16]	@ (800068c <DTC_Set+0x34>)
 800067c:	6013      	str	r3, [r2, #0]
        // If the status has changed, save it to non-volatile memory.
        if (old_bitmask != dtc_status_bitmask) {
            // Example: EEPROM_Write(DTC_STATUS_ADDRESS, dtc_status_bitmask);
        }
    }
}
 800067e:	bf00      	nop
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000044 	.word	0x20000044

08000690 <DTC_Clear>:
/**
 * @brief Clears a specific DTC, indicating a fault is resolved.
 * @param code The DTC to clear.
 */
void DTC_Clear(DTC_Code_t code)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
    if (code < DTC_CODE_COUNT) {
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b03      	cmp	r3, #3
 800069e:	d80c      	bhi.n	80006ba <DTC_Clear+0x2a>
        uint32_t old_bitmask = dtc_status_bitmask;
 80006a0:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <DTC_Clear+0x38>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	60fb      	str	r3, [r7, #12]
        dtc_status_bitmask &= ~(1UL << code);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2201      	movs	r2, #1
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	43da      	mvns	r2, r3
 80006b0:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <DTC_Clear+0x38>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4013      	ands	r3, r2
 80006b6:	4a04      	ldr	r2, [pc, #16]	@ (80006c8 <DTC_Clear+0x38>)
 80006b8:	6013      	str	r3, [r2, #0]
        // If the status has changed, save it to non-volatile memory.
        if (old_bitmask != dtc_status_bitmask) {
            // Example: EEPROM_Write(DTC_STATUS_ADDRESS, dtc_status_bitmask);
        }
    }
}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20000044 	.word	0x20000044

080006cc <DTC_GetStatusBitmask>:
/**
 * @brief Gets the entire DTC status bitmask.
 * @return The 32-bit bitmask representing all DTC statuses.
 */
uint32_t DTC_GetStatusBitmask(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
    return dtc_status_bitmask;
 80006d0:	4b03      	ldr	r3, [pc, #12]	@ (80006e0 <DTC_GetStatusBitmask+0x14>)
 80006d2:	681b      	ldr	r3, [r3, #0]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	20000044 	.word	0x20000044

080006e4 <EEPROM_CS_Low>:

/**
 * @brief Pulls the Chip Select (CS) pin LOW.
 */
static void EEPROM_CS_Low(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(s_cs_port, s_cs_pin, GPIO_PIN_RESET);
 80006e8:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <EEPROM_CS_Low+0x18>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a04      	ldr	r2, [pc, #16]	@ (8000700 <EEPROM_CS_Low+0x1c>)
 80006ee:	8811      	ldrh	r1, [r2, #0]
 80006f0:	2200      	movs	r2, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 f9da 	bl	8003aac <HAL_GPIO_WritePin>
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000004c 	.word	0x2000004c
 8000700:	20000050 	.word	0x20000050

08000704 <EEPROM_CS_High>:

/**
 * @brief Pulls the Chip Select (CS) pin HIGH.
 */
static void EEPROM_CS_High(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(s_cs_port, s_cs_pin, GPIO_PIN_SET);
 8000708:	4b04      	ldr	r3, [pc, #16]	@ (800071c <EEPROM_CS_High+0x18>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a04      	ldr	r2, [pc, #16]	@ (8000720 <EEPROM_CS_High+0x1c>)
 800070e:	8811      	ldrh	r1, [r2, #0]
 8000710:	2201      	movs	r2, #1
 8000712:	4618      	mov	r0, r3
 8000714:	f003 f9ca 	bl	8003aac <HAL_GPIO_WritePin>
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000004c 	.word	0x2000004c
 8000720:	20000050 	.word	0x20000050

08000724 <EEPROM_WriteEnable>:

/**
 * @brief Sends the Write Enable (WREN) command to the EEPROM.
 */
static void EEPROM_WriteEnable(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
    uint8_t cmd = EEPROM_CMD_WREN;
 800072a:	2306      	movs	r3, #6
 800072c:	71fb      	strb	r3, [r7, #7]
    EEPROM_CS_Low();
 800072e:	f7ff ffd9 	bl	80006e4 <EEPROM_CS_Low>
    HAL_SPI_Transmit(s_hspi, &cmd, 1, HAL_MAX_DELAY);
 8000732:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <EEPROM_WriteEnable+0x2c>)
 8000734:	6818      	ldr	r0, [r3, #0]
 8000736:	1df9      	adds	r1, r7, #7
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	2201      	movs	r2, #1
 800073e:	f006 fb82 	bl	8006e46 <HAL_SPI_Transmit>
    EEPROM_CS_High();
 8000742:	f7ff ffdf 	bl	8000704 <EEPROM_CS_High>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000048 	.word	0x20000048

08000754 <EEPROM_WaitForWriteComplete>:

/**
 * @brief Polls the EEPROM's status register until the Write-In-Progress (WIP) bit is cleared.
 */
static void EEPROM_WaitForWriteComplete(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
    uint8_t cmd = EEPROM_CMD_RDSR;
 800075a:	2305      	movs	r3, #5
 800075c:	71fb      	strb	r3, [r7, #7]
    uint8_t status = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	71bb      	strb	r3, [r7, #6]

    EEPROM_CS_Low();
 8000762:	f7ff ffbf 	bl	80006e4 <EEPROM_CS_Low>
    HAL_SPI_Transmit(s_hspi, &cmd, 1, HAL_MAX_DELAY);
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <EEPROM_WaitForWriteComplete+0x48>)
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	1df9      	adds	r1, r7, #7
 800076c:	f04f 33ff 	mov.w	r3, #4294967295
 8000770:	2201      	movs	r2, #1
 8000772:	f006 fb68 	bl	8006e46 <HAL_SPI_Transmit>
    do {
        HAL_SPI_Receive(s_hspi, &status, 1, HAL_MAX_DELAY);
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <EEPROM_WaitForWriteComplete+0x48>)
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	1db9      	adds	r1, r7, #6
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
 8000780:	2201      	movs	r2, #1
 8000782:	f006 fc9c 	bl	80070be <HAL_SPI_Receive>
    } while (status & EEPROM_WIP_BIT);
 8000786:	79bb      	ldrb	r3, [r7, #6]
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	2b00      	cmp	r3, #0
 800078e:	d1f2      	bne.n	8000776 <EEPROM_WaitForWriteComplete+0x22>
    EEPROM_CS_High();
 8000790:	f7ff ffb8 	bl	8000704 <EEPROM_CS_High>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000048 	.word	0x20000048

080007a0 <EEPROM_Init>:

// --- Public API Functions ---

void EEPROM_Init(SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	4613      	mov	r3, r2
 80007ac:	80fb      	strh	r3, [r7, #6]
    s_hspi = hspi;
 80007ae:	4a07      	ldr	r2, [pc, #28]	@ (80007cc <EEPROM_Init+0x2c>)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	6013      	str	r3, [r2, #0]
    s_cs_port = cs_port;
 80007b4:	4a06      	ldr	r2, [pc, #24]	@ (80007d0 <EEPROM_Init+0x30>)
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	6013      	str	r3, [r2, #0]
    s_cs_pin = cs_pin;
 80007ba:	4a06      	ldr	r2, [pc, #24]	@ (80007d4 <EEPROM_Init+0x34>)
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	8013      	strh	r3, [r2, #0]

    // Ensure CS is high initially
    EEPROM_CS_High();
 80007c0:	f7ff ffa0 	bl	8000704 <EEPROM_CS_High>
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000048 	.word	0x20000048
 80007d0:	2000004c 	.word	0x2000004c
 80007d4:	20000050 	.word	0x20000050

080007d8 <EEPROM_Read_DMA>:

HAL_StatusTypeDef EEPROM_Read_DMA(uint16_t address, uint8_t* p_data, uint16_t size)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	80fb      	strh	r3, [r7, #6]
 80007e4:	4613      	mov	r3, r2
 80007e6:	80bb      	strh	r3, [r7, #4]
    uint8_t header[3];
    header[0] = EEPROM_CMD_READ;
 80007e8:	2303      	movs	r3, #3
 80007ea:	733b      	strb	r3, [r7, #12]
    header[1] = (address >> 8) & 0xFF; // MSB
 80007ec:	88fb      	ldrh	r3, [r7, #6]
 80007ee:	0a1b      	lsrs	r3, r3, #8
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	737b      	strb	r3, [r7, #13]
    header[2] = address & 0xFF;        // LSB
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	73bb      	strb	r3, [r7, #14]

    spi_dma_rx_complete = 0;
 80007fc:	4b17      	ldr	r3, [pc, #92]	@ (800085c <EEPROM_Read_DMA+0x84>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]

    EEPROM_CS_Low();
 8000802:	f7ff ff6f 	bl	80006e4 <EEPROM_CS_Low>
    // Send Read command and address
    if (HAL_SPI_Transmit(s_hspi, header, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000806:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <EEPROM_Read_DMA+0x88>)
 8000808:	6818      	ldr	r0, [r3, #0]
 800080a:	f107 010c 	add.w	r1, r7, #12
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
 8000812:	2203      	movs	r2, #3
 8000814:	f006 fb17 	bl	8006e46 <HAL_SPI_Transmit>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d003      	beq.n	8000826 <EEPROM_Read_DMA+0x4e>
        EEPROM_CS_High();
 800081e:	f7ff ff71 	bl	8000704 <EEPROM_CS_High>
        return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e016      	b.n	8000854 <EEPROM_Read_DMA+0x7c>
    }

    // Receive data using DMA
    if (HAL_SPI_Receive_DMA(s_hspi, p_data, size) != HAL_OK) {
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <EEPROM_Read_DMA+0x88>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	88ba      	ldrh	r2, [r7, #4]
 800082c:	6839      	ldr	r1, [r7, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	f006 ffae 	bl	8007790 <HAL_SPI_Receive_DMA>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d003      	beq.n	8000842 <EEPROM_Read_DMA+0x6a>
        EEPROM_CS_High();
 800083a:	f7ff ff63 	bl	8000704 <EEPROM_CS_High>
        return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e008      	b.n	8000854 <EEPROM_Read_DMA+0x7c>
    }

    // Wait for DMA transfer to complete
    while (spi_dma_rx_complete == 0) {
 8000842:	bf00      	nop
 8000844:	4b05      	ldr	r3, [pc, #20]	@ (800085c <EEPROM_Read_DMA+0x84>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d0fa      	beq.n	8000844 <EEPROM_Read_DMA+0x6c>
        // You can add a timeout mechanism here if needed
    }

    EEPROM_CS_High();
 800084e:	f7ff ff59 	bl	8000704 <EEPROM_CS_High>
    return HAL_OK;
 8000852:	2300      	movs	r3, #0
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000053 	.word	0x20000053
 8000860:	20000048 	.word	0x20000048

08000864 <EEPROM_Write_DMA>:

HAL_StatusTypeDef EEPROM_Write_DMA(uint16_t address, uint8_t* p_data, uint16_t size)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	80fb      	strh	r3, [r7, #6]
 8000870:	4613      	mov	r3, r2
 8000872:	80bb      	strh	r3, [r7, #4]
    uint8_t header[3];
    uint16_t bytes_to_write;

    while (size > 0) {
 8000874:	e052      	b.n	800091c <EEPROM_Write_DMA+0xb8>
        EEPROM_WriteEnable();
 8000876:	f7ff ff55 	bl	8000724 <EEPROM_WriteEnable>

        uint16_t page_offset = address % EEPROM_PAGE_SIZE;
 800087a:	88fb      	ldrh	r3, [r7, #6]
 800087c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000880:	82fb      	strh	r3, [r7, #22]
        uint16_t bytes_left_in_page = EEPROM_PAGE_SIZE - page_offset;
 8000882:	8afb      	ldrh	r3, [r7, #22]
 8000884:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000888:	82bb      	strh	r3, [r7, #20]
        bytes_to_write = (size > bytes_left_in_page) ? bytes_left_in_page : size;
 800088a:	88ba      	ldrh	r2, [r7, #4]
 800088c:	8abb      	ldrh	r3, [r7, #20]
 800088e:	4293      	cmp	r3, r2
 8000890:	bf28      	it	cs
 8000892:	4613      	movcs	r3, r2
 8000894:	827b      	strh	r3, [r7, #18]

        header[0] = EEPROM_CMD_WRITE;
 8000896:	2302      	movs	r3, #2
 8000898:	733b      	strb	r3, [r7, #12]
        header[1] = (address >> 8) & 0xFF; // MSB
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	b29b      	uxth	r3, r3
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	737b      	strb	r3, [r7, #13]
        header[2] = address & 0xFF;        // LSB
 80008a4:	88fb      	ldrh	r3, [r7, #6]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	73bb      	strb	r3, [r7, #14]

        spi_dma_tx_complete = 0;
 80008aa:	4b20      	ldr	r3, [pc, #128]	@ (800092c <EEPROM_Write_DMA+0xc8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]

        EEPROM_CS_Low();
 80008b0:	f7ff ff18 	bl	80006e4 <EEPROM_CS_Low>

        // Send Write command and address
        if (HAL_SPI_Transmit(s_hspi, header, 3, HAL_MAX_DELAY) != HAL_OK) {
 80008b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000930 <EEPROM_Write_DMA+0xcc>)
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	f107 010c 	add.w	r1, r7, #12
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295
 80008c0:	2203      	movs	r2, #3
 80008c2:	f006 fac0 	bl	8006e46 <HAL_SPI_Transmit>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d003      	beq.n	80008d4 <EEPROM_Write_DMA+0x70>
            EEPROM_CS_High();
 80008cc:	f7ff ff1a 	bl	8000704 <EEPROM_CS_High>
            return HAL_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	e027      	b.n	8000924 <EEPROM_Write_DMA+0xc0>
        }

        // Transmit data using DMA
        if (HAL_SPI_Transmit_DMA(s_hspi, p_data, bytes_to_write) != HAL_OK) {
 80008d4:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <EEPROM_Write_DMA+0xcc>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	8a7a      	ldrh	r2, [r7, #18]
 80008da:	6839      	ldr	r1, [r7, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f006 fea1 	bl	8007624 <HAL_SPI_Transmit_DMA>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d003      	beq.n	80008f0 <EEPROM_Write_DMA+0x8c>
            EEPROM_CS_High();
 80008e8:	f7ff ff0c 	bl	8000704 <EEPROM_CS_High>
            return HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e019      	b.n	8000924 <EEPROM_Write_DMA+0xc0>
        }

        // Wait for DMA transfer to complete
        while (spi_dma_tx_complete == 0) {
 80008f0:	bf00      	nop
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <EEPROM_Write_DMA+0xc8>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d0fa      	beq.n	80008f2 <EEPROM_Write_DMA+0x8e>
            // You can add a timeout mechanism here if needed
        }

        EEPROM_CS_High();
 80008fc:	f7ff ff02 	bl	8000704 <EEPROM_CS_High>

        // Wait for the internal write cycle of the EEPROM to finish
        EEPROM_WaitForWriteComplete();
 8000900:	f7ff ff28 	bl	8000754 <EEPROM_WaitForWriteComplete>

        address += bytes_to_write;
 8000904:	88fa      	ldrh	r2, [r7, #6]
 8000906:	8a7b      	ldrh	r3, [r7, #18]
 8000908:	4413      	add	r3, r2
 800090a:	80fb      	strh	r3, [r7, #6]
        p_data += bytes_to_write;
 800090c:	8a7b      	ldrh	r3, [r7, #18]
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	4413      	add	r3, r2
 8000912:	603b      	str	r3, [r7, #0]
        size -= bytes_to_write;
 8000914:	88ba      	ldrh	r2, [r7, #4]
 8000916:	8a7b      	ldrh	r3, [r7, #18]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	80bb      	strh	r3, [r7, #4]
    while (size > 0) {
 800091c:	88bb      	ldrh	r3, [r7, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1a9      	bne.n	8000876 <EEPROM_Write_DMA+0x12>
    }

    return HAL_OK;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000052 	.word	0x20000052
 8000930:	20000048 	.word	0x20000048

08000934 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == s_hspi->Instance) {
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <HAL_SPI_TxCpltCallback+0x28>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	429a      	cmp	r2, r3
 8000948:	d102      	bne.n	8000950 <HAL_SPI_TxCpltCallback+0x1c>
        spi_dma_tx_complete = 1;
 800094a:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_SPI_TxCpltCallback+0x2c>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
    }
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	20000048 	.word	0x20000048
 8000960:	20000052 	.word	0x20000052

08000964 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == s_hspi->Instance) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_SPI_RxCpltCallback+0x28>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	429a      	cmp	r2, r3
 8000978:	d102      	bne.n	8000980 <HAL_SPI_RxCpltCallback+0x1c>
        spi_dma_rx_complete = 1;
 800097a:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <HAL_SPI_RxCpltCallback+0x2c>)
 800097c:	2201      	movs	r2, #1
 800097e:	701a      	strb	r2, [r3, #0]
    }
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	20000048 	.word	0x20000048
 8000990:	20000053 	.word	0x20000053

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000998:	f001 fa10 	bl	8001dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099c:	f000 f884 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a0:	f000 fabe 	bl	8000f20 <MX_GPIO_Init>
  MX_DMA_Init();
 80009a4:	f000 fa56 	bl	8000e54 <MX_DMA_Init>
  MX_ADC1_Init();
 80009a8:	f000 f8dc 	bl	8000b64 <MX_ADC1_Init>
  MX_CAN1_Init();
 80009ac:	f000 f92c 	bl	8000c08 <MX_CAN1_Init>
  MX_I2C1_Init();
 80009b0:	f000 f95e 	bl	8000c70 <MX_I2C1_Init>
  MX_I2C2_Init();
 80009b4:	f000 f98a 	bl	8000ccc <MX_I2C2_Init>
  MX_SPI1_Init();
 80009b8:	f000 f9b6 	bl	8000d28 <MX_SPI1_Init>
  MX_SPI2_Init();
 80009bc:	f000 f9ea 	bl	8000d94 <MX_SPI2_Init>
  MX_UART4_Init();
 80009c0:	f000 fa1e 	bl	8000e00 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  mp5475gu_init();
 80009c4:	f000 fc0c 	bl	80011e0 <mp5475gu_init>
  EEPROM_Init(&hspi1, GPIOC, GPIO_PIN_4);
 80009c8:	2210      	movs	r2, #16
 80009ca:	4921      	ldr	r1, [pc, #132]	@ (8000a50 <main+0xbc>)
 80009cc:	4821      	ldr	r0, [pc, #132]	@ (8000a54 <main+0xc0>)
 80009ce:	f7ff fee7 	bl	80007a0 <EEPROM_Init>
  CAN_Manager_Init(&hcan1);
 80009d2:	4821      	ldr	r0, [pc, #132]	@ (8000a58 <main+0xc4>)
 80009d4:	f7ff fdba 	bl	800054c <CAN_Manager_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009d8:	f008 fbac 	bl	8009134 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of CommMutexHandle */
  CommMutexHandleHandle = osMutexNew(&CommMutexHandle_attributes);
 80009dc:	481f      	ldr	r0, [pc, #124]	@ (8000a5c <main+0xc8>)
 80009de:	f008 fca0 	bl	8009322 <osMutexNew>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000a60 <main+0xcc>)
 80009e6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CanQueue */
  CanQueueHandle = osMessageQueueNew (8, 8, &CanQueue_attributes);
 80009e8:	4a1e      	ldr	r2, [pc, #120]	@ (8000a64 <main+0xd0>)
 80009ea:	2108      	movs	r1, #8
 80009ec:	2008      	movs	r0, #8
 80009ee:	f008 fec5 	bl	800977c <osMessageQueueNew>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000a68 <main+0xd4>)
 80009f6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009f8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a6c <main+0xd8>)
 80009fa:	2100      	movs	r1, #0
 80009fc:	481c      	ldr	r0, [pc, #112]	@ (8000a70 <main+0xdc>)
 80009fe:	f008 fbe3 	bl	80091c8 <osThreadNew>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4a1b      	ldr	r2, [pc, #108]	@ (8000a74 <main+0xe0>)
 8000a06:	6013      	str	r3, [r2, #0]

  /* creation of I2CTask */
  I2CTaskHandle = osThreadNew(StartI2CTask, NULL, &I2CTask_attributes);
 8000a08:	4a1b      	ldr	r2, [pc, #108]	@ (8000a78 <main+0xe4>)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	481b      	ldr	r0, [pc, #108]	@ (8000a7c <main+0xe8>)
 8000a0e:	f008 fbdb 	bl	80091c8 <osThreadNew>
 8000a12:	4603      	mov	r3, r0
 8000a14:	4a1a      	ldr	r2, [pc, #104]	@ (8000a80 <main+0xec>)
 8000a16:	6013      	str	r3, [r2, #0]

  /* creation of SPITask */
  SPITaskHandle = osThreadNew(StartSPITask, NULL, &SPITask_attributes);
 8000a18:	4a1a      	ldr	r2, [pc, #104]	@ (8000a84 <main+0xf0>)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	481a      	ldr	r0, [pc, #104]	@ (8000a88 <main+0xf4>)
 8000a1e:	f008 fbd3 	bl	80091c8 <osThreadNew>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4a19      	ldr	r2, [pc, #100]	@ (8000a8c <main+0xf8>)
 8000a26:	6013      	str	r3, [r2, #0]

  /* creation of CANTask */
  CANTaskHandle = osThreadNew(StartCANTask, NULL, &CANTask_attributes);
 8000a28:	4a19      	ldr	r2, [pc, #100]	@ (8000a90 <main+0xfc>)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4819      	ldr	r0, [pc, #100]	@ (8000a94 <main+0x100>)
 8000a2e:	f008 fbcb 	bl	80091c8 <osThreadNew>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a18      	ldr	r2, [pc, #96]	@ (8000a98 <main+0x104>)
 8000a36:	6013      	str	r3, [r2, #0]

  /* creation of UARTTask */
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 8000a38:	4a18      	ldr	r2, [pc, #96]	@ (8000a9c <main+0x108>)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4818      	ldr	r0, [pc, #96]	@ (8000aa0 <main+0x10c>)
 8000a3e:	f008 fbc3 	bl	80091c8 <osThreadNew>
 8000a42:	4603      	mov	r3, r0
 8000a44:	4a17      	ldr	r2, [pc, #92]	@ (8000aa4 <main+0x110>)
 8000a46:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a48:	f008 fb98 	bl	800917c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <main+0xb8>
 8000a50:	40020800 	.word	0x40020800
 8000a54:	200002ec 	.word	0x200002ec
 8000a58:	2000009c 	.word	0x2000009c
 8000a5c:	0800cd24 	.word	0x0800cd24
 8000a60:	20000578 	.word	0x20000578
 8000a64:	0800cd0c 	.word	0x0800cd0c
 8000a68:	20000574 	.word	0x20000574
 8000a6c:	0800cc58 	.word	0x0800cc58
 8000a70:	08001015 	.word	0x08001015
 8000a74:	20000560 	.word	0x20000560
 8000a78:	0800cc7c 	.word	0x0800cc7c
 8000a7c:	08001025 	.word	0x08001025
 8000a80:	20000564 	.word	0x20000564
 8000a84:	0800cca0 	.word	0x0800cca0
 8000a88:	080010f1 	.word	0x080010f1
 8000a8c:	20000568 	.word	0x20000568
 8000a90:	0800ccc4 	.word	0x0800ccc4
 8000a94:	08001141 	.word	0x08001141
 8000a98:	2000056c 	.word	0x2000056c
 8000a9c:	0800cce8 	.word	0x0800cce8
 8000aa0:	080011a1 	.word	0x080011a1
 8000aa4:	20000570 	.word	0x20000570

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b094      	sub	sp, #80	@ 0x50
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	2234      	movs	r2, #52	@ 0x34
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f00c f856 	bl	800cb68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	4b22      	ldr	r3, [pc, #136]	@ (8000b5c <SystemClock_Config+0xb4>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad4:	4a21      	ldr	r2, [pc, #132]	@ (8000b5c <SystemClock_Config+0xb4>)
 8000ad6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ada:	6413      	str	r3, [r2, #64]	@ 0x40
 8000adc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b5c <SystemClock_Config+0xb4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae8:	2300      	movs	r3, #0
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <SystemClock_Config+0xb8>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b60 <SystemClock_Config+0xb8>)
 8000af2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <SystemClock_Config+0xb8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b04:	2302      	movs	r3, #2
 8000b06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f005 fe87 	bl	800682c <HAL_RCC_OscConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000b24:	f000 fb56 	bl	80011d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b28:	230f      	movs	r3, #15
 8000b2a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f005 fc92 	bl	800646c <HAL_RCC_ClockConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b4e:	f000 fb41 	bl	80011d4 <Error_Handler>
  }
}
 8000b52:	bf00      	nop
 8000b54:	3750      	adds	r7, #80	@ 0x50
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40007000 	.word	0x40007000

08000b64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b76:	4b21      	ldr	r3, [pc, #132]	@ (8000bfc <MX_ADC1_Init+0x98>)
 8000b78:	4a21      	ldr	r2, [pc, #132]	@ (8000c00 <MX_ADC1_Init+0x9c>)
 8000b7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <MX_ADC1_Init+0x98>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b82:	4b1e      	ldr	r3, [pc, #120]	@ (8000bfc <MX_ADC1_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b88:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <MX_ADC1_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bfc <MX_ADC1_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b94:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <MX_ADC1_Init+0x98>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <MX_ADC1_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <MX_ADC1_Init+0x98>)
 8000ba4:	4a17      	ldr	r2, [pc, #92]	@ (8000c04 <MX_ADC1_Init+0xa0>)
 8000ba6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <MX_ADC1_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bae:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <MX_ADC1_Init+0x98>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <MX_ADC1_Init+0x98>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <MX_ADC1_Init+0x98>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc2:	480e      	ldr	r0, [pc, #56]	@ (8000bfc <MX_ADC1_Init+0x98>)
 8000bc4:	f001 f990 	bl	8001ee8 <HAL_ADC_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bce:	f000 fb01 	bl	80011d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bde:	463b      	mov	r3, r7
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	@ (8000bfc <MX_ADC1_Init+0x98>)
 8000be4:	f001 f9c4 	bl	8001f70 <HAL_ADC_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000bee:	f000 faf1 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000054 	.word	0x20000054
 8000c00:	40012000 	.word	0x40012000
 8000c04:	0f000001 	.word	0x0f000001

08000c08 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c0c:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <MX_CAN1_Init+0x60>)
 8000c0e:	4a17      	ldr	r2, [pc, #92]	@ (8000c6c <MX_CAN1_Init+0x64>)
 8000c10:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000c12:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <MX_CAN1_Init+0x60>)
 8000c14:	2210      	movs	r2, #16
 8000c16:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c18:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <MX_CAN1_Init+0x60>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c1e:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <MX_CAN1_Init+0x60>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000c24:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <MX_CAN1_Init+0x60>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <MX_CAN1_Init+0x60>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c30:	4b0d      	ldr	r3, [pc, #52]	@ (8000c68 <MX_CAN1_Init+0x60>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <MX_CAN1_Init+0x60>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <MX_CAN1_Init+0x60>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <MX_CAN1_Init+0x60>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c48:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <MX_CAN1_Init+0x60>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <MX_CAN1_Init+0x60>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	@ (8000c68 <MX_CAN1_Init+0x60>)
 8000c56:	f001 fbb9 	bl	80023cc <HAL_CAN_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000c60:	f000 fab8 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	2000009c 	.word	0x2000009c
 8000c6c:	40006400 	.word	0x40006400

08000c70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000c76:	4a13      	ldr	r2, [pc, #76]	@ (8000cc4 <MX_I2C1_Init+0x54>)
 8000c78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000c7c:	4a12      	ldr	r2, [pc, #72]	@ (8000cc8 <MX_I2C1_Init+0x58>)
 8000c7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000c8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	@ (8000cc0 <MX_I2C1_Init+0x50>)
 8000cae:	f002 ff17 	bl	8003ae0 <HAL_I2C_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cb8:	f000 fa8c 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200000c4 	.word	0x200000c4
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	000186a0 	.word	0x000186a0

08000ccc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <MX_I2C2_Init+0x50>)
 8000cd2:	4a13      	ldr	r2, [pc, #76]	@ (8000d20 <MX_I2C2_Init+0x54>)
 8000cd4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <MX_I2C2_Init+0x50>)
 8000cd8:	4a12      	ldr	r2, [pc, #72]	@ (8000d24 <MX_I2C2_Init+0x58>)
 8000cda:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <MX_I2C2_Init+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <MX_I2C2_Init+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <MX_I2C2_Init+0x50>)
 8000cea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <MX_I2C2_Init+0x50>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <MX_I2C2_Init+0x50>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cfc:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <MX_I2C2_Init+0x50>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <MX_I2C2_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d08:	4804      	ldr	r0, [pc, #16]	@ (8000d1c <MX_I2C2_Init+0x50>)
 8000d0a:	f002 fee9 	bl	8003ae0 <HAL_I2C_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d14:	f000 fa5e 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000118 	.word	0x20000118
 8000d20:	40005800 	.word	0x40005800
 8000d24:	000186a0 	.word	0x000186a0

08000d28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d2c:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <MX_SPI1_Init+0x64>)
 8000d2e:	4a18      	ldr	r2, [pc, #96]	@ (8000d90 <MX_SPI1_Init+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d32:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <MX_SPI1_Init+0x64>)
 8000d34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <MX_SPI1_Init+0x64>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d40:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <MX_SPI1_Init+0x64>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d46:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_SPI1_Init+0x64>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <MX_SPI1_Init+0x64>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <MX_SPI1_Init+0x64>)
 8000d54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <MX_SPI1_Init+0x64>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <MX_SPI1_Init+0x64>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d66:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <MX_SPI1_Init+0x64>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d6c:	4b07      	ldr	r3, [pc, #28]	@ (8000d8c <MX_SPI1_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <MX_SPI1_Init+0x64>)
 8000d74:	220a      	movs	r2, #10
 8000d76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d78:	4804      	ldr	r0, [pc, #16]	@ (8000d8c <MX_SPI1_Init+0x64>)
 8000d7a:	f005 ffdb 	bl	8006d34 <HAL_SPI_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d84:	f000 fa26 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	200002ec 	.word	0x200002ec
 8000d90:	40013000 	.word	0x40013000

08000d94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d98:	4b17      	ldr	r3, [pc, #92]	@ (8000df8 <MX_SPI2_Init+0x64>)
 8000d9a:	4a18      	ldr	r2, [pc, #96]	@ (8000dfc <MX_SPI2_Init+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d9e:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <MX_SPI2_Init+0x64>)
 8000da0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000da4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000da6:	4b14      	ldr	r3, [pc, #80]	@ (8000df8 <MX_SPI2_Init+0x64>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <MX_SPI2_Init+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000db2:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <MX_SPI2_Init+0x64>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <MX_SPI2_Init+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <MX_SPI2_Init+0x64>)
 8000dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <MX_SPI2_Init+0x64>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <MX_SPI2_Init+0x64>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dd2:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <MX_SPI2_Init+0x64>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd8:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <MX_SPI2_Init+0x64>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000dde:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <MX_SPI2_Init+0x64>)
 8000de0:	220a      	movs	r2, #10
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000de4:	4804      	ldr	r0, [pc, #16]	@ (8000df8 <MX_SPI2_Init+0x64>)
 8000de6:	f005 ffa5 	bl	8006d34 <HAL_SPI_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000df0:	f000 f9f0 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000344 	.word	0x20000344
 8000dfc:	40003800 	.word	0x40003800

08000e00 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e04:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <MX_UART4_Init+0x4c>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	@ (8000e50 <MX_UART4_Init+0x50>)
 8000e08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <MX_UART4_Init+0x4c>)
 8000e0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <MX_UART4_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <MX_UART4_Init+0x4c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <MX_UART4_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e24:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <MX_UART4_Init+0x4c>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <MX_UART4_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <MX_UART4_Init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <MX_UART4_Init+0x4c>)
 8000e38:	f007 fa24 	bl	8008284 <HAL_UART_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000e42:	f000 f9c7 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2000051c 	.word	0x2000051c
 8000e50:	40004c00 	.word	0x40004c00

08000e54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f1c <MX_DMA_Init+0xc8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a2e      	ldr	r2, [pc, #184]	@ (8000f1c <MX_DMA_Init+0xc8>)
 8000e64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f1c <MX_DMA_Init+0xc8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	4b28      	ldr	r3, [pc, #160]	@ (8000f1c <MX_DMA_Init+0xc8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a27      	ldr	r2, [pc, #156]	@ (8000f1c <MX_DMA_Init+0xc8>)
 8000e80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b25      	ldr	r3, [pc, #148]	@ (8000f1c <MX_DMA_Init+0xc8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2105      	movs	r1, #5
 8000e96:	200b      	movs	r0, #11
 8000e98:	f002 f821 	bl	8002ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e9c:	200b      	movs	r0, #11
 8000e9e:	f002 f83a 	bl	8002f16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2105      	movs	r1, #5
 8000ea6:	200d      	movs	r0, #13
 8000ea8:	f002 f819 	bl	8002ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000eac:	200d      	movs	r0, #13
 8000eae:	f002 f832 	bl	8002f16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2105      	movs	r1, #5
 8000eb6:	200e      	movs	r0, #14
 8000eb8:	f002 f811 	bl	8002ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ebc:	200e      	movs	r0, #14
 8000ebe:	f002 f82a 	bl	8002f16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	200f      	movs	r0, #15
 8000ec8:	f002 f809 	bl	8002ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000ecc:	200f      	movs	r0, #15
 8000ece:	f002 f822 	bl	8002f16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2011      	movs	r0, #17
 8000ed8:	f002 f801 	bl	8002ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000edc:	2011      	movs	r0, #17
 8000ede:	f002 f81a 	bl	8002f16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	202f      	movs	r0, #47	@ 0x2f
 8000ee8:	f001 fff9 	bl	8002ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000eec:	202f      	movs	r0, #47	@ 0x2f
 8000eee:	f002 f812 	bl	8002f16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	2038      	movs	r0, #56	@ 0x38
 8000ef8:	f001 fff1 	bl	8002ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000efc:	2038      	movs	r0, #56	@ 0x38
 8000efe:	f002 f80a 	bl	8002f16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	203b      	movs	r0, #59	@ 0x3b
 8000f08:	f001 ffe9 	bl	8002ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f0c:	203b      	movs	r0, #59	@ 0x3b
 8000f0e:	f002 f802 	bl	8002f16 <HAL_NVIC_EnableIRQ>

}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	@ 0x28
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b34      	ldr	r3, [pc, #208]	@ (800100c <MX_GPIO_Init+0xec>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a33      	ldr	r2, [pc, #204]	@ (800100c <MX_GPIO_Init+0xec>)
 8000f40:	f043 0320 	orr.w	r3, r3, #32
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4b31      	ldr	r3, [pc, #196]	@ (800100c <MX_GPIO_Init+0xec>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f003 0320 	and.w	r3, r3, #32
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b2d      	ldr	r3, [pc, #180]	@ (800100c <MX_GPIO_Init+0xec>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800100c <MX_GPIO_Init+0xec>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b2a      	ldr	r3, [pc, #168]	@ (800100c <MX_GPIO_Init+0xec>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	4b26      	ldr	r3, [pc, #152]	@ (800100c <MX_GPIO_Init+0xec>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a25      	ldr	r2, [pc, #148]	@ (800100c <MX_GPIO_Init+0xec>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b23      	ldr	r3, [pc, #140]	@ (800100c <MX_GPIO_Init+0xec>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <MX_GPIO_Init+0xec>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a1e      	ldr	r2, [pc, #120]	@ (800100c <MX_GPIO_Init+0xec>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <MX_GPIO_Init+0xec>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	4b18      	ldr	r3, [pc, #96]	@ (800100c <MX_GPIO_Init+0xec>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a17      	ldr	r2, [pc, #92]	@ (800100c <MX_GPIO_Init+0xec>)
 8000fb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b15      	ldr	r3, [pc, #84]	@ (800100c <MX_GPIO_Init+0xec>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2107      	movs	r1, #7
 8000fc6:	4812      	ldr	r0, [pc, #72]	@ (8001010 <MX_GPIO_Init+0xf0>)
 8000fc8:	f002 fd70 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480b      	ldr	r0, [pc, #44]	@ (8001010 <MX_GPIO_Init+0xf0>)
 8000fe4:	f002 fbce 	bl	8003784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fec:	2311      	movs	r3, #17
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4804      	ldr	r0, [pc, #16]	@ (8001010 <MX_GPIO_Init+0xf0>)
 8001000:	f002 fbc0 	bl	8003784 <HAL_GPIO_Init>

}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	@ 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40020400 	.word	0x40020400

08001014 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800101c:	2001      	movs	r0, #1
 800101e:	f008 f965 	bl	80092ec <osDelay>
 8001022:	e7fb      	b.n	800101c <StartDefaultTask+0x8>

08001024 <StartI2CTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartI2CTask */
void StartI2CTask(void *argument)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  MP5475GU_StatusUV_t uv_status;
  HAL_StatusTypeDef ret;
  /* Infinite loop */
  for(;;)
  {
    if (osMutexAcquire(CommMutexHandleHandle, osWaitForever) == osOK){
 800102c:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <StartI2CTask+0xc0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	4618      	mov	r0, r3
 8001036:	f008 f9fa 	bl	800942e <osMutexAcquire>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1f5      	bne.n	800102c <StartI2CTask+0x8>

      // TODO: Add I2C communication code here.
      mp5475gu_set_vout(&hi2c1, BUCK_A, 1.2f);
 8001040:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 80010e8 <StartI2CTask+0xc4>
 8001044:	2100      	movs	r1, #0
 8001046:	4829      	ldr	r0, [pc, #164]	@ (80010ec <StartI2CTask+0xc8>)
 8001048:	f000 f8d8 	bl	80011fc <mp5475gu_set_vout>
      osDelay(100);
 800104c:	2064      	movs	r0, #100	@ 0x64
 800104e:	f008 f94d 	bl	80092ec <osDelay>
      
      // 1. Read the UV status from the PMIC
      ret = mp5475gu_read_uv_status(&hi2c1, &uv_status);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4619      	mov	r1, r3
 8001058:	4824      	ldr	r0, [pc, #144]	@ (80010ec <StartI2CTask+0xc8>)
 800105a:	f000 f94f 	bl	80012fc <mp5475gu_read_uv_status>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]
      if (ret == HAL_OK) {
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d133      	bne.n	80010d0 <StartI2CTask+0xac>
        // 2. Update DTCs based on the read status

        // Check Buck A
        if (uv_status.bits.BUCKA_UV) {
 8001068:	7b3b      	ldrb	r3, [r7, #12]
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <StartI2CTask+0x58>
          DTC_Set(DTC_PMIC_BUCK_A_UNDERVOLTAGE);
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff faef 	bl	8000658 <DTC_Set>
 800107a:	e002      	b.n	8001082 <StartI2CTask+0x5e>
        } else {
          DTC_Clear(DTC_PMIC_BUCK_A_UNDERVOLTAGE);
 800107c:	2000      	movs	r0, #0
 800107e:	f7ff fb07 	bl	8000690 <DTC_Clear>
        }
  
        // Check Buck B
        if (uv_status.bits.BUCKB_UV) {
 8001082:	7b3b      	ldrb	r3, [r7, #12]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <StartI2CTask+0x72>
          DTC_Set(DTC_PMIC_BUCK_B_UNDERVOLTAGE);
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff fae2 	bl	8000658 <DTC_Set>
 8001094:	e002      	b.n	800109c <StartI2CTask+0x78>
        } else {
          DTC_Clear(DTC_PMIC_BUCK_B_UNDERVOLTAGE);
 8001096:	2001      	movs	r0, #1
 8001098:	f7ff fafa 	bl	8000690 <DTC_Clear>
        }
  
        // Check Buck C
        if (uv_status.bits.BUCKC_UV) {
 800109c:	7b3b      	ldrb	r3, [r7, #12]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <StartI2CTask+0x8c>
          DTC_Set(DTC_PMIC_BUCK_C_UNDERVOLTAGE);
 80010a8:	2002      	movs	r0, #2
 80010aa:	f7ff fad5 	bl	8000658 <DTC_Set>
 80010ae:	e002      	b.n	80010b6 <StartI2CTask+0x92>
        } else {
          DTC_Clear(DTC_PMIC_BUCK_C_UNDERVOLTAGE);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff faed 	bl	8000690 <DTC_Clear>
        }
  
        // Check Buck D
        if (uv_status.bits.BUCKD_UV) {
 80010b6:	7b3b      	ldrb	r3, [r7, #12]
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <StartI2CTask+0xa6>
          DTC_Set(DTC_PMIC_BUCK_D_UNDERVOLTAGE);
 80010c2:	2003      	movs	r0, #3
 80010c4:	f7ff fac8 	bl	8000658 <DTC_Set>
 80010c8:	e002      	b.n	80010d0 <StartI2CTask+0xac>
        } else {
          DTC_Clear(DTC_PMIC_BUCK_D_UNDERVOLTAGE);
 80010ca:	2003      	movs	r0, #3
 80010cc:	f7ff fae0 	bl	8000690 <DTC_Clear>
        }
      }

      osMutexRelease(CommMutexHandleHandle);
 80010d0:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <StartI2CTask+0xc0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f008 f9f5 	bl	80094c4 <osMutexRelease>

      // Wait for the next monitoring cycle
      osDelay(100); // Check every 100ms
 80010da:	2064      	movs	r0, #100	@ 0x64
 80010dc:	f008 f906 	bl	80092ec <osDelay>
    if (osMutexAcquire(CommMutexHandleHandle, osWaitForever) == osOK){
 80010e0:	e7a4      	b.n	800102c <StartI2CTask+0x8>
 80010e2:	bf00      	nop
 80010e4:	20000578 	.word	0x20000578
 80010e8:	3f99999a 	.word	0x3f99999a
 80010ec:	200000c4 	.word	0x200000c4

080010f0 <StartSPITask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSPITask */
void StartSPITask(void *argument)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint8_t dtc_data;
  uint16_t dtc_address;
  /* Infinite loop */
  for(;;)
  {
    if (osMutexAcquire(CommMutexHandleHandle, osWaitForever) == osOK){
 80010f8:	4b10      	ldr	r3, [pc, #64]	@ (800113c <StartSPITask+0x4c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	4618      	mov	r0, r3
 8001102:	f008 f994 	bl	800942e <osMutexAcquire>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d112      	bne.n	8001132 <StartSPITask+0x42>

      // TODO: Add SPI communication code here.
      dtc_data = DTC_GetStatusBitmask();
 800110c:	f7ff fade 	bl	80006cc <DTC_GetStatusBitmask>
 8001110:	4603      	mov	r3, r0
 8001112:	b2db      	uxtb	r3, r3
 8001114:	737b      	strb	r3, [r7, #13]
      dtc_address = 0x0000;
 8001116:	2300      	movs	r3, #0
 8001118:	81fb      	strh	r3, [r7, #14]
      if (EEPROM_Write_DMA(dtc_address, &dtc_data, 1) == HAL_OK) {
 800111a:	f107 010d 	add.w	r1, r7, #13
 800111e:	89fb      	ldrh	r3, [r7, #14]
 8001120:	2201      	movs	r2, #1
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fb9e 	bl	8000864 <EEPROM_Write_DMA>
        // 쓰기 성공
      } else {
        // 쓰기 실패
      }

      osMutexRelease(CommMutexHandleHandle);
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <StartSPITask+0x4c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f008 f9c9 	bl	80094c4 <osMutexRelease>
    }
    osDelay(100);
 8001132:	2064      	movs	r0, #100	@ 0x64
 8001134:	f008 f8da 	bl	80092ec <osDelay>
    if (osMutexAcquire(CommMutexHandleHandle, osWaitForever) == osOK){
 8001138:	e7de      	b.n	80010f8 <StartSPITask+0x8>
 800113a:	bf00      	nop
 800113c:	20000578 	.word	0x20000578

08001140 <StartCANTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANTask */
void StartCANTask(void *argument)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANTask */
  uint8_t dtc_data;
  uint16_t dtc_address = 0x0000;
 8001148:	2300      	movs	r3, #0
 800114a:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
    if (osMutexAcquire(CommMutexHandleHandle, osWaitForever) == osOK){
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <StartCANTask+0x58>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	4618      	mov	r0, r3
 8001156:	f008 f96a 	bl	800942e <osMutexAcquire>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d115      	bne.n	800118c <StartCANTask+0x4c>

      if (EEPROM_Read_DMA(dtc_address, &dtc_data, 1) == HAL_OK) {
 8001160:	f107 010d 	add.w	r1, r7, #13
 8001164:	89fb      	ldrh	r3, [r7, #14]
 8001166:	2201      	movs	r2, #1
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fb35 	bl	80007d8 <EEPROM_Read_DMA>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d106      	bne.n	8001182 <StartCANTask+0x42>
        CAN_Manager_Transmit_DTC(&hcan1, &dtc_data, 1);
 8001174:	f107 030d 	add.w	r3, r7, #13
 8001178:	2201      	movs	r2, #1
 800117a:	4619      	mov	r1, r3
 800117c:	4807      	ldr	r0, [pc, #28]	@ (800119c <StartCANTask+0x5c>)
 800117e:	f7ff fa13 	bl	80005a8 <CAN_Manager_Transmit_DTC>
      }
      
      osMutexRelease(CommMutexHandleHandle);
 8001182:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <StartCANTask+0x58>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f008 f99c 	bl	80094c4 <osMutexRelease>
    }
    osDelay(1000); // Transmit every 1 second
 800118c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001190:	f008 f8ac 	bl	80092ec <osDelay>
    if (osMutexAcquire(CommMutexHandleHandle, osWaitForever) == osOK){
 8001194:	e7da      	b.n	800114c <StartCANTask+0xc>
 8001196:	bf00      	nop
 8001198:	20000578 	.word	0x20000578
 800119c:	2000009c 	.word	0x2000009c

080011a0 <StartUARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void *argument)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTTask */
  /* Infinite loop */
  for(;;)
  {
    if (osMutexAcquire(CommMutexHandleHandle, osWaitForever) == osOK){
 80011a8:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <StartUARTTask+0x30>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	4618      	mov	r0, r3
 80011b2:	f008 f93c 	bl	800942e <osMutexAcquire>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d104      	bne.n	80011c6 <StartUARTTask+0x26>
      // TODO: Add UART communication code here.

      osMutexRelease(CommMutexHandleHandle);
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <StartUARTTask+0x30>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f008 f97f 	bl	80094c4 <osMutexRelease>
    }
    osDelay(1);
 80011c6:	2001      	movs	r0, #1
 80011c8:	f008 f890 	bl	80092ec <osDelay>
    if (osMutexAcquire(CommMutexHandleHandle, osWaitForever) == osOK){
 80011cc:	e7ec      	b.n	80011a8 <StartUARTTask+0x8>
 80011ce:	bf00      	nop
 80011d0:	20000578 	.word	0x20000578

080011d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
}
 80011da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <Error_Handler+0x8>

080011e0 <mp5475gu_init>:

/**
 * @brief  Initializes the MP5475GU driver, creating the semaphore.
 */
void mp5475gu_init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
    i2cTxRxSemHandle = osSemaphoreNew(1, 0, NULL); // Create a binary semaphore, initially taken
 80011e4:	2200      	movs	r2, #0
 80011e6:	2100      	movs	r1, #0
 80011e8:	2001      	movs	r0, #1
 80011ea:	f008 f9a8 	bl	800953e <osSemaphoreNew>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4a01      	ldr	r2, [pc, #4]	@ (80011f8 <mp5475gu_init+0x18>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	2000057c 	.word	0x2000057c

080011fc <mp5475gu_set_vout>:
 * @param  channel: The buck channel to configure (BUCK_A, BUCK_B, BUCK_C, or BUCK_D).
 * @param  voltage: The desired output voltage in volts.
 * @retval HAL status
 */
HAL_StatusTypeDef mp5475gu_set_vout(I2C_HandleTypeDef *hi2c, MP5475GU_BuckChannel_t channel, float voltage)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af02      	add	r7, sp, #8
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	460b      	mov	r3, r1
 8001206:	ed87 0a01 	vstr	s0, [r7, #4]
 800120a:	72fb      	strb	r3, [r7, #11]
    static uint8_t data[2]; // Use static to ensure data is valid during DMA transfer
    HAL_StatusTypeDef status;

    // Determine register addresses based on the channel
    // Vout High and Low registers are contiguous, so we only need the high address
    switch (channel) {
 800120c:	7afb      	ldrb	r3, [r7, #11]
 800120e:	2b03      	cmp	r3, #3
 8001210:	d816      	bhi.n	8001240 <mp5475gu_set_vout+0x44>
 8001212:	a201      	add	r2, pc, #4	@ (adr r2, 8001218 <mp5475gu_set_vout+0x1c>)
 8001214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001218:	08001229 	.word	0x08001229
 800121c:	0800122f 	.word	0x0800122f
 8001220:	08001235 	.word	0x08001235
 8001224:	0800123b 	.word	0x0800123b
        case BUCK_A: reg_high_addr = MP5475GU_REG_VOUT_A_HIGH; break;
 8001228:	2313      	movs	r3, #19
 800122a:	75fb      	strb	r3, [r7, #23]
 800122c:	e00a      	b.n	8001244 <mp5475gu_set_vout+0x48>
        case BUCK_B: reg_high_addr = MP5475GU_REG_VOUT_B_HIGH; break;
 800122e:	231b      	movs	r3, #27
 8001230:	75fb      	strb	r3, [r7, #23]
 8001232:	e007      	b.n	8001244 <mp5475gu_set_vout+0x48>
        case BUCK_C: reg_high_addr = MP5475GU_REG_VOUT_C_HIGH; break;
 8001234:	2323      	movs	r3, #35	@ 0x23
 8001236:	75fb      	strb	r3, [r7, #23]
 8001238:	e004      	b.n	8001244 <mp5475gu_set_vout+0x48>
        case BUCK_D: reg_high_addr = MP5475GU_REG_VOUT_D_HIGH; break;
 800123a:	232b      	movs	r3, #43	@ 0x2b
 800123c:	75fb      	strb	r3, [r7, #23]
 800123e:	e001      	b.n	8001244 <mp5475gu_set_vout+0x48>
        default: return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e04d      	b.n	80012e0 <mp5475gu_set_vout+0xe4>
    }

    if (voltage < 0.3f || voltage > 2.048f) {
 8001244:	edd7 7a01 	vldr	s15, [r7, #4]
 8001248:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80012e8 <mp5475gu_set_vout+0xec>
 800124c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001254:	d408      	bmi.n	8001268 <mp5475gu_set_vout+0x6c>
 8001256:	edd7 7a01 	vldr	s15, [r7, #4]
 800125a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80012ec <mp5475gu_set_vout+0xf0>
 800125e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	dd01      	ble.n	800126c <mp5475gu_set_vout+0x70>
        return HAL_ERROR; // Voltage out of range
 8001268:	2301      	movs	r3, #1
 800126a:	e039      	b.n	80012e0 <mp5475gu_set_vout+0xe4>
    }
    vref_val = (uint16_t)((voltage - 0.3f) / 0.002f);
 800126c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001270:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80012e8 <mp5475gu_set_vout+0xec>
 8001274:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001278:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 80012f0 <mp5475gu_set_vout+0xf4>
 800127c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001284:	ee17 3a90 	vmov	r3, s15
 8001288:	82bb      	strh	r3, [r7, #20]

    data[0] = (uint8_t)((vref_val >> 8) & 0x03);
 800128a:	8abb      	ldrh	r3, [r7, #20]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	b29b      	uxth	r3, r3
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	b2da      	uxtb	r2, r3
 8001298:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <mp5475gu_set_vout+0xf8>)
 800129a:	701a      	strb	r2, [r3, #0]
    data[1] = (uint8_t)(vref_val & 0xFF);
 800129c:	8abb      	ldrh	r3, [r7, #20]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <mp5475gu_set_vout+0xf8>)
 80012a2:	705a      	strb	r2, [r3, #1]

    status = HAL_I2C_Mem_Write_DMA(hi2c, MP5475GU_I2C_ADDR, reg_high_addr, I2C_MEMADD_SIZE_8BIT, data, 2);
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	2302      	movs	r3, #2
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <mp5475gu_set_vout+0xf8>)
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2301      	movs	r3, #1
 80012b2:	21c0      	movs	r1, #192	@ 0xc0
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f002 fd57 	bl	8003d68 <HAL_I2C_Mem_Write_DMA>
 80012ba:	4603      	mov	r3, r0
 80012bc:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK) {
 80012be:	7cfb      	ldrb	r3, [r7, #19]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <mp5475gu_set_vout+0xcc>
        return status;
 80012c4:	7cfb      	ldrb	r3, [r7, #19]
 80012c6:	e00b      	b.n	80012e0 <mp5475gu_set_vout+0xe4>
    }

    // Wait for DMA transfer to complete
    if (osSemaphoreAcquire(i2cTxRxSemHandle, 100) != osOK) { // 100ms timeout
 80012c8:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <mp5475gu_set_vout+0xfc>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2164      	movs	r1, #100	@ 0x64
 80012ce:	4618      	mov	r0, r3
 80012d0:	f008 f9be 	bl	8009650 <osSemaphoreAcquire>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <mp5475gu_set_vout+0xe2>
        return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e000      	b.n	80012e0 <mp5475gu_set_vout+0xe4>
    }

    return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	3e99999a 	.word	0x3e99999a
 80012ec:	4003126f 	.word	0x4003126f
 80012f0:	3b03126f 	.word	0x3b03126f
 80012f4:	20000580 	.word	0x20000580
 80012f8:	2000057c 	.word	0x2000057c

080012fc <mp5475gu_read_uv_status>:
 * @param  hi2c: Pointer to the I2C handle.
 * @param  status: Pointer to a MP5475GU_StatusUV_t union to store the status.
 * @retval HAL status
 */
HAL_StatusTypeDef mp5475gu_read_uv_status(I2C_HandleTypeDef *hi2c, MP5475GU_StatusUV_t *status)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af02      	add	r7, sp, #8
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef dma_status;

    dma_status = HAL_I2C_Mem_Read_DMA(hi2c, MP5475GU_I2C_ADDR, MP5475GU_REG_STATUS_UV, I2C_MEMADD_SIZE_8BIT, &status->data, 1);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	2201      	movs	r2, #1
 800130a:	9201      	str	r2, [sp, #4]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	2301      	movs	r3, #1
 8001310:	2207      	movs	r2, #7
 8001312:	21c0      	movs	r1, #192	@ 0xc0
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f002 fe8b 	bl	8004030 <HAL_I2C_Mem_Read_DMA>
 800131a:	4603      	mov	r3, r0
 800131c:	73fb      	strb	r3, [r7, #15]
    if (dma_status != HAL_OK) {
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <mp5475gu_read_uv_status+0x2c>
        return dma_status;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	e00b      	b.n	8001340 <mp5475gu_read_uv_status+0x44>
    }

    // Wait for DMA transfer to complete
    if (osSemaphoreAcquire(i2cTxRxSemHandle, 100) != osOK) { // 100ms timeout
 8001328:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <mp5475gu_read_uv_status+0x4c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2164      	movs	r1, #100	@ 0x64
 800132e:	4618      	mov	r0, r3
 8001330:	f008 f98e 	bl	8009650 <osSemaphoreAcquire>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <mp5475gu_read_uv_status+0x42>
        return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e000      	b.n	8001340 <mp5475gu_read_uv_status+0x44>
    }

    return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	2000057c 	.word	0x2000057c

0800134c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
    // This callback is shared among all I2C peripherals. Check if it's the one we're using.
    // For simplicity, we assume only one I2C is used for this driver.
    osSemaphoreRelease(i2cTxRxSemHandle);
 8001354:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <HAL_I2C_MemTxCpltCallback+0x1c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f008 f9cb 	bl	80096f4 <osSemaphoreRelease>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	2000057c 	.word	0x2000057c

0800136c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
    osSemaphoreRelease(i2cTxRxSemHandle);
 8001374:	4b04      	ldr	r3, [pc, #16]	@ (8001388 <HAL_I2C_MemRxCpltCallback+0x1c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f008 f9bb 	bl	80096f4 <osSemaphoreRelease>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	2000057c 	.word	0x2000057c

0800138c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
    // Handle I2C error: release the semaphore to unblock the waiting task
    osSemaphoreRelease(i2cTxRxSemHandle);
 8001394:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <HAL_I2C_ErrorCallback+0x1c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f008 f9ab 	bl	80096f4 <osSemaphoreRelease>
    // Optionally, log the error or set a flag
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000057c 	.word	0x2000057c

080013ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <HAL_MspInit+0x54>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	4a11      	ldr	r2, [pc, #68]	@ (8001400 <HAL_MspInit+0x54>)
 80013bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <HAL_MspInit+0x54>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <HAL_MspInit+0x54>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <HAL_MspInit+0x54>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <HAL_MspInit+0x54>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	210f      	movs	r1, #15
 80013ee:	f06f 0001 	mvn.w	r0, #1
 80013f2:	f001 fd74 	bl	8002ede <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800

08001404 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	@ 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a17      	ldr	r2, [pc, #92]	@ (8001480 <HAL_ADC_MspInit+0x7c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d127      	bne.n	8001476 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <HAL_ADC_MspInit+0x80>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	4a15      	ldr	r2, [pc, #84]	@ (8001484 <HAL_ADC_MspInit+0x80>)
 8001430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001434:	6453      	str	r3, [r2, #68]	@ 0x44
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <HAL_ADC_MspInit+0x80>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <HAL_ADC_MspInit+0x80>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a0e      	ldr	r2, [pc, #56]	@ (8001484 <HAL_ADC_MspInit+0x80>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <HAL_ADC_MspInit+0x80>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800145e:	2304      	movs	r3, #4
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001462:	2303      	movs	r3, #3
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	@ (8001488 <HAL_ADC_MspInit+0x84>)
 8001472:	f002 f987 	bl	8003784 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	@ 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40012000 	.word	0x40012000
 8001484:	40023800 	.word	0x40023800
 8001488:	40020000 	.word	0x40020000

0800148c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	@ 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a21      	ldr	r2, [pc, #132]	@ (8001530 <HAL_CAN_MspInit+0xa4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d13b      	bne.n	8001526 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <HAL_CAN_MspInit+0xa8>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001534 <HAL_CAN_MspInit+0xa8>)
 80014b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014be:	4b1d      	ldr	r3, [pc, #116]	@ (8001534 <HAL_CAN_MspInit+0xa8>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <HAL_CAN_MspInit+0xa8>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a18      	ldr	r2, [pc, #96]	@ (8001534 <HAL_CAN_MspInit+0xa8>)
 80014d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <HAL_CAN_MspInit+0xa8>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014e6:	2303      	movs	r3, #3
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014f6:	2309      	movs	r3, #9
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	480d      	ldr	r0, [pc, #52]	@ (8001538 <HAL_CAN_MspInit+0xac>)
 8001502:	f002 f93f 	bl	8003784 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2105      	movs	r1, #5
 800150a:	2013      	movs	r0, #19
 800150c:	f001 fce7 	bl	8002ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001510:	2013      	movs	r0, #19
 8001512:	f001 fd00 	bl	8002f16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2105      	movs	r1, #5
 800151a:	2014      	movs	r0, #20
 800151c:	f001 fcdf 	bl	8002ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001520:	2014      	movs	r0, #20
 8001522:	f001 fcf8 	bl	8002f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	@ 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40006400 	.word	0x40006400
 8001534:	40023800 	.word	0x40023800
 8001538:	40021800 	.word	0x40021800

0800153c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a9c      	ldr	r2, [pc, #624]	@ (80017cc <HAL_I2C_MspInit+0x290>)
 800155a:	4293      	cmp	r3, r2
 800155c:	f040 809b 	bne.w	8001696 <HAL_I2C_MspInit+0x15a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
 8001564:	4b9a      	ldr	r3, [pc, #616]	@ (80017d0 <HAL_I2C_MspInit+0x294>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001568:	4a99      	ldr	r2, [pc, #612]	@ (80017d0 <HAL_I2C_MspInit+0x294>)
 800156a:	f043 0302 	orr.w	r3, r3, #2
 800156e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001570:	4b97      	ldr	r3, [pc, #604]	@ (80017d0 <HAL_I2C_MspInit+0x294>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800157c:	23c0      	movs	r3, #192	@ 0xc0
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001580:	2312      	movs	r3, #18
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800158c:	2304      	movs	r3, #4
 800158e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	488f      	ldr	r0, [pc, #572]	@ (80017d4 <HAL_I2C_MspInit+0x298>)
 8001598:	f002 f8f4 	bl	8003784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	4b8b      	ldr	r3, [pc, #556]	@ (80017d0 <HAL_I2C_MspInit+0x294>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a4:	4a8a      	ldr	r2, [pc, #552]	@ (80017d0 <HAL_I2C_MspInit+0x294>)
 80015a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ac:	4b88      	ldr	r3, [pc, #544]	@ (80017d0 <HAL_I2C_MspInit+0x294>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80015b8:	4b87      	ldr	r3, [pc, #540]	@ (80017d8 <HAL_I2C_MspInit+0x29c>)
 80015ba:	4a88      	ldr	r2, [pc, #544]	@ (80017dc <HAL_I2C_MspInit+0x2a0>)
 80015bc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80015be:	4b86      	ldr	r3, [pc, #536]	@ (80017d8 <HAL_I2C_MspInit+0x29c>)
 80015c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015c4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015c6:	4b84      	ldr	r3, [pc, #528]	@ (80017d8 <HAL_I2C_MspInit+0x29c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015cc:	4b82      	ldr	r3, [pc, #520]	@ (80017d8 <HAL_I2C_MspInit+0x29c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015d2:	4b81      	ldr	r3, [pc, #516]	@ (80017d8 <HAL_I2C_MspInit+0x29c>)
 80015d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015d8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015da:	4b7f      	ldr	r3, [pc, #508]	@ (80017d8 <HAL_I2C_MspInit+0x29c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015e0:	4b7d      	ldr	r3, [pc, #500]	@ (80017d8 <HAL_I2C_MspInit+0x29c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80015e6:	4b7c      	ldr	r3, [pc, #496]	@ (80017d8 <HAL_I2C_MspInit+0x29c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80015ec:	4b7a      	ldr	r3, [pc, #488]	@ (80017d8 <HAL_I2C_MspInit+0x29c>)
 80015ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015f2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015f4:	4b78      	ldr	r3, [pc, #480]	@ (80017d8 <HAL_I2C_MspInit+0x29c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80015fa:	4877      	ldr	r0, [pc, #476]	@ (80017d8 <HAL_I2C_MspInit+0x29c>)
 80015fc:	f001 fca6 	bl	8002f4c <HAL_DMA_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001606:	f7ff fde5 	bl	80011d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a72      	ldr	r2, [pc, #456]	@ (80017d8 <HAL_I2C_MspInit+0x29c>)
 800160e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001610:	4a71      	ldr	r2, [pc, #452]	@ (80017d8 <HAL_I2C_MspInit+0x29c>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001616:	4b72      	ldr	r3, [pc, #456]	@ (80017e0 <HAL_I2C_MspInit+0x2a4>)
 8001618:	4a72      	ldr	r2, [pc, #456]	@ (80017e4 <HAL_I2C_MspInit+0x2a8>)
 800161a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800161c:	4b70      	ldr	r3, [pc, #448]	@ (80017e0 <HAL_I2C_MspInit+0x2a4>)
 800161e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001622:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001624:	4b6e      	ldr	r3, [pc, #440]	@ (80017e0 <HAL_I2C_MspInit+0x2a4>)
 8001626:	2240      	movs	r2, #64	@ 0x40
 8001628:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800162a:	4b6d      	ldr	r3, [pc, #436]	@ (80017e0 <HAL_I2C_MspInit+0x2a4>)
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001630:	4b6b      	ldr	r3, [pc, #428]	@ (80017e0 <HAL_I2C_MspInit+0x2a4>)
 8001632:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001636:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001638:	4b69      	ldr	r3, [pc, #420]	@ (80017e0 <HAL_I2C_MspInit+0x2a4>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800163e:	4b68      	ldr	r3, [pc, #416]	@ (80017e0 <HAL_I2C_MspInit+0x2a4>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001644:	4b66      	ldr	r3, [pc, #408]	@ (80017e0 <HAL_I2C_MspInit+0x2a4>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800164a:	4b65      	ldr	r3, [pc, #404]	@ (80017e0 <HAL_I2C_MspInit+0x2a4>)
 800164c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001650:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001652:	4b63      	ldr	r3, [pc, #396]	@ (80017e0 <HAL_I2C_MspInit+0x2a4>)
 8001654:	2200      	movs	r2, #0
 8001656:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001658:	4861      	ldr	r0, [pc, #388]	@ (80017e0 <HAL_I2C_MspInit+0x2a4>)
 800165a:	f001 fc77 	bl	8002f4c <HAL_DMA_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8001664:	f7ff fdb6 	bl	80011d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a5d      	ldr	r2, [pc, #372]	@ (80017e0 <HAL_I2C_MspInit+0x2a4>)
 800166c:	635a      	str	r2, [r3, #52]	@ 0x34
 800166e:	4a5c      	ldr	r2, [pc, #368]	@ (80017e0 <HAL_I2C_MspInit+0x2a4>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2105      	movs	r1, #5
 8001678:	201f      	movs	r0, #31
 800167a:	f001 fc30 	bl	8002ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800167e:	201f      	movs	r0, #31
 8001680:	f001 fc49 	bl	8002f16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2105      	movs	r1, #5
 8001688:	2020      	movs	r0, #32
 800168a:	f001 fc28 	bl	8002ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800168e:	2020      	movs	r0, #32
 8001690:	f001 fc41 	bl	8002f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001694:	e095      	b.n	80017c2 <HAL_I2C_MspInit+0x286>
  else if(hi2c->Instance==I2C2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a53      	ldr	r2, [pc, #332]	@ (80017e8 <HAL_I2C_MspInit+0x2ac>)
 800169c:	4293      	cmp	r3, r2
 800169e:	f040 8090 	bne.w	80017c2 <HAL_I2C_MspInit+0x286>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b4a      	ldr	r3, [pc, #296]	@ (80017d0 <HAL_I2C_MspInit+0x294>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a49      	ldr	r2, [pc, #292]	@ (80017d0 <HAL_I2C_MspInit+0x294>)
 80016ac:	f043 0320 	orr.w	r3, r3, #32
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b47      	ldr	r3, [pc, #284]	@ (80017d0 <HAL_I2C_MspInit+0x294>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0320 	and.w	r3, r3, #32
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016be:	2303      	movs	r3, #3
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c2:	2312      	movs	r3, #18
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016ce:	2304      	movs	r3, #4
 80016d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	4844      	ldr	r0, [pc, #272]	@ (80017ec <HAL_I2C_MspInit+0x2b0>)
 80016da:	f002 f853 	bl	8003784 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b3b      	ldr	r3, [pc, #236]	@ (80017d0 <HAL_I2C_MspInit+0x294>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	4a3a      	ldr	r2, [pc, #232]	@ (80017d0 <HAL_I2C_MspInit+0x294>)
 80016e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ee:	4b38      	ldr	r3, [pc, #224]	@ (80017d0 <HAL_I2C_MspInit+0x294>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80016fa:	4b3d      	ldr	r3, [pc, #244]	@ (80017f0 <HAL_I2C_MspInit+0x2b4>)
 80016fc:	4a3d      	ldr	r2, [pc, #244]	@ (80017f4 <HAL_I2C_MspInit+0x2b8>)
 80016fe:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001700:	4b3b      	ldr	r3, [pc, #236]	@ (80017f0 <HAL_I2C_MspInit+0x2b4>)
 8001702:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001706:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001708:	4b39      	ldr	r3, [pc, #228]	@ (80017f0 <HAL_I2C_MspInit+0x2b4>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800170e:	4b38      	ldr	r3, [pc, #224]	@ (80017f0 <HAL_I2C_MspInit+0x2b4>)
 8001710:	2200      	movs	r2, #0
 8001712:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001714:	4b36      	ldr	r3, [pc, #216]	@ (80017f0 <HAL_I2C_MspInit+0x2b4>)
 8001716:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800171a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800171c:	4b34      	ldr	r3, [pc, #208]	@ (80017f0 <HAL_I2C_MspInit+0x2b4>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001722:	4b33      	ldr	r3, [pc, #204]	@ (80017f0 <HAL_I2C_MspInit+0x2b4>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001728:	4b31      	ldr	r3, [pc, #196]	@ (80017f0 <HAL_I2C_MspInit+0x2b4>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800172e:	4b30      	ldr	r3, [pc, #192]	@ (80017f0 <HAL_I2C_MspInit+0x2b4>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001734:	4b2e      	ldr	r3, [pc, #184]	@ (80017f0 <HAL_I2C_MspInit+0x2b4>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800173a:	482d      	ldr	r0, [pc, #180]	@ (80017f0 <HAL_I2C_MspInit+0x2b4>)
 800173c:	f001 fc06 	bl	8002f4c <HAL_DMA_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_MspInit+0x20e>
      Error_Handler();
 8001746:	f7ff fd45 	bl	80011d4 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a28      	ldr	r2, [pc, #160]	@ (80017f0 <HAL_I2C_MspInit+0x2b4>)
 800174e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001750:	4a27      	ldr	r2, [pc, #156]	@ (80017f0 <HAL_I2C_MspInit+0x2b4>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001756:	4b28      	ldr	r3, [pc, #160]	@ (80017f8 <HAL_I2C_MspInit+0x2bc>)
 8001758:	4a28      	ldr	r2, [pc, #160]	@ (80017fc <HAL_I2C_MspInit+0x2c0>)
 800175a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800175c:	4b26      	ldr	r3, [pc, #152]	@ (80017f8 <HAL_I2C_MspInit+0x2bc>)
 800175e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001762:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001764:	4b24      	ldr	r3, [pc, #144]	@ (80017f8 <HAL_I2C_MspInit+0x2bc>)
 8001766:	2240      	movs	r2, #64	@ 0x40
 8001768:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800176a:	4b23      	ldr	r3, [pc, #140]	@ (80017f8 <HAL_I2C_MspInit+0x2bc>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001770:	4b21      	ldr	r3, [pc, #132]	@ (80017f8 <HAL_I2C_MspInit+0x2bc>)
 8001772:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001776:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001778:	4b1f      	ldr	r3, [pc, #124]	@ (80017f8 <HAL_I2C_MspInit+0x2bc>)
 800177a:	2200      	movs	r2, #0
 800177c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800177e:	4b1e      	ldr	r3, [pc, #120]	@ (80017f8 <HAL_I2C_MspInit+0x2bc>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001784:	4b1c      	ldr	r3, [pc, #112]	@ (80017f8 <HAL_I2C_MspInit+0x2bc>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800178a:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <HAL_I2C_MspInit+0x2bc>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001790:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <HAL_I2C_MspInit+0x2bc>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001796:	4818      	ldr	r0, [pc, #96]	@ (80017f8 <HAL_I2C_MspInit+0x2bc>)
 8001798:	f001 fbd8 	bl	8002f4c <HAL_DMA_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_I2C_MspInit+0x26a>
      Error_Handler();
 80017a2:	f7ff fd17 	bl	80011d4 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a13      	ldr	r2, [pc, #76]	@ (80017f8 <HAL_I2C_MspInit+0x2bc>)
 80017aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80017ac:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <HAL_I2C_MspInit+0x2bc>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2105      	movs	r1, #5
 80017b6:	2021      	movs	r0, #33	@ 0x21
 80017b8:	f001 fb91 	bl	8002ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80017bc:	2021      	movs	r0, #33	@ 0x21
 80017be:	f001 fbaa 	bl	8002f16 <HAL_NVIC_EnableIRQ>
}
 80017c2:	bf00      	nop
 80017c4:	3730      	adds	r7, #48	@ 0x30
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40005400 	.word	0x40005400
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020400 	.word	0x40020400
 80017d8:	2000016c 	.word	0x2000016c
 80017dc:	40026010 	.word	0x40026010
 80017e0:	200001cc 	.word	0x200001cc
 80017e4:	400260a0 	.word	0x400260a0
 80017e8:	40005800 	.word	0x40005800
 80017ec:	40021400 	.word	0x40021400
 80017f0:	2000022c 	.word	0x2000022c
 80017f4:	40026040 	.word	0x40026040
 80017f8:	2000028c 	.word	0x2000028c
 80017fc:	400260b8 	.word	0x400260b8

08001800 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08c      	sub	sp, #48	@ 0x30
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a4a      	ldr	r2, [pc, #296]	@ (8001948 <HAL_SPI_MspInit+0x148>)
 800181e:	4293      	cmp	r3, r2
 8001820:	f040 80a0 	bne.w	8001964 <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001824:	2300      	movs	r3, #0
 8001826:	61bb      	str	r3, [r7, #24]
 8001828:	4b48      	ldr	r3, [pc, #288]	@ (800194c <HAL_SPI_MspInit+0x14c>)
 800182a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182c:	4a47      	ldr	r2, [pc, #284]	@ (800194c <HAL_SPI_MspInit+0x14c>)
 800182e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001832:	6453      	str	r3, [r2, #68]	@ 0x44
 8001834:	4b45      	ldr	r3, [pc, #276]	@ (800194c <HAL_SPI_MspInit+0x14c>)
 8001836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001838:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800183c:	61bb      	str	r3, [r7, #24]
 800183e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	4b41      	ldr	r3, [pc, #260]	@ (800194c <HAL_SPI_MspInit+0x14c>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001848:	4a40      	ldr	r2, [pc, #256]	@ (800194c <HAL_SPI_MspInit+0x14c>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001850:	4b3e      	ldr	r3, [pc, #248]	@ (800194c <HAL_SPI_MspInit+0x14c>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800185c:	23e0      	movs	r3, #224	@ 0xe0
 800185e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800186c:	2305      	movs	r3, #5
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	4619      	mov	r1, r3
 8001876:	4836      	ldr	r0, [pc, #216]	@ (8001950 <HAL_SPI_MspInit+0x150>)
 8001878:	f001 ff84 	bl	8003784 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800187c:	4b35      	ldr	r3, [pc, #212]	@ (8001954 <HAL_SPI_MspInit+0x154>)
 800187e:	4a36      	ldr	r2, [pc, #216]	@ (8001958 <HAL_SPI_MspInit+0x158>)
 8001880:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001882:	4b34      	ldr	r3, [pc, #208]	@ (8001954 <HAL_SPI_MspInit+0x154>)
 8001884:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001888:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800188a:	4b32      	ldr	r3, [pc, #200]	@ (8001954 <HAL_SPI_MspInit+0x154>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001890:	4b30      	ldr	r3, [pc, #192]	@ (8001954 <HAL_SPI_MspInit+0x154>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001896:	4b2f      	ldr	r3, [pc, #188]	@ (8001954 <HAL_SPI_MspInit+0x154>)
 8001898:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800189c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800189e:	4b2d      	ldr	r3, [pc, #180]	@ (8001954 <HAL_SPI_MspInit+0x154>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001954 <HAL_SPI_MspInit+0x154>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80018aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001954 <HAL_SPI_MspInit+0x154>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018b0:	4b28      	ldr	r3, [pc, #160]	@ (8001954 <HAL_SPI_MspInit+0x154>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018b6:	4b27      	ldr	r3, [pc, #156]	@ (8001954 <HAL_SPI_MspInit+0x154>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80018bc:	4825      	ldr	r0, [pc, #148]	@ (8001954 <HAL_SPI_MspInit+0x154>)
 80018be:	f001 fb45 	bl	8002f4c <HAL_DMA_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80018c8:	f7ff fc84 	bl	80011d4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a21      	ldr	r2, [pc, #132]	@ (8001954 <HAL_SPI_MspInit+0x154>)
 80018d0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80018d2:	4a20      	ldr	r2, [pc, #128]	@ (8001954 <HAL_SPI_MspInit+0x154>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80018d8:	4b20      	ldr	r3, [pc, #128]	@ (800195c <HAL_SPI_MspInit+0x15c>)
 80018da:	4a21      	ldr	r2, [pc, #132]	@ (8001960 <HAL_SPI_MspInit+0x160>)
 80018dc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80018de:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <HAL_SPI_MspInit+0x15c>)
 80018e0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80018e4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018e6:	4b1d      	ldr	r3, [pc, #116]	@ (800195c <HAL_SPI_MspInit+0x15c>)
 80018e8:	2240      	movs	r2, #64	@ 0x40
 80018ea:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <HAL_SPI_MspInit+0x15c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <HAL_SPI_MspInit+0x15c>)
 80018f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018f8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018fa:	4b18      	ldr	r3, [pc, #96]	@ (800195c <HAL_SPI_MspInit+0x15c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001900:	4b16      	ldr	r3, [pc, #88]	@ (800195c <HAL_SPI_MspInit+0x15c>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <HAL_SPI_MspInit+0x15c>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <HAL_SPI_MspInit+0x15c>)
 800190e:	2200      	movs	r2, #0
 8001910:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001912:	4b12      	ldr	r3, [pc, #72]	@ (800195c <HAL_SPI_MspInit+0x15c>)
 8001914:	2200      	movs	r2, #0
 8001916:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001918:	4810      	ldr	r0, [pc, #64]	@ (800195c <HAL_SPI_MspInit+0x15c>)
 800191a:	f001 fb17 	bl	8002f4c <HAL_DMA_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001924:	f7ff fc56 	bl	80011d4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a0c      	ldr	r2, [pc, #48]	@ (800195c <HAL_SPI_MspInit+0x15c>)
 800192c:	649a      	str	r2, [r3, #72]	@ 0x48
 800192e:	4a0b      	ldr	r2, [pc, #44]	@ (800195c <HAL_SPI_MspInit+0x15c>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2105      	movs	r1, #5
 8001938:	2023      	movs	r0, #35	@ 0x23
 800193a:	f001 fad0 	bl	8002ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800193e:	2023      	movs	r0, #35	@ 0x23
 8001940:	f001 fae9 	bl	8002f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001944:	e0c1      	b.n	8001aca <HAL_SPI_MspInit+0x2ca>
 8001946:	bf00      	nop
 8001948:	40013000 	.word	0x40013000
 800194c:	40023800 	.word	0x40023800
 8001950:	40020000 	.word	0x40020000
 8001954:	2000039c 	.word	0x2000039c
 8001958:	40026410 	.word	0x40026410
 800195c:	200003fc 	.word	0x200003fc
 8001960:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a5a      	ldr	r2, [pc, #360]	@ (8001ad4 <HAL_SPI_MspInit+0x2d4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	f040 80ad 	bne.w	8001aca <HAL_SPI_MspInit+0x2ca>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	4b58      	ldr	r3, [pc, #352]	@ (8001ad8 <HAL_SPI_MspInit+0x2d8>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	4a57      	ldr	r2, [pc, #348]	@ (8001ad8 <HAL_SPI_MspInit+0x2d8>)
 800197a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800197e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001980:	4b55      	ldr	r3, [pc, #340]	@ (8001ad8 <HAL_SPI_MspInit+0x2d8>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001984:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	4b51      	ldr	r3, [pc, #324]	@ (8001ad8 <HAL_SPI_MspInit+0x2d8>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001994:	4a50      	ldr	r2, [pc, #320]	@ (8001ad8 <HAL_SPI_MspInit+0x2d8>)
 8001996:	f043 0304 	orr.w	r3, r3, #4
 800199a:	6313      	str	r3, [r2, #48]	@ 0x30
 800199c:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad8 <HAL_SPI_MspInit+0x2d8>)
 800199e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad8 <HAL_SPI_MspInit+0x2d8>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b0:	4a49      	ldr	r2, [pc, #292]	@ (8001ad8 <HAL_SPI_MspInit+0x2d8>)
 80019b2:	f043 0302 	orr.w	r3, r3, #2
 80019b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b8:	4b47      	ldr	r3, [pc, #284]	@ (8001ad8 <HAL_SPI_MspInit+0x2d8>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019c4:	230c      	movs	r3, #12
 80019c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019d4:	2305      	movs	r3, #5
 80019d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	4619      	mov	r1, r3
 80019de:	483f      	ldr	r0, [pc, #252]	@ (8001adc <HAL_SPI_MspInit+0x2dc>)
 80019e0:	f001 fed0 	bl	8003784 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019f6:	2305      	movs	r3, #5
 80019f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	4837      	ldr	r0, [pc, #220]	@ (8001ae0 <HAL_SPI_MspInit+0x2e0>)
 8001a02:	f001 febf 	bl	8003784 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001a06:	4b37      	ldr	r3, [pc, #220]	@ (8001ae4 <HAL_SPI_MspInit+0x2e4>)
 8001a08:	4a37      	ldr	r2, [pc, #220]	@ (8001ae8 <HAL_SPI_MspInit+0x2e8>)
 8001a0a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001a0c:	4b35      	ldr	r3, [pc, #212]	@ (8001ae4 <HAL_SPI_MspInit+0x2e4>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a12:	4b34      	ldr	r3, [pc, #208]	@ (8001ae4 <HAL_SPI_MspInit+0x2e4>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a18:	4b32      	ldr	r3, [pc, #200]	@ (8001ae4 <HAL_SPI_MspInit+0x2e4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a1e:	4b31      	ldr	r3, [pc, #196]	@ (8001ae4 <HAL_SPI_MspInit+0x2e4>)
 8001a20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a24:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a26:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae4 <HAL_SPI_MspInit+0x2e4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae4 <HAL_SPI_MspInit+0x2e4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001a32:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae4 <HAL_SPI_MspInit+0x2e4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae4 <HAL_SPI_MspInit+0x2e4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a3e:	4b29      	ldr	r3, [pc, #164]	@ (8001ae4 <HAL_SPI_MspInit+0x2e4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001a44:	4827      	ldr	r0, [pc, #156]	@ (8001ae4 <HAL_SPI_MspInit+0x2e4>)
 8001a46:	f001 fa81 	bl	8002f4c <HAL_DMA_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_SPI_MspInit+0x254>
      Error_Handler();
 8001a50:	f7ff fbc0 	bl	80011d4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a23      	ldr	r2, [pc, #140]	@ (8001ae4 <HAL_SPI_MspInit+0x2e4>)
 8001a58:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a5a:	4a22      	ldr	r2, [pc, #136]	@ (8001ae4 <HAL_SPI_MspInit+0x2e4>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001a60:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <HAL_SPI_MspInit+0x2ec>)
 8001a62:	4a23      	ldr	r2, [pc, #140]	@ (8001af0 <HAL_SPI_MspInit+0x2f0>)
 8001a64:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001a66:	4b21      	ldr	r3, [pc, #132]	@ (8001aec <HAL_SPI_MspInit+0x2ec>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <HAL_SPI_MspInit+0x2ec>)
 8001a6e:	2240      	movs	r2, #64	@ 0x40
 8001a70:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a72:	4b1e      	ldr	r3, [pc, #120]	@ (8001aec <HAL_SPI_MspInit+0x2ec>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a78:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <HAL_SPI_MspInit+0x2ec>)
 8001a7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a7e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a80:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <HAL_SPI_MspInit+0x2ec>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a86:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <HAL_SPI_MspInit+0x2ec>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001a8c:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <HAL_SPI_MspInit+0x2ec>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a92:	4b16      	ldr	r3, [pc, #88]	@ (8001aec <HAL_SPI_MspInit+0x2ec>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a98:	4b14      	ldr	r3, [pc, #80]	@ (8001aec <HAL_SPI_MspInit+0x2ec>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001a9e:	4813      	ldr	r0, [pc, #76]	@ (8001aec <HAL_SPI_MspInit+0x2ec>)
 8001aa0:	f001 fa54 	bl	8002f4c <HAL_DMA_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_SPI_MspInit+0x2ae>
      Error_Handler();
 8001aaa:	f7ff fb93 	bl	80011d4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a0e      	ldr	r2, [pc, #56]	@ (8001aec <HAL_SPI_MspInit+0x2ec>)
 8001ab2:	649a      	str	r2, [r3, #72]	@ 0x48
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8001aec <HAL_SPI_MspInit+0x2ec>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2105      	movs	r1, #5
 8001abe:	2024      	movs	r0, #36	@ 0x24
 8001ac0:	f001 fa0d 	bl	8002ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001ac4:	2024      	movs	r0, #36	@ 0x24
 8001ac6:	f001 fa26 	bl	8002f16 <HAL_NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3730      	adds	r7, #48	@ 0x30
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40003800 	.word	0x40003800
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	40020400 	.word	0x40020400
 8001ae4:	2000045c 	.word	0x2000045c
 8001ae8:	40026058 	.word	0x40026058
 8001aec:	200004bc 	.word	0x200004bc
 8001af0:	40026070 	.word	0x40026070

08001af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	@ 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a25      	ldr	r2, [pc, #148]	@ (8001ba8 <HAL_UART_MspInit+0xb4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d144      	bne.n	8001ba0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	4b24      	ldr	r3, [pc, #144]	@ (8001bac <HAL_UART_MspInit+0xb8>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	4a23      	ldr	r2, [pc, #140]	@ (8001bac <HAL_UART_MspInit+0xb8>)
 8001b20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b26:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <HAL_UART_MspInit+0xb8>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b1d      	ldr	r3, [pc, #116]	@ (8001bac <HAL_UART_MspInit+0xb8>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bac <HAL_UART_MspInit+0xb8>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b42:	4b1a      	ldr	r3, [pc, #104]	@ (8001bac <HAL_UART_MspInit+0xb8>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b5e:	2308      	movs	r3, #8
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	4811      	ldr	r0, [pc, #68]	@ (8001bb0 <HAL_UART_MspInit+0xbc>)
 8001b6a:	f001 fe0b 	bl	8003784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_UART4;
 8001b80:	230b      	movs	r3, #11
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4809      	ldr	r0, [pc, #36]	@ (8001bb0 <HAL_UART_MspInit+0xbc>)
 8001b8c:	f001 fdfa 	bl	8003784 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2105      	movs	r1, #5
 8001b94:	2034      	movs	r0, #52	@ 0x34
 8001b96:	f001 f9a2 	bl	8002ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001b9a:	2034      	movs	r0, #52	@ 0x34
 8001b9c:	f001 f9bb 	bl	8002f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	3728      	adds	r7, #40	@ 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40004c00 	.word	0x40004c00
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020000 	.word	0x40020000

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <NMI_Handler+0x4>

08001bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <HardFault_Handler+0x4>

08001bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <MemManage_Handler+0x4>

08001bcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <BusFault_Handler+0x4>

08001bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <UsageFault_Handler+0x4>

08001bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bee:	f000 f937 	bl	8001e60 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001bf2:	f009 fe3d 	bl	800b870 <xTaskGetSchedulerState>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d001      	beq.n	8001c00 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001bfc:	f00a fd34 	bl	800c668 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <DMA1_Stream0_IRQHandler+0x10>)
 8001c0a:	f001 fb37 	bl	800327c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000016c 	.word	0x2000016c

08001c18 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <DMA1_Stream2_IRQHandler+0x10>)
 8001c1e:	f001 fb2d 	bl	800327c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000022c 	.word	0x2000022c

08001c2c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001c30:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <DMA1_Stream3_IRQHandler+0x10>)
 8001c32:	f001 fb23 	bl	800327c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2000045c 	.word	0x2000045c

08001c40 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <DMA1_Stream4_IRQHandler+0x10>)
 8001c46:	f001 fb19 	bl	800327c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200004bc 	.word	0x200004bc

08001c54 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001c58:	4802      	ldr	r0, [pc, #8]	@ (8001c64 <DMA1_Stream6_IRQHandler+0x10>)
 8001c5a:	f001 fb0f 	bl	800327c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200001cc 	.word	0x200001cc

08001c68 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c6c:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <CAN1_TX_IRQHandler+0x10>)
 8001c6e:	f000 fe22 	bl	80028b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	2000009c 	.word	0x2000009c

08001c7c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c80:	4802      	ldr	r0, [pc, #8]	@ (8001c8c <CAN1_RX0_IRQHandler+0x10>)
 8001c82:	f000 fe18 	bl	80028b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000009c 	.word	0x2000009c

08001c90 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c94:	4802      	ldr	r0, [pc, #8]	@ (8001ca0 <I2C1_EV_IRQHandler+0x10>)
 8001c96:	f002 fb5f 	bl	8004358 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200000c4 	.word	0x200000c4

08001ca4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ca8:	4802      	ldr	r0, [pc, #8]	@ (8001cb4 <I2C1_ER_IRQHandler+0x10>)
 8001caa:	f002 fcc6 	bl	800463a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200000c4 	.word	0x200000c4

08001cb8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001cbc:	4802      	ldr	r0, [pc, #8]	@ (8001cc8 <I2C2_EV_IRQHandler+0x10>)
 8001cbe:	f002 fb4b 	bl	8004358 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000118 	.word	0x20000118

08001ccc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	@ (8001cdc <SPI1_IRQHandler+0x10>)
 8001cd2:	f005 ff27 	bl	8007b24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200002ec 	.word	0x200002ec

08001ce0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001ce4:	4802      	ldr	r0, [pc, #8]	@ (8001cf0 <SPI2_IRQHandler+0x10>)
 8001ce6:	f005 ff1d 	bl	8007b24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000344 	.word	0x20000344

08001cf4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <DMA1_Stream7_IRQHandler+0x10>)
 8001cfa:	f001 fabf 	bl	800327c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000028c 	.word	0x2000028c

08001d08 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001d0c:	4802      	ldr	r0, [pc, #8]	@ (8001d18 <UART4_IRQHandler+0x10>)
 8001d0e:	f006 fb07 	bl	8008320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	2000051c 	.word	0x2000051c

08001d1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001d20:	4802      	ldr	r0, [pc, #8]	@ (8001d2c <DMA2_Stream0_IRQHandler+0x10>)
 8001d22:	f001 faab 	bl	800327c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000039c 	.word	0x2000039c

08001d30 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001d34:	4802      	ldr	r0, [pc, #8]	@ (8001d40 <DMA2_Stream3_IRQHandler+0x10>)
 8001d36:	f001 faa1 	bl	800327c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200003fc 	.word	0x200003fc

08001d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d48:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <SystemInit+0x20>)
 8001d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d4e:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <SystemInit+0x20>)
 8001d50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001d68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001da0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d6c:	480d      	ldr	r0, [pc, #52]	@ (8001da4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d6e:	490e      	ldr	r1, [pc, #56]	@ (8001da8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d70:	4a0e      	ldr	r2, [pc, #56]	@ (8001dac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d74:	e002      	b.n	8001d7c <LoopCopyDataInit>

08001d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7a:	3304      	adds	r3, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d80:	d3f9      	bcc.n	8001d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d82:	4a0b      	ldr	r2, [pc, #44]	@ (8001db0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d84:	4c0b      	ldr	r4, [pc, #44]	@ (8001db4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d88:	e001      	b.n	8001d8e <LoopFillZerobss>

08001d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d8c:	3204      	adds	r2, #4

08001d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d90:	d3fb      	bcc.n	8001d8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d92:	f7ff ffd7 	bl	8001d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d96:	f00a feef 	bl	800cb78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d9a:	f7fe fdfb 	bl	8000994 <main>
  bx  lr    
 8001d9e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001da0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001dac:	0800cd64 	.word	0x0800cd64
  ldr r2, =_sbss
 8001db0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001db4:	20004ed8 	.word	0x20004ed8

08001db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db8:	e7fe      	b.n	8001db8 <ADC_IRQHandler>
	...

08001dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <HAL_Init+0x40>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001dfc <HAL_Init+0x40>)
 8001dc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <HAL_Init+0x40>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <HAL_Init+0x40>)
 8001dd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd8:	4b08      	ldr	r3, [pc, #32]	@ (8001dfc <HAL_Init+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a07      	ldr	r2, [pc, #28]	@ (8001dfc <HAL_Init+0x40>)
 8001dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de4:	2003      	movs	r0, #3
 8001de6:	f001 f86f 	bl	8002ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dea:	200f      	movs	r0, #15
 8001dec:	f000 f808 	bl	8001e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df0:	f7ff fadc 	bl	80013ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023c00 	.word	0x40023c00

08001e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <HAL_InitTick+0x54>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b12      	ldr	r3, [pc, #72]	@ (8001e58 <HAL_InitTick+0x58>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	4619      	mov	r1, r3
 8001e12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 f887 	bl	8002f32 <HAL_SYSTICK_Config>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00e      	b.n	8001e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b0f      	cmp	r3, #15
 8001e32:	d80a      	bhi.n	8001e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e34:	2200      	movs	r2, #0
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f001 f84f 	bl	8002ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e40:	4a06      	ldr	r2, [pc, #24]	@ (8001e5c <HAL_InitTick+0x5c>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e000      	b.n	8001e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000008 	.word	0x20000008
 8001e5c:	20000004 	.word	0x20000004

08001e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e64:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_IncTick+0x20>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <HAL_IncTick+0x24>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	4a04      	ldr	r2, [pc, #16]	@ (8001e84 <HAL_IncTick+0x24>)
 8001e72:	6013      	str	r3, [r2, #0]
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000008 	.word	0x20000008
 8001e84:	20000584 	.word	0x20000584

08001e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e8c:	4b03      	ldr	r3, [pc, #12]	@ (8001e9c <HAL_GetTick+0x14>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000584 	.word	0x20000584

08001ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7ff ffee 	bl	8001e88 <HAL_GetTick>
 8001eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb8:	d005      	beq.n	8001ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <HAL_Delay+0x44>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ec6:	bf00      	nop
 8001ec8:	f7ff ffde 	bl	8001e88 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d8f7      	bhi.n	8001ec8 <HAL_Delay+0x28>
  {
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000008 	.word	0x20000008

08001ee8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e033      	b.n	8001f66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff fa7c 	bl	8001404 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d118      	bne.n	8001f58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f2e:	f023 0302 	bic.w	r3, r3, #2
 8001f32:	f043 0202 	orr.w	r2, r3, #2
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f94a 	bl	80021d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f56:	e001      	b.n	8001f5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x1c>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e113      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x244>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b09      	cmp	r3, #9
 8001f9a:	d925      	bls.n	8001fe8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68d9      	ldr	r1, [r3, #12]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	3b1e      	subs	r3, #30
 8001fb2:	2207      	movs	r2, #7
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68d9      	ldr	r1, [r3, #12]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4403      	add	r3, r0
 8001fda:	3b1e      	subs	r3, #30
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	e022      	b.n	800202e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6919      	ldr	r1, [r3, #16]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	2207      	movs	r2, #7
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	400a      	ands	r2, r1
 800200a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6919      	ldr	r1, [r3, #16]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	4618      	mov	r0, r3
 800201e:	4603      	mov	r3, r0
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4403      	add	r3, r0
 8002024:	409a      	lsls	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b06      	cmp	r3, #6
 8002034:	d824      	bhi.n	8002080 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	3b05      	subs	r3, #5
 8002048:	221f      	movs	r2, #31
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	400a      	ands	r2, r1
 8002056:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	4618      	mov	r0, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	3b05      	subs	r3, #5
 8002072:	fa00 f203 	lsl.w	r2, r0, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	635a      	str	r2, [r3, #52]	@ 0x34
 800207e:	e04c      	b.n	800211a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b0c      	cmp	r3, #12
 8002086:	d824      	bhi.n	80020d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	3b23      	subs	r3, #35	@ 0x23
 800209a:	221f      	movs	r2, #31
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43da      	mvns	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	400a      	ands	r2, r1
 80020a8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	3b23      	subs	r3, #35	@ 0x23
 80020c4:	fa00 f203 	lsl.w	r2, r0, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80020d0:	e023      	b.n	800211a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	3b41      	subs	r3, #65	@ 0x41
 80020e4:	221f      	movs	r2, #31
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43da      	mvns	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	400a      	ands	r2, r1
 80020f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	4618      	mov	r0, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	3b41      	subs	r3, #65	@ 0x41
 800210e:	fa00 f203 	lsl.w	r2, r0, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800211a:	4b29      	ldr	r3, [pc, #164]	@ (80021c0 <HAL_ADC_ConfigChannel+0x250>)
 800211c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a28      	ldr	r2, [pc, #160]	@ (80021c4 <HAL_ADC_ConfigChannel+0x254>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d10f      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x1d8>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b12      	cmp	r3, #18
 800212e:	d10b      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1d      	ldr	r2, [pc, #116]	@ (80021c4 <HAL_ADC_ConfigChannel+0x254>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d12b      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x23a>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1c      	ldr	r2, [pc, #112]	@ (80021c8 <HAL_ADC_ConfigChannel+0x258>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d003      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x1f4>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b11      	cmp	r3, #17
 8002162:	d122      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a11      	ldr	r2, [pc, #68]	@ (80021c8 <HAL_ADC_ConfigChannel+0x258>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d111      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002186:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <HAL_ADC_ConfigChannel+0x25c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a11      	ldr	r2, [pc, #68]	@ (80021d0 <HAL_ADC_ConfigChannel+0x260>)
 800218c:	fba2 2303 	umull	r2, r3, r2, r3
 8002190:	0c9a      	lsrs	r2, r3, #18
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800219c:	e002      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f9      	bne.n	800219e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40012300 	.word	0x40012300
 80021c4:	40012000 	.word	0x40012000
 80021c8:	10000012 	.word	0x10000012
 80021cc:	20000000 	.word	0x20000000
 80021d0:	431bde83 	.word	0x431bde83

080021d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021dc:	4b79      	ldr	r3, [pc, #484]	@ (80023c4 <ADC_Init+0x1f0>)
 80021de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	431a      	orrs	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002208:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	021a      	lsls	r2, r3, #8
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800222c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6859      	ldr	r1, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800224e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6899      	ldr	r1, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002266:	4a58      	ldr	r2, [pc, #352]	@ (80023c8 <ADC_Init+0x1f4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d022      	beq.n	80022b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800227a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6899      	ldr	r1, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800229c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6899      	ldr	r1, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	e00f      	b.n	80022d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0202 	bic.w	r2, r2, #2
 80022e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6899      	ldr	r1, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	7e1b      	ldrb	r3, [r3, #24]
 80022ec:	005a      	lsls	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d01b      	beq.n	8002338 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800230e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800231e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6859      	ldr	r1, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232a:	3b01      	subs	r3, #1
 800232c:	035a      	lsls	r2, r3, #13
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	e007      	b.n	8002348 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002346:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002356:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	3b01      	subs	r3, #1
 8002364:	051a      	lsls	r2, r3, #20
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800237c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6899      	ldr	r1, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800238a:	025a      	lsls	r2, r3, #9
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6899      	ldr	r1, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	029a      	lsls	r2, r3, #10
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	609a      	str	r2, [r3, #8]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	40012300 	.word	0x40012300
 80023c8:	0f000001 	.word	0x0f000001

080023cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0ed      	b.n	80025ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d102      	bne.n	80023f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff f84e 	bl	800148c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002400:	f7ff fd42 	bl	8001e88 <HAL_GetTick>
 8002404:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002406:	e012      	b.n	800242e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002408:	f7ff fd3e 	bl	8001e88 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b0a      	cmp	r3, #10
 8002414:	d90b      	bls.n	800242e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2205      	movs	r2, #5
 8002426:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0c5      	b.n	80025ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0e5      	beq.n	8002408 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0202 	bic.w	r2, r2, #2
 800244a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800244c:	f7ff fd1c 	bl	8001e88 <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002452:	e012      	b.n	800247a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002454:	f7ff fd18 	bl	8001e88 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b0a      	cmp	r3, #10
 8002460:	d90b      	bls.n	800247a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2205      	movs	r2, #5
 8002472:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e09f      	b.n	80025ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1e5      	bne.n	8002454 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	7e1b      	ldrb	r3, [r3, #24]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d108      	bne.n	80024a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e007      	b.n	80024b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7e5b      	ldrb	r3, [r3, #25]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d108      	bne.n	80024cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e007      	b.n	80024dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	7e9b      	ldrb	r3, [r3, #26]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d108      	bne.n	80024f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0220 	orr.w	r2, r2, #32
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e007      	b.n	8002506 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0220 	bic.w	r2, r2, #32
 8002504:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	7edb      	ldrb	r3, [r3, #27]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d108      	bne.n	8002520 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0210 	bic.w	r2, r2, #16
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	e007      	b.n	8002530 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0210 	orr.w	r2, r2, #16
 800252e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	7f1b      	ldrb	r3, [r3, #28]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d108      	bne.n	800254a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0208 	orr.w	r2, r2, #8
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	e007      	b.n	800255a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0208 	bic.w	r2, r2, #8
 8002558:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	7f5b      	ldrb	r3, [r3, #29]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d108      	bne.n	8002574 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0204 	orr.w	r2, r2, #4
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e007      	b.n	8002584 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0204 	bic.w	r2, r2, #4
 8002582:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	ea42 0103 	orr.w	r1, r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	1e5a      	subs	r2, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d12e      	bne.n	8002634 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2202      	movs	r2, #2
 80025da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025ee:	f7ff fc4b 	bl	8001e88 <HAL_GetTick>
 80025f2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025f4:	e012      	b.n	800261c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025f6:	f7ff fc47 	bl	8001e88 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b0a      	cmp	r3, #10
 8002602:	d90b      	bls.n	800261c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002608:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2205      	movs	r2, #5
 8002614:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e012      	b.n	8002642 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e5      	bne.n	80025f6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	e006      	b.n	8002642 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002638:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
  }
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800264a:	b480      	push	{r7}
 800264c:	b089      	sub	sp, #36	@ 0x24
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800265e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002668:	7ffb      	ldrb	r3, [r7, #31]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d003      	beq.n	8002676 <HAL_CAN_AddTxMessage+0x2c>
 800266e:	7ffb      	ldrb	r3, [r7, #31]
 8002670:	2b02      	cmp	r3, #2
 8002672:	f040 80b8 	bne.w	80027e6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10a      	bne.n	8002696 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002686:	2b00      	cmp	r3, #0
 8002688:	d105      	bne.n	8002696 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80a0 	beq.w	80027d6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	0e1b      	lsrs	r3, r3, #24
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d907      	bls.n	80026b6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e09e      	b.n	80027f4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80026b6:	2201      	movs	r2, #1
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	409a      	lsls	r2, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10d      	bne.n	80026e4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026d2:	68f9      	ldr	r1, [r7, #12]
 80026d4:	6809      	ldr	r1, [r1, #0]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	3318      	adds	r3, #24
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	440b      	add	r3, r1
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e00f      	b.n	8002704 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026ee:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026f4:	68f9      	ldr	r1, [r7, #12]
 80026f6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80026f8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	3318      	adds	r3, #24
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	440b      	add	r3, r1
 8002702:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6819      	ldr	r1, [r3, #0]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	3318      	adds	r3, #24
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	440b      	add	r3, r1
 8002714:	3304      	adds	r3, #4
 8002716:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	7d1b      	ldrb	r3, [r3, #20]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d111      	bne.n	8002744 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	3318      	adds	r3, #24
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	4413      	add	r3, r2
 800272c:	3304      	adds	r3, #4
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	6811      	ldr	r1, [r2, #0]
 8002734:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	3318      	adds	r3, #24
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	440b      	add	r3, r1
 8002740:	3304      	adds	r3, #4
 8002742:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3307      	adds	r3, #7
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	061a      	lsls	r2, r3, #24
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3306      	adds	r3, #6
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	041b      	lsls	r3, r3, #16
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3305      	adds	r3, #5
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	4313      	orrs	r3, r2
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	3204      	adds	r2, #4
 8002764:	7812      	ldrb	r2, [r2, #0]
 8002766:	4610      	mov	r0, r2
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	6811      	ldr	r1, [r2, #0]
 800276c:	ea43 0200 	orr.w	r2, r3, r0
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	440b      	add	r3, r1
 8002776:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800277a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3303      	adds	r3, #3
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	061a      	lsls	r2, r3, #24
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3302      	adds	r3, #2
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	041b      	lsls	r3, r3, #16
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3301      	adds	r3, #1
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	4313      	orrs	r3, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	7812      	ldrb	r2, [r2, #0]
 800279c:	4610      	mov	r0, r2
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	6811      	ldr	r1, [r2, #0]
 80027a2:	ea43 0200 	orr.w	r2, r3, r0
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	440b      	add	r3, r1
 80027ac:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80027b0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	3318      	adds	r3, #24
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	4413      	add	r3, r2
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	6811      	ldr	r1, [r2, #0]
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	3318      	adds	r3, #24
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	440b      	add	r3, r1
 80027d0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e00e      	b.n	80027f4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e006      	b.n	80027f4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
  }
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3724      	adds	r7, #36	@ 0x24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002812:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002814:	7afb      	ldrb	r3, [r7, #11]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d002      	beq.n	8002820 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800281a:	7afb      	ldrb	r3, [r7, #11]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d11d      	bne.n	800285c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	3301      	adds	r3, #1
 8002832:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	3301      	adds	r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3301      	adds	r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800285c:	68fb      	ldr	r3, [r7, #12]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800286a:	b480      	push	{r7}
 800286c:	b085      	sub	sp, #20
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3020 	ldrb.w	r3, [r3, #32]
 800287a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d002      	beq.n	8002888 <HAL_CAN_ActivateNotification+0x1e>
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d109      	bne.n	800289c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6959      	ldr	r1, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e006      	b.n	80028aa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
  }
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b08a      	sub	sp, #40	@ 0x28
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d07c      	beq.n	80029f6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d023      	beq.n	800294e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2201      	movs	r2, #1
 800290c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f983 	bl	8002c24 <HAL_CAN_TxMailbox0CompleteCallback>
 800291e:	e016      	b.n	800294e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b00      	cmp	r3, #0
 8002928:	d004      	beq.n	8002934 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002930:	627b      	str	r3, [r7, #36]	@ 0x24
 8002932:	e00c      	b.n	800294e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d004      	beq.n	8002948 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002944:	627b      	str	r3, [r7, #36]	@ 0x24
 8002946:	e002      	b.n	800294e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f989 	bl	8002c60 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d024      	beq.n	80029a2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002960:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f963 	bl	8002c38 <HAL_CAN_TxMailbox1CompleteCallback>
 8002972:	e016      	b.n	80029a2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800297a:	2b00      	cmp	r3, #0
 800297c:	d004      	beq.n	8002988 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24
 8002986:	e00c      	b.n	80029a2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800298e:	2b00      	cmp	r3, #0
 8002990:	d004      	beq.n	800299c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002998:	627b      	str	r3, [r7, #36]	@ 0x24
 800299a:	e002      	b.n	80029a2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f969 	bl	8002c74 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d024      	beq.n	80029f6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80029b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f943 	bl	8002c4c <HAL_CAN_TxMailbox2CompleteCallback>
 80029c6:	e016      	b.n	80029f6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d004      	beq.n	80029dc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029da:	e00c      	b.n	80029f6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d004      	beq.n	80029f0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ee:	e002      	b.n	80029f6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f949 	bl	8002c88 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00c      	beq.n	8002a1a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2210      	movs	r2, #16
 8002a18:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00b      	beq.n	8002a3c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2208      	movs	r2, #8
 8002a34:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f93a 	bl	8002cb0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f921 	bl	8002c9c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00c      	beq.n	8002a7e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d007      	beq.n	8002a7e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2210      	movs	r2, #16
 8002a7c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00b      	beq.n	8002aa0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d006      	beq.n	8002aa0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2208      	movs	r2, #8
 8002a98:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f91c 	bl	8002cd8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f903 	bl	8002cc4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2210      	movs	r2, #16
 8002ad8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f906 	bl	8002cec <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2208      	movs	r2, #8
 8002afa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f8ff 	bl	8002d00 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d07b      	beq.n	8002c04 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d072      	beq.n	8002bfc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	f043 0304 	orr.w	r3, r3, #4
 8002b68:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d043      	beq.n	8002bfc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d03e      	beq.n	8002bfc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b84:	2b60      	cmp	r3, #96	@ 0x60
 8002b86:	d02b      	beq.n	8002be0 <HAL_CAN_IRQHandler+0x32a>
 8002b88:	2b60      	cmp	r3, #96	@ 0x60
 8002b8a:	d82e      	bhi.n	8002bea <HAL_CAN_IRQHandler+0x334>
 8002b8c:	2b50      	cmp	r3, #80	@ 0x50
 8002b8e:	d022      	beq.n	8002bd6 <HAL_CAN_IRQHandler+0x320>
 8002b90:	2b50      	cmp	r3, #80	@ 0x50
 8002b92:	d82a      	bhi.n	8002bea <HAL_CAN_IRQHandler+0x334>
 8002b94:	2b40      	cmp	r3, #64	@ 0x40
 8002b96:	d019      	beq.n	8002bcc <HAL_CAN_IRQHandler+0x316>
 8002b98:	2b40      	cmp	r3, #64	@ 0x40
 8002b9a:	d826      	bhi.n	8002bea <HAL_CAN_IRQHandler+0x334>
 8002b9c:	2b30      	cmp	r3, #48	@ 0x30
 8002b9e:	d010      	beq.n	8002bc2 <HAL_CAN_IRQHandler+0x30c>
 8002ba0:	2b30      	cmp	r3, #48	@ 0x30
 8002ba2:	d822      	bhi.n	8002bea <HAL_CAN_IRQHandler+0x334>
 8002ba4:	2b10      	cmp	r3, #16
 8002ba6:	d002      	beq.n	8002bae <HAL_CAN_IRQHandler+0x2f8>
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d005      	beq.n	8002bb8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002bac:	e01d      	b.n	8002bea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb0:	f043 0308 	orr.w	r3, r3, #8
 8002bb4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bb6:	e019      	b.n	8002bec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bba:	f043 0310 	orr.w	r3, r3, #16
 8002bbe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bc0:	e014      	b.n	8002bec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc4:	f043 0320 	orr.w	r3, r3, #32
 8002bc8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bca:	e00f      	b.n	8002bec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bd2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bd4:	e00a      	b.n	8002bec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002bde:	e005      	b.n	8002bec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002be8:	e000      	b.n	8002bec <HAL_CAN_IRQHandler+0x336>
            break;
 8002bea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002bfa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2204      	movs	r2, #4
 8002c02:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f87c 	bl	8002d14 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	3728      	adds	r7, #40	@ 0x28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d38:	4b0c      	ldr	r3, [pc, #48]	@ (8002d6c <__NVIC_SetPriorityGrouping+0x44>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d44:	4013      	ands	r3, r2
 8002d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d5a:	4a04      	ldr	r2, [pc, #16]	@ (8002d6c <__NVIC_SetPriorityGrouping+0x44>)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	60d3      	str	r3, [r2, #12]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d74:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <__NVIC_GetPriorityGrouping+0x18>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	f003 0307 	and.w	r3, r3, #7
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	db0b      	blt.n	8002db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	f003 021f 	and.w	r2, r3, #31
 8002da4:	4907      	ldr	r1, [pc, #28]	@ (8002dc4 <__NVIC_EnableIRQ+0x38>)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	2001      	movs	r0, #1
 8002dae:	fa00 f202 	lsl.w	r2, r0, r2
 8002db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	e000e100 	.word	0xe000e100

08002dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	6039      	str	r1, [r7, #0]
 8002dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	db0a      	blt.n	8002df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	490c      	ldr	r1, [pc, #48]	@ (8002e14 <__NVIC_SetPriority+0x4c>)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	0112      	lsls	r2, r2, #4
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	440b      	add	r3, r1
 8002dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df0:	e00a      	b.n	8002e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	4908      	ldr	r1, [pc, #32]	@ (8002e18 <__NVIC_SetPriority+0x50>)
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	3b04      	subs	r3, #4
 8002e00:	0112      	lsls	r2, r2, #4
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	440b      	add	r3, r1
 8002e06:	761a      	strb	r2, [r3, #24]
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000e100 	.word	0xe000e100
 8002e18:	e000ed00 	.word	0xe000ed00

08002e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b089      	sub	sp, #36	@ 0x24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f1c3 0307 	rsb	r3, r3, #7
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	bf28      	it	cs
 8002e3a:	2304      	movcs	r3, #4
 8002e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3304      	adds	r3, #4
 8002e42:	2b06      	cmp	r3, #6
 8002e44:	d902      	bls.n	8002e4c <NVIC_EncodePriority+0x30>
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3b03      	subs	r3, #3
 8002e4a:	e000      	b.n	8002e4e <NVIC_EncodePriority+0x32>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e50:	f04f 32ff 	mov.w	r2, #4294967295
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43da      	mvns	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	401a      	ands	r2, r3
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e64:	f04f 31ff 	mov.w	r1, #4294967295
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6e:	43d9      	mvns	r1, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e74:	4313      	orrs	r3, r2
         );
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3724      	adds	r7, #36	@ 0x24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e94:	d301      	bcc.n	8002e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e96:	2301      	movs	r3, #1
 8002e98:	e00f      	b.n	8002eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec4 <SysTick_Config+0x40>)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ea2:	210f      	movs	r1, #15
 8002ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea8:	f7ff ff8e 	bl	8002dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eac:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <SysTick_Config+0x40>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eb2:	4b04      	ldr	r3, [pc, #16]	@ (8002ec4 <SysTick_Config+0x40>)
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	e000e010 	.word	0xe000e010

08002ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ff29 	bl	8002d28 <__NVIC_SetPriorityGrouping>
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b086      	sub	sp, #24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef0:	f7ff ff3e 	bl	8002d70 <__NVIC_GetPriorityGrouping>
 8002ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	6978      	ldr	r0, [r7, #20]
 8002efc:	f7ff ff8e 	bl	8002e1c <NVIC_EncodePriority>
 8002f00:	4602      	mov	r2, r0
 8002f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff5d 	bl	8002dc8 <__NVIC_SetPriority>
}
 8002f0e:	bf00      	nop
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff31 	bl	8002d8c <__NVIC_EnableIRQ>
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff ffa2 	bl	8002e84 <SysTick_Config>
 8002f40:	4603      	mov	r3, r0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f58:	f7fe ff96 	bl	8001e88 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e099      	b.n	800309c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f88:	e00f      	b.n	8002faa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f8a:	f7fe ff7d 	bl	8001e88 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b05      	cmp	r3, #5
 8002f96:	d908      	bls.n	8002faa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e078      	b.n	800309c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e8      	bne.n	8002f8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4b38      	ldr	r3, [pc, #224]	@ (80030a4 <HAL_DMA_Init+0x158>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003000:	2b04      	cmp	r3, #4
 8003002:	d107      	bne.n	8003014 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300c:	4313      	orrs	r3, r2
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f023 0307 	bic.w	r3, r3, #7
 800302a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303a:	2b04      	cmp	r3, #4
 800303c:	d117      	bne.n	800306e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00e      	beq.n	800306e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fb1b 	bl	800368c <DMA_CheckFifoParam>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2240      	movs	r2, #64	@ 0x40
 8003060:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800306a:	2301      	movs	r3, #1
 800306c:	e016      	b.n	800309c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fad2 	bl	8003620 <DMA_CalcBaseAndBitshift>
 800307c:	4603      	mov	r3, r0
 800307e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003084:	223f      	movs	r2, #63	@ 0x3f
 8003086:	409a      	lsls	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	e010803f 	.word	0xe010803f

080030a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_DMA_Start_IT+0x26>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e040      	b.n	8003150 <HAL_DMA_Start_IT+0xa8>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d12f      	bne.n	8003142 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2202      	movs	r2, #2
 80030e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fa64 	bl	80035c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003100:	223f      	movs	r2, #63	@ 0x3f
 8003102:	409a      	lsls	r2, r3
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0216 	orr.w	r2, r2, #22
 8003116:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0208 	orr.w	r2, r2, #8
 800312e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	e005      	b.n	800314e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800314a:	2302      	movs	r3, #2
 800314c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800314e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003164:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003166:	f7fe fe8f 	bl	8001e88 <HAL_GetTick>
 800316a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d008      	beq.n	800318a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2280      	movs	r2, #128	@ 0x80
 800317c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e052      	b.n	8003230 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0216 	bic.w	r2, r2, #22
 8003198:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <HAL_DMA_Abort+0x62>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0208 	bic.w	r2, r2, #8
 80031c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0201 	bic.w	r2, r2, #1
 80031d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031da:	e013      	b.n	8003204 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031dc:	f7fe fe54 	bl	8001e88 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b05      	cmp	r3, #5
 80031e8:	d90c      	bls.n	8003204 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2203      	movs	r2, #3
 80031f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e015      	b.n	8003230 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e4      	bne.n	80031dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003216:	223f      	movs	r2, #63	@ 0x3f
 8003218:	409a      	lsls	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d004      	beq.n	8003256 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2280      	movs	r2, #128	@ 0x80
 8003250:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e00c      	b.n	8003270 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2205      	movs	r2, #5
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003288:	4b8e      	ldr	r3, [pc, #568]	@ (80034c4 <HAL_DMA_IRQHandler+0x248>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a8e      	ldr	r2, [pc, #568]	@ (80034c8 <HAL_DMA_IRQHandler+0x24c>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	0a9b      	lsrs	r3, r3, #10
 8003294:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a6:	2208      	movs	r2, #8
 80032a8:	409a      	lsls	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01a      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d013      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0204 	bic.w	r2, r2, #4
 80032ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d4:	2208      	movs	r2, #8
 80032d6:	409a      	lsls	r2, r3
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e0:	f043 0201 	orr.w	r2, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ec:	2201      	movs	r2, #1
 80032ee:	409a      	lsls	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d012      	beq.n	800331e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330a:	2201      	movs	r2, #1
 800330c:	409a      	lsls	r2, r3
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003316:	f043 0202 	orr.w	r2, r3, #2
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003322:	2204      	movs	r2, #4
 8003324:	409a      	lsls	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4013      	ands	r3, r2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d012      	beq.n	8003354 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00b      	beq.n	8003354 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003340:	2204      	movs	r2, #4
 8003342:	409a      	lsls	r2, r3
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334c:	f043 0204 	orr.w	r2, r3, #4
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003358:	2210      	movs	r2, #16
 800335a:	409a      	lsls	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d043      	beq.n	80033ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d03c      	beq.n	80033ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003376:	2210      	movs	r2, #16
 8003378:	409a      	lsls	r2, r3
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d018      	beq.n	80033be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d108      	bne.n	80033ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d024      	beq.n	80033ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	4798      	blx	r3
 80033aa:	e01f      	b.n	80033ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01b      	beq.n	80033ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	4798      	blx	r3
 80033bc:	e016      	b.n	80033ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d107      	bne.n	80033dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0208 	bic.w	r2, r2, #8
 80033da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f0:	2220      	movs	r2, #32
 80033f2:	409a      	lsls	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 808f 	beq.w	800351c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8087 	beq.w	800351c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003412:	2220      	movs	r2, #32
 8003414:	409a      	lsls	r2, r3
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b05      	cmp	r3, #5
 8003424:	d136      	bne.n	8003494 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0216 	bic.w	r2, r2, #22
 8003434:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003444:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d103      	bne.n	8003456 <HAL_DMA_IRQHandler+0x1da>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003452:	2b00      	cmp	r3, #0
 8003454:	d007      	beq.n	8003466 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0208 	bic.w	r2, r2, #8
 8003464:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346a:	223f      	movs	r2, #63	@ 0x3f
 800346c:	409a      	lsls	r2, r3
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003486:	2b00      	cmp	r3, #0
 8003488:	d07e      	beq.n	8003588 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	4798      	blx	r3
        }
        return;
 8003492:	e079      	b.n	8003588 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d01d      	beq.n	80034de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10d      	bne.n	80034cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d031      	beq.n	800351c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	4798      	blx	r3
 80034c0:	e02c      	b.n	800351c <HAL_DMA_IRQHandler+0x2a0>
 80034c2:	bf00      	nop
 80034c4:	20000000 	.word	0x20000000
 80034c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d023      	beq.n	800351c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
 80034dc:	e01e      	b.n	800351c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10f      	bne.n	800350c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0210 	bic.w	r2, r2, #16
 80034fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003520:	2b00      	cmp	r3, #0
 8003522:	d032      	beq.n	800358a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d022      	beq.n	8003576 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2205      	movs	r2, #5
 8003534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	3301      	adds	r3, #1
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	429a      	cmp	r2, r3
 8003552:	d307      	bcc.n	8003564 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f2      	bne.n	8003548 <HAL_DMA_IRQHandler+0x2cc>
 8003562:	e000      	b.n	8003566 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003564:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4798      	blx	r3
 8003586:	e000      	b.n	800358a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003588:	bf00      	nop
    }
  }
}
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800359e:	b2db      	uxtb	r3, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80035e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b40      	cmp	r3, #64	@ 0x40
 80035f0:	d108      	bne.n	8003604 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003602:	e007      	b.n	8003614 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	60da      	str	r2, [r3, #12]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	3b10      	subs	r3, #16
 8003630:	4a14      	ldr	r2, [pc, #80]	@ (8003684 <DMA_CalcBaseAndBitshift+0x64>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	091b      	lsrs	r3, r3, #4
 8003638:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800363a:	4a13      	ldr	r2, [pc, #76]	@ (8003688 <DMA_CalcBaseAndBitshift+0x68>)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4413      	add	r3, r2
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b03      	cmp	r3, #3
 800364c:	d909      	bls.n	8003662 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003656:	f023 0303 	bic.w	r3, r3, #3
 800365a:	1d1a      	adds	r2, r3, #4
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003660:	e007      	b.n	8003672 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800366a:	f023 0303 	bic.w	r3, r3, #3
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	aaaaaaab 	.word	0xaaaaaaab
 8003688:	0800cd4c 	.word	0x0800cd4c

0800368c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d11f      	bne.n	80036e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d856      	bhi.n	800375a <DMA_CheckFifoParam+0xce>
 80036ac:	a201      	add	r2, pc, #4	@ (adr r2, 80036b4 <DMA_CheckFifoParam+0x28>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	080036c5 	.word	0x080036c5
 80036b8:	080036d7 	.word	0x080036d7
 80036bc:	080036c5 	.word	0x080036c5
 80036c0:	0800375b 	.word	0x0800375b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d046      	beq.n	800375e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d4:	e043      	b.n	800375e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036de:	d140      	bne.n	8003762 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e4:	e03d      	b.n	8003762 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ee:	d121      	bne.n	8003734 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d837      	bhi.n	8003766 <DMA_CheckFifoParam+0xda>
 80036f6:	a201      	add	r2, pc, #4	@ (adr r2, 80036fc <DMA_CheckFifoParam+0x70>)
 80036f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fc:	0800370d 	.word	0x0800370d
 8003700:	08003713 	.word	0x08003713
 8003704:	0800370d 	.word	0x0800370d
 8003708:	08003725 	.word	0x08003725
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      break;
 8003710:	e030      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003716:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d025      	beq.n	800376a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003722:	e022      	b.n	800376a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003728:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800372c:	d11f      	bne.n	800376e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003732:	e01c      	b.n	800376e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d903      	bls.n	8003742 <DMA_CheckFifoParam+0xb6>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d003      	beq.n	8003748 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003740:	e018      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
      break;
 8003746:	e015      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00e      	beq.n	8003772 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
      break;
 8003758:	e00b      	b.n	8003772 <DMA_CheckFifoParam+0xe6>
      break;
 800375a:	bf00      	nop
 800375c:	e00a      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      break;
 800375e:	bf00      	nop
 8003760:	e008      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      break;
 8003762:	bf00      	nop
 8003764:	e006      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      break;
 8003766:	bf00      	nop
 8003768:	e004      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      break;
 800376a:	bf00      	nop
 800376c:	e002      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      break;   
 800376e:	bf00      	nop
 8003770:	e000      	b.n	8003774 <DMA_CheckFifoParam+0xe8>
      break;
 8003772:	bf00      	nop
    }
  } 
  
  return status; 
 8003774:	7bfb      	ldrb	r3, [r7, #15]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop

08003784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003784:	b480      	push	{r7}
 8003786:	b089      	sub	sp, #36	@ 0x24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003792:	2300      	movs	r3, #0
 8003794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003796:	2300      	movs	r3, #0
 8003798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	e165      	b.n	8003a6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037a0:	2201      	movs	r2, #1
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	f040 8154 	bne.w	8003a66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d005      	beq.n	80037d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d130      	bne.n	8003838 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	2203      	movs	r2, #3
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800380c:	2201      	movs	r2, #1
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f003 0201 	and.w	r2, r3, #1
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4313      	orrs	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	2b03      	cmp	r3, #3
 8003842:	d017      	beq.n	8003874 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	2203      	movs	r2, #3
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d123      	bne.n	80038c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	08da      	lsrs	r2, r3, #3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3208      	adds	r2, #8
 8003888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800388c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	220f      	movs	r2, #15
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	08da      	lsrs	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3208      	adds	r2, #8
 80038c2:	69b9      	ldr	r1, [r7, #24]
 80038c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	2203      	movs	r2, #3
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0203 	and.w	r2, r3, #3
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80ae 	beq.w	8003a66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	4b5d      	ldr	r3, [pc, #372]	@ (8003a84 <HAL_GPIO_Init+0x300>)
 8003910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003912:	4a5c      	ldr	r2, [pc, #368]	@ (8003a84 <HAL_GPIO_Init+0x300>)
 8003914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003918:	6453      	str	r3, [r2, #68]	@ 0x44
 800391a:	4b5a      	ldr	r3, [pc, #360]	@ (8003a84 <HAL_GPIO_Init+0x300>)
 800391c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003926:	4a58      	ldr	r2, [pc, #352]	@ (8003a88 <HAL_GPIO_Init+0x304>)
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	089b      	lsrs	r3, r3, #2
 800392c:	3302      	adds	r3, #2
 800392e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	220f      	movs	r2, #15
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a4f      	ldr	r2, [pc, #316]	@ (8003a8c <HAL_GPIO_Init+0x308>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d025      	beq.n	800399e <HAL_GPIO_Init+0x21a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a4e      	ldr	r2, [pc, #312]	@ (8003a90 <HAL_GPIO_Init+0x30c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01f      	beq.n	800399a <HAL_GPIO_Init+0x216>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a4d      	ldr	r2, [pc, #308]	@ (8003a94 <HAL_GPIO_Init+0x310>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d019      	beq.n	8003996 <HAL_GPIO_Init+0x212>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a4c      	ldr	r2, [pc, #304]	@ (8003a98 <HAL_GPIO_Init+0x314>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d013      	beq.n	8003992 <HAL_GPIO_Init+0x20e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a4b      	ldr	r2, [pc, #300]	@ (8003a9c <HAL_GPIO_Init+0x318>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00d      	beq.n	800398e <HAL_GPIO_Init+0x20a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a4a      	ldr	r2, [pc, #296]	@ (8003aa0 <HAL_GPIO_Init+0x31c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d007      	beq.n	800398a <HAL_GPIO_Init+0x206>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a49      	ldr	r2, [pc, #292]	@ (8003aa4 <HAL_GPIO_Init+0x320>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d101      	bne.n	8003986 <HAL_GPIO_Init+0x202>
 8003982:	2306      	movs	r3, #6
 8003984:	e00c      	b.n	80039a0 <HAL_GPIO_Init+0x21c>
 8003986:	2307      	movs	r3, #7
 8003988:	e00a      	b.n	80039a0 <HAL_GPIO_Init+0x21c>
 800398a:	2305      	movs	r3, #5
 800398c:	e008      	b.n	80039a0 <HAL_GPIO_Init+0x21c>
 800398e:	2304      	movs	r3, #4
 8003990:	e006      	b.n	80039a0 <HAL_GPIO_Init+0x21c>
 8003992:	2303      	movs	r3, #3
 8003994:	e004      	b.n	80039a0 <HAL_GPIO_Init+0x21c>
 8003996:	2302      	movs	r3, #2
 8003998:	e002      	b.n	80039a0 <HAL_GPIO_Init+0x21c>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <HAL_GPIO_Init+0x21c>
 800399e:	2300      	movs	r3, #0
 80039a0:	69fa      	ldr	r2, [r7, #28]
 80039a2:	f002 0203 	and.w	r2, r2, #3
 80039a6:	0092      	lsls	r2, r2, #2
 80039a8:	4093      	lsls	r3, r2
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039b0:	4935      	ldr	r1, [pc, #212]	@ (8003a88 <HAL_GPIO_Init+0x304>)
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	089b      	lsrs	r3, r3, #2
 80039b6:	3302      	adds	r3, #2
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039be:	4b3a      	ldr	r3, [pc, #232]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4013      	ands	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039e2:	4a31      	ldr	r2, [pc, #196]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039e8:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a0c:	4a26      	ldr	r2, [pc, #152]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a12:	4b25      	ldr	r3, [pc, #148]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a36:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a60:	4a11      	ldr	r2, [pc, #68]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	61fb      	str	r3, [r7, #28]
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	2b0f      	cmp	r3, #15
 8003a70:	f67f ae96 	bls.w	80037a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop
 8003a78:	3724      	adds	r7, #36	@ 0x24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40013800 	.word	0x40013800
 8003a8c:	40020000 	.word	0x40020000
 8003a90:	40020400 	.word	0x40020400
 8003a94:	40020800 	.word	0x40020800
 8003a98:	40020c00 	.word	0x40020c00
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	40021400 	.word	0x40021400
 8003aa4:	40021800 	.word	0x40021800
 8003aa8:	40013c00 	.word	0x40013c00

08003aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	807b      	strh	r3, [r7, #2]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003abc:	787b      	ldrb	r3, [r7, #1]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ac2:	887a      	ldrh	r2, [r7, #2]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ac8:	e003      	b.n	8003ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aca:	887b      	ldrh	r3, [r7, #2]
 8003acc:	041a      	lsls	r2, r3, #16
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	619a      	str	r2, [r3, #24]
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
	...

08003ae0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e12b      	b.n	8003d4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fd fd18 	bl	800153c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2224      	movs	r2, #36	@ 0x24
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0201 	bic.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b44:	f002 fe4a 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 8003b48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4a81      	ldr	r2, [pc, #516]	@ (8003d54 <HAL_I2C_Init+0x274>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d807      	bhi.n	8003b64 <HAL_I2C_Init+0x84>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4a80      	ldr	r2, [pc, #512]	@ (8003d58 <HAL_I2C_Init+0x278>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	bf94      	ite	ls
 8003b5c:	2301      	movls	r3, #1
 8003b5e:	2300      	movhi	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	e006      	b.n	8003b72 <HAL_I2C_Init+0x92>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4a7d      	ldr	r2, [pc, #500]	@ (8003d5c <HAL_I2C_Init+0x27c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	bf94      	ite	ls
 8003b6c:	2301      	movls	r3, #1
 8003b6e:	2300      	movhi	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e0e7      	b.n	8003d4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4a78      	ldr	r2, [pc, #480]	@ (8003d60 <HAL_I2C_Init+0x280>)
 8003b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b82:	0c9b      	lsrs	r3, r3, #18
 8003b84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4a6a      	ldr	r2, [pc, #424]	@ (8003d54 <HAL_I2C_Init+0x274>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d802      	bhi.n	8003bb4 <HAL_I2C_Init+0xd4>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	e009      	b.n	8003bc8 <HAL_I2C_Init+0xe8>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bba:	fb02 f303 	mul.w	r3, r2, r3
 8003bbe:	4a69      	ldr	r2, [pc, #420]	@ (8003d64 <HAL_I2C_Init+0x284>)
 8003bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc4:	099b      	lsrs	r3, r3, #6
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bda:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	495c      	ldr	r1, [pc, #368]	@ (8003d54 <HAL_I2C_Init+0x274>)
 8003be4:	428b      	cmp	r3, r1
 8003be6:	d819      	bhi.n	8003c1c <HAL_I2C_Init+0x13c>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1e59      	subs	r1, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bf6:	1c59      	adds	r1, r3, #1
 8003bf8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003bfc:	400b      	ands	r3, r1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_I2C_Init+0x138>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1e59      	subs	r1, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c10:	3301      	adds	r3, #1
 8003c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c16:	e051      	b.n	8003cbc <HAL_I2C_Init+0x1dc>
 8003c18:	2304      	movs	r3, #4
 8003c1a:	e04f      	b.n	8003cbc <HAL_I2C_Init+0x1dc>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d111      	bne.n	8003c48 <HAL_I2C_Init+0x168>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1e58      	subs	r0, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	440b      	add	r3, r1
 8003c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c36:	3301      	adds	r3, #1
 8003c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bf0c      	ite	eq
 8003c40:	2301      	moveq	r3, #1
 8003c42:	2300      	movne	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	e012      	b.n	8003c6e <HAL_I2C_Init+0x18e>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1e58      	subs	r0, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	0099      	lsls	r1, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_I2C_Init+0x196>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e022      	b.n	8003cbc <HAL_I2C_Init+0x1dc>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10e      	bne.n	8003c9c <HAL_I2C_Init+0x1bc>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1e58      	subs	r0, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6859      	ldr	r1, [r3, #4]
 8003c86:	460b      	mov	r3, r1
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	440b      	add	r3, r1
 8003c8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c90:	3301      	adds	r3, #1
 8003c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c9a:	e00f      	b.n	8003cbc <HAL_I2C_Init+0x1dc>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1e58      	subs	r0, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	0099      	lsls	r1, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	6809      	ldr	r1, [r1, #0]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69da      	ldr	r2, [r3, #28]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003cea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6911      	ldr	r1, [r2, #16]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68d2      	ldr	r2, [r2, #12]
 8003cf6:	4311      	orrs	r1, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	000186a0 	.word	0x000186a0
 8003d58:	001e847f 	.word	0x001e847f
 8003d5c:	003d08ff 	.word	0x003d08ff
 8003d60:	431bde83 	.word	0x431bde83
 8003d64:	10624dd3 	.word	0x10624dd3

08003d68 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08a      	sub	sp, #40	@ 0x28
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	4608      	mov	r0, r1
 8003d72:	4611      	mov	r1, r2
 8003d74:	461a      	mov	r2, r3
 8003d76:	4603      	mov	r3, r0
 8003d78:	817b      	strh	r3, [r7, #10]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	813b      	strh	r3, [r7, #8]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d86:	f7fe f87f 	bl	8001e88 <HAL_GetTick>
 8003d8a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	f040 8145 	bne.w	8004024 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d9a:	4b9d      	ldr	r3, [pc, #628]	@ (8004010 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	08db      	lsrs	r3, r3, #3
 8003da0:	4a9c      	ldr	r2, [pc, #624]	@ (8004014 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	0a1a      	lsrs	r2, r3, #8
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	009a      	lsls	r2, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d116      	bne.n	8003dee <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e11b      	b.n	8004026 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d0db      	beq.n	8003db4 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_I2C_Mem_Write_DMA+0xa2>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e10d      	b.n	8004026 <HAL_I2C_Mem_Write_DMA+0x2be>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d007      	beq.n	8003e30 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2221      	movs	r2, #33	@ 0x21
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2240      	movs	r2, #64	@ 0x40
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4a6a      	ldr	r2, [pc, #424]	@ (8004018 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8003e70:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003e72:	897a      	ldrh	r2, [r7, #10]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003e78:	893a      	ldrh	r2, [r7, #8]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003e7e:	88fa      	ldrh	r2, [r7, #6]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 80a9 	beq.w	8003fe6 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d02a      	beq.n	8003ef2 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea0:	4a5e      	ldr	r2, [pc, #376]	@ (800401c <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8003ea2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea8:	4a5d      	ldr	r2, [pc, #372]	@ (8004020 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8003eaa:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb8:	2200      	movs	r2, #0
 8003eba:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec8:	2200      	movs	r2, #0
 8003eca:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3310      	adds	r3, #16
 8003edc:	461a      	mov	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee2:	f7ff f8e1 	bl	80030a8 <HAL_DMA_Start_IT>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003eea:	7efb      	ldrb	r3, [r7, #27]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d166      	bne.n	8003fbe <HAL_I2C_Mem_Write_DMA+0x256>
 8003ef0:	e013      	b.n	8003f1a <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e085      	b.n	8004026 <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003f1a:	88f8      	ldrh	r0, [r7, #6]
 8003f1c:	893a      	ldrh	r2, [r7, #8]
 8003f1e:	8979      	ldrh	r1, [r7, #10]
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	9301      	str	r3, [sp, #4]
 8003f24:	2323      	movs	r3, #35	@ 0x23
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	4603      	mov	r3, r0
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f001 fdd2 	bl	8005ad4 <I2C_RequestMemoryWrite>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d022      	beq.n	8003f7c <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff f97c 	bl	8003238 <HAL_DMA_Abort_IT>
 8003f40:	4603      	mov	r3, r0
 8003f42:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f48:	2200      	movs	r2, #0
 8003f4a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f5a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e054      	b.n	8004026 <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fa8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fb8:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	e033      	b.n	8004026 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	f043 0210 	orr.w	r2, r3, #16
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e01f      	b.n	8004026 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e00b      	b.n	8004026 <HAL_I2C_Mem_Write_DMA+0x2be>
 800400e:	bf00      	nop
 8004010:	20000000 	.word	0x20000000
 8004014:	14f8b589 	.word	0x14f8b589
 8004018:	ffff0000 	.word	0xffff0000
 800401c:	08005dd1 	.word	0x08005dd1
 8004020:	08005f7b 	.word	0x08005f7b
    }
  }
  else
  {
    return HAL_BUSY;
 8004024:	2302      	movs	r3, #2
  }
}
 8004026:	4618      	mov	r0, r3
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop

08004030 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08c      	sub	sp, #48	@ 0x30
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	4608      	mov	r0, r1
 800403a:	4611      	mov	r1, r2
 800403c:	461a      	mov	r2, r3
 800403e:	4603      	mov	r3, r0
 8004040:	817b      	strh	r3, [r7, #10]
 8004042:	460b      	mov	r3, r1
 8004044:	813b      	strh	r3, [r7, #8]
 8004046:	4613      	mov	r3, r2
 8004048:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800404a:	f7fd ff1d 	bl	8001e88 <HAL_GetTick>
 800404e:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b20      	cmp	r3, #32
 800405e:	f040 8176 	bne.w	800434e <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004062:	4b95      	ldr	r3, [pc, #596]	@ (80042b8 <HAL_I2C_Mem_Read_DMA+0x288>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	08db      	lsrs	r3, r3, #3
 8004068:	4a94      	ldr	r2, [pc, #592]	@ (80042bc <HAL_I2C_Mem_Read_DMA+0x28c>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	0a1a      	lsrs	r2, r3, #8
 8004070:	4613      	mov	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	009a      	lsls	r2, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	3b01      	subs	r3, #1
 8004080:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d116      	bne.n	80040b6 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	f043 0220 	orr.w	r2, r3, #32
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e14c      	b.n	8004350 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d0db      	beq.n	800407c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_I2C_Mem_Read_DMA+0xa2>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e13e      	b.n	8004350 <HAL_I2C_Mem_Read_DMA+0x320>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d007      	beq.n	80040f8 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004106:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2222      	movs	r2, #34	@ 0x22
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2240      	movs	r2, #64	@ 0x40
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004122:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004128:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4a62      	ldr	r2, [pc, #392]	@ (80042c0 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004138:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800413a:	897a      	ldrh	r2, [r7, #10]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004140:	893a      	ldrh	r2, [r7, #8]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 80cc 	beq.w	80042f4 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004160:	2b00      	cmp	r3, #0
 8004162:	d02d      	beq.n	80041c0 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004168:	4a56      	ldr	r2, [pc, #344]	@ (80042c4 <HAL_I2C_Mem_Read_DMA+0x294>)
 800416a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004170:	4a55      	ldr	r2, [pc, #340]	@ (80042c8 <HAL_I2C_Mem_Read_DMA+0x298>)
 8004172:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004178:	2200      	movs	r2, #0
 800417a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004180:	2200      	movs	r2, #0
 8004182:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004188:	2200      	movs	r2, #0
 800418a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004190:	2200      	movs	r2, #0
 8004192:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3310      	adds	r3, #16
 800419e:	4619      	mov	r1, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	461a      	mov	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041aa:	f7fe ff7d 	bl	80030a8 <HAL_DMA_Start_IT>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80041b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f040 8087 	bne.w	80042cc <HAL_I2C_Mem_Read_DMA+0x29c>
 80041be:	e013      	b.n	80041e8 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0b3      	b.n	8004350 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80041e8:	88f8      	ldrh	r0, [r7, #6]
 80041ea:	893a      	ldrh	r2, [r7, #8]
 80041ec:	8979      	ldrh	r1, [r7, #10]
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	2323      	movs	r3, #35	@ 0x23
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	4603      	mov	r3, r0
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f001 fd01 	bl	8005c00 <I2C_RequestMemoryRead>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d023      	beq.n	800424c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff f815 	bl	8003238 <HAL_DMA_Abort_IT>
 800420e:	4603      	mov	r3, r0
 8004210:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004218:	2200      	movs	r2, #0
 800421a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800422a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0201 	bic.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e081      	b.n	8004350 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004250:	2b01      	cmp	r3, #1
 8004252:	d108      	bne.n	8004266 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	e007      	b.n	8004276 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004274:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004276:	2300      	movs	r3, #0
 8004278:	61bb      	str	r3, [r7, #24]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042a2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042b2:	605a      	str	r2, [r3, #4]
 80042b4:	e049      	b.n	800434a <HAL_I2C_Mem_Read_DMA+0x31a>
 80042b6:	bf00      	nop
 80042b8:	20000000 	.word	0x20000000
 80042bc:	14f8b589 	.word	0x14f8b589
 80042c0:	ffff0000 	.word	0xffff0000
 80042c4:	08005dd1 	.word	0x08005dd1
 80042c8:	08005f7b 	.word	0x08005f7b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	f043 0210 	orr.w	r2, r3, #16
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e02d      	b.n	8004350 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80042f4:	88f8      	ldrh	r0, [r7, #6]
 80042f6:	893a      	ldrh	r2, [r7, #8]
 80042f8:	8979      	ldrh	r1, [r7, #10]
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	9301      	str	r3, [sp, #4]
 80042fe:	2323      	movs	r3, #35	@ 0x23
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	4603      	mov	r3, r0
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f001 fc7b 	bl	8005c00 <I2C_RequestMemoryRead>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e01d      	b.n	8004350 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004338:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	e000      	b.n	8004350 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800434e:	2302      	movs	r3, #2
  }
}
 8004350:	4618      	mov	r0, r3
 8004352:	3728      	adds	r7, #40	@ 0x28
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004370:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004378:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004380:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	2b10      	cmp	r3, #16
 8004386:	d003      	beq.n	8004390 <HAL_I2C_EV_IRQHandler+0x38>
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	2b40      	cmp	r3, #64	@ 0x40
 800438c:	f040 80c1 	bne.w	8004512 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10d      	bne.n	80043c6 <HAL_I2C_EV_IRQHandler+0x6e>
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80043b0:	d003      	beq.n	80043ba <HAL_I2C_EV_IRQHandler+0x62>
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80043b8:	d101      	bne.n	80043be <HAL_I2C_EV_IRQHandler+0x66>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <HAL_I2C_EV_IRQHandler+0x68>
 80043be:	2300      	movs	r3, #0
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	f000 8132 	beq.w	800462a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00c      	beq.n	80043ea <HAL_I2C_EV_IRQHandler+0x92>
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	0a5b      	lsrs	r3, r3, #9
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d006      	beq.n	80043ea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f002 f82a 	bl	8006436 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fd5b 	bl	8004e9e <I2C_Master_SB>
 80043e8:	e092      	b.n	8004510 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	08db      	lsrs	r3, r3, #3
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_I2C_EV_IRQHandler+0xb2>
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	0a5b      	lsrs	r3, r3, #9
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fdd1 	bl	8004faa <I2C_Master_ADD10>
 8004408:	e082      	b.n	8004510 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d009      	beq.n	800442a <HAL_I2C_EV_IRQHandler+0xd2>
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	0a5b      	lsrs	r3, r3, #9
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fdeb 	bl	8004ffe <I2C_Master_ADDR>
 8004428:	e072      	b.n	8004510 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	089b      	lsrs	r3, r3, #2
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d03b      	beq.n	80044ae <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004444:	f000 80f3 	beq.w	800462e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	09db      	lsrs	r3, r3, #7
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00f      	beq.n	8004474 <HAL_I2C_EV_IRQHandler+0x11c>
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	0a9b      	lsrs	r3, r3, #10
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d009      	beq.n	8004474 <HAL_I2C_EV_IRQHandler+0x11c>
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	089b      	lsrs	r3, r3, #2
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d103      	bne.n	8004474 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f9d5 	bl	800481c <I2C_MasterTransmit_TXE>
 8004472:	e04d      	b.n	8004510 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	089b      	lsrs	r3, r3, #2
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80d6 	beq.w	800462e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	0a5b      	lsrs	r3, r3, #9
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 80cf 	beq.w	800462e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004490:	7bbb      	ldrb	r3, [r7, #14]
 8004492:	2b21      	cmp	r3, #33	@ 0x21
 8004494:	d103      	bne.n	800449e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fa5c 	bl	8004954 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800449c:	e0c7      	b.n	800462e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	2b40      	cmp	r3, #64	@ 0x40
 80044a2:	f040 80c4 	bne.w	800462e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 faca 	bl	8004a40 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044ac:	e0bf      	b.n	800462e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044bc:	f000 80b7 	beq.w	800462e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	099b      	lsrs	r3, r3, #6
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00f      	beq.n	80044ec <HAL_I2C_EV_IRQHandler+0x194>
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	0a9b      	lsrs	r3, r3, #10
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d009      	beq.n	80044ec <HAL_I2C_EV_IRQHandler+0x194>
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	089b      	lsrs	r3, r3, #2
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d103      	bne.n	80044ec <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fb3f 	bl	8004b68 <I2C_MasterReceive_RXNE>
 80044ea:	e011      	b.n	8004510 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 809a 	beq.w	800462e <HAL_I2C_EV_IRQHandler+0x2d6>
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	0a5b      	lsrs	r3, r3, #9
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8093 	beq.w	800462e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fbde 	bl	8004cca <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800450e:	e08e      	b.n	800462e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004510:	e08d      	b.n	800462e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d004      	beq.n	8004524 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	e007      	b.n	8004534 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	085b      	lsrs	r3, r3, #1
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d012      	beq.n	8004566 <HAL_I2C_EV_IRQHandler+0x20e>
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	0a5b      	lsrs	r3, r3, #9
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00c      	beq.n	8004566 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800455c:	69b9      	ldr	r1, [r7, #24]
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 ff9c 	bl	800549c <I2C_Slave_ADDR>
 8004564:	e066      	b.n	8004634 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	091b      	lsrs	r3, r3, #4
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <HAL_I2C_EV_IRQHandler+0x22e>
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	0a5b      	lsrs	r3, r3, #9
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 ffd6 	bl	8005530 <I2C_Slave_STOPF>
 8004584:	e056      	b.n	8004634 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004586:	7bbb      	ldrb	r3, [r7, #14]
 8004588:	2b21      	cmp	r3, #33	@ 0x21
 800458a:	d002      	beq.n	8004592 <HAL_I2C_EV_IRQHandler+0x23a>
 800458c:	7bbb      	ldrb	r3, [r7, #14]
 800458e:	2b29      	cmp	r3, #41	@ 0x29
 8004590:	d125      	bne.n	80045de <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	09db      	lsrs	r3, r3, #7
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00f      	beq.n	80045be <HAL_I2C_EV_IRQHandler+0x266>
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	0a9b      	lsrs	r3, r3, #10
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d009      	beq.n	80045be <HAL_I2C_EV_IRQHandler+0x266>
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	089b      	lsrs	r3, r3, #2
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d103      	bne.n	80045be <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 feb2 	bl	8005320 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045bc:	e039      	b.n	8004632 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	089b      	lsrs	r3, r3, #2
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d033      	beq.n	8004632 <HAL_I2C_EV_IRQHandler+0x2da>
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	0a5b      	lsrs	r3, r3, #9
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d02d      	beq.n	8004632 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fedf 	bl	800539a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045dc:	e029      	b.n	8004632 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	099b      	lsrs	r3, r3, #6
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00f      	beq.n	800460a <HAL_I2C_EV_IRQHandler+0x2b2>
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	0a9b      	lsrs	r3, r3, #10
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <HAL_I2C_EV_IRQHandler+0x2b2>
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	089b      	lsrs	r3, r3, #2
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d103      	bne.n	800460a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 feea 	bl	80053dc <I2C_SlaveReceive_RXNE>
 8004608:	e014      	b.n	8004634 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	089b      	lsrs	r3, r3, #2
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00e      	beq.n	8004634 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	0a5b      	lsrs	r3, r3, #9
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d008      	beq.n	8004634 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 ff18 	bl	8005458 <I2C_SlaveReceive_BTF>
 8004628:	e004      	b.n	8004634 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800462a:	bf00      	nop
 800462c:	e002      	b.n	8004634 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800462e:	bf00      	nop
 8004630:	e000      	b.n	8004634 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004632:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004634:	3720      	adds	r7, #32
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b08a      	sub	sp, #40	@ 0x28
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004652:	2300      	movs	r3, #0
 8004654:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800465c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	0a1b      	lsrs	r3, r3, #8
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00e      	beq.n	8004688 <HAL_I2C_ER_IRQHandler+0x4e>
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	0a1b      	lsrs	r3, r3, #8
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d008      	beq.n	8004688 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004686:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	0a5b      	lsrs	r3, r3, #9
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00e      	beq.n	80046b2 <HAL_I2C_ER_IRQHandler+0x78>
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	0a1b      	lsrs	r3, r3, #8
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	f043 0302 	orr.w	r3, r3, #2
 80046a6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80046b0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	0a9b      	lsrs	r3, r3, #10
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d03f      	beq.n	800473e <HAL_I2C_ER_IRQHandler+0x104>
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	0a1b      	lsrs	r3, r3, #8
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d039      	beq.n	800473e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80046ca:	7efb      	ldrb	r3, [r7, #27]
 80046cc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046dc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80046e4:	7ebb      	ldrb	r3, [r7, #26]
 80046e6:	2b20      	cmp	r3, #32
 80046e8:	d112      	bne.n	8004710 <HAL_I2C_ER_IRQHandler+0xd6>
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10f      	bne.n	8004710 <HAL_I2C_ER_IRQHandler+0xd6>
 80046f0:	7cfb      	ldrb	r3, [r7, #19]
 80046f2:	2b21      	cmp	r3, #33	@ 0x21
 80046f4:	d008      	beq.n	8004708 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80046f6:	7cfb      	ldrb	r3, [r7, #19]
 80046f8:	2b29      	cmp	r3, #41	@ 0x29
 80046fa:	d005      	beq.n	8004708 <HAL_I2C_ER_IRQHandler+0xce>
 80046fc:	7cfb      	ldrb	r3, [r7, #19]
 80046fe:	2b28      	cmp	r3, #40	@ 0x28
 8004700:	d106      	bne.n	8004710 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b21      	cmp	r3, #33	@ 0x21
 8004706:	d103      	bne.n	8004710 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f001 f841 	bl	8005790 <I2C_Slave_AF>
 800470e:	e016      	b.n	800473e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004718:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800471a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471c:	f043 0304 	orr.w	r3, r3, #4
 8004720:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004722:	7efb      	ldrb	r3, [r7, #27]
 8004724:	2b10      	cmp	r3, #16
 8004726:	d002      	beq.n	800472e <HAL_I2C_ER_IRQHandler+0xf4>
 8004728:	7efb      	ldrb	r3, [r7, #27]
 800472a:	2b40      	cmp	r3, #64	@ 0x40
 800472c:	d107      	bne.n	800473e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800473c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	0adb      	lsrs	r3, r3, #11
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00e      	beq.n	8004768 <HAL_I2C_ER_IRQHandler+0x12e>
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	0a1b      	lsrs	r3, r3, #8
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d008      	beq.n	8004768 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004758:	f043 0308 	orr.w	r3, r3, #8
 800475c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004766:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	2b00      	cmp	r3, #0
 800476c:	d008      	beq.n	8004780 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f001 f878 	bl	8005870 <I2C_ITError>
  }
}
 8004780:	bf00      	nop
 8004782:	3728      	adds	r7, #40	@ 0x28
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	460b      	mov	r3, r1
 80047e2:	70fb      	strb	r3, [r7, #3]
 80047e4:	4613      	mov	r3, r2
 80047e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800482a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004832:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004838:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800483e:	2b00      	cmp	r3, #0
 8004840:	d150      	bne.n	80048e4 <I2C_MasterTransmit_TXE+0xc8>
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	2b21      	cmp	r3, #33	@ 0x21
 8004846:	d14d      	bne.n	80048e4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b08      	cmp	r3, #8
 800484c:	d01d      	beq.n	800488a <I2C_MasterTransmit_TXE+0x6e>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b20      	cmp	r3, #32
 8004852:	d01a      	beq.n	800488a <I2C_MasterTransmit_TXE+0x6e>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800485a:	d016      	beq.n	800488a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800486a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2211      	movs	r2, #17
 8004870:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff ff80 	bl	8004788 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004888:	e060      	b.n	800494c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004898:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048a8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b40      	cmp	r3, #64	@ 0x40
 80048c2:	d107      	bne.n	80048d4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7fc fd3d 	bl	800134c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048d2:	e03b      	b.n	800494c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff ff53 	bl	8004788 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048e2:	e033      	b.n	800494c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	2b21      	cmp	r3, #33	@ 0x21
 80048e8:	d005      	beq.n	80048f6 <I2C_MasterTransmit_TXE+0xda>
 80048ea:	7bbb      	ldrb	r3, [r7, #14]
 80048ec:	2b40      	cmp	r3, #64	@ 0x40
 80048ee:	d12d      	bne.n	800494c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	2b22      	cmp	r3, #34	@ 0x22
 80048f4:	d12a      	bne.n	800494c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d108      	bne.n	8004912 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800490e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004910:	e01c      	b.n	800494c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b40      	cmp	r3, #64	@ 0x40
 800491c:	d103      	bne.n	8004926 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f88e 	bl	8004a40 <I2C_MemoryTransmit_TXE_BTF>
}
 8004924:	e012      	b.n	800494c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800494a:	e7ff      	b.n	800494c <I2C_MasterTransmit_TXE+0x130>
 800494c:	bf00      	nop
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004960:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b21      	cmp	r3, #33	@ 0x21
 800496c:	d164      	bne.n	8004a38 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d012      	beq.n	800499e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497c:	781a      	ldrb	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800499c:	e04c      	b.n	8004a38 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d01d      	beq.n	80049e0 <I2C_MasterTransmit_BTF+0x8c>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d01a      	beq.n	80049e0 <I2C_MasterTransmit_BTF+0x8c>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049b0:	d016      	beq.n	80049e0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049c0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2211      	movs	r2, #17
 80049c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff fed5 	bl	8004788 <HAL_I2C_MasterTxCpltCallback>
}
 80049de:	e02b      	b.n	8004a38 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049ee:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049fe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b40      	cmp	r3, #64	@ 0x40
 8004a18:	d107      	bne.n	8004a2a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fc fc92 	bl	800134c <HAL_I2C_MemTxCpltCallback>
}
 8004a28:	e006      	b.n	8004a38 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7ff fea8 	bl	8004788 <HAL_I2C_MasterTxCpltCallback>
}
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d11d      	bne.n	8004a94 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d10b      	bne.n	8004a78 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a70:	1c9a      	adds	r2, r3, #2
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004a76:	e073      	b.n	8004b60 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	121b      	asrs	r3, r3, #8
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004a92:	e065      	b.n	8004b60 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d10b      	bne.n	8004ab4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004ab2:	e055      	b.n	8004b60 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d151      	bne.n	8004b60 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	2b22      	cmp	r3, #34	@ 0x22
 8004ac0:	d10d      	bne.n	8004ade <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ad0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004adc:	e040      	b.n	8004b60 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d015      	beq.n	8004b14 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	2b21      	cmp	r3, #33	@ 0x21
 8004aec:	d112      	bne.n	8004b14 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af2:	781a      	ldrb	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004b12:	e025      	b.n	8004b60 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d120      	bne.n	8004b60 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	2b21      	cmp	r3, #33	@ 0x21
 8004b22:	d11d      	bne.n	8004b60 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b32:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b42:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fc fbf6 	bl	800134c <HAL_I2C_MemTxCpltCallback>
}
 8004b60:	bf00      	nop
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b22      	cmp	r3, #34	@ 0x22
 8004b7a:	f040 80a2 	bne.w	8004cc2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d921      	bls.n	8004bd0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	f040 8082 	bne.w	8004cc2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bcc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004bce:	e078      	b.n	8004cc2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d074      	beq.n	8004cc2 <I2C_MasterReceive_RXNE+0x15a>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d002      	beq.n	8004be4 <I2C_MasterReceive_RXNE+0x7c>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d16e      	bne.n	8004cc2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f001 fbc5 	bl	8006374 <I2C_WaitOnSTOPRequestThroughIT>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d142      	bne.n	8004c76 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bfe:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c0e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b40      	cmp	r3, #64	@ 0x40
 8004c48:	d10a      	bne.n	8004c60 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7fc fb87 	bl	800136c <HAL_I2C_MemRxCpltCallback>
}
 8004c5e:	e030      	b.n	8004cc2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2212      	movs	r2, #18
 8004c6c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff fd94 	bl	800479c <HAL_I2C_MasterRxCpltCallback>
}
 8004c74:	e025      	b.n	8004cc2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c84:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7fc fb65 	bl	800138c <HAL_I2C_ErrorCallback>
}
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d11b      	bne.n	8004d1a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cf0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004d18:	e0bd      	b.n	8004e96 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d129      	bne.n	8004d78 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d32:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d00a      	beq.n	8004d50 <I2C_MasterReceive_BTF+0x86>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d007      	beq.n	8004d50 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d4e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004d76:	e08e      	b.n	8004e96 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d176      	bne.n	8004e70 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d002      	beq.n	8004d8e <I2C_MasterReceive_BTF+0xc4>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2b10      	cmp	r3, #16
 8004d8c:	d108      	bne.n	8004da0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	e019      	b.n	8004dd4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d002      	beq.n	8004dac <I2C_MasterReceive_BTF+0xe2>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d108      	bne.n	8004dbe <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	e00a      	b.n	8004dd4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b10      	cmp	r3, #16
 8004dc2:	d007      	beq.n	8004dd4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dd2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004e2e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b40      	cmp	r3, #64	@ 0x40
 8004e42:	d10a      	bne.n	8004e5a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fc fa8a 	bl	800136c <HAL_I2C_MemRxCpltCallback>
}
 8004e58:	e01d      	b.n	8004e96 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2212      	movs	r2, #18
 8004e66:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff fc97 	bl	800479c <HAL_I2C_MasterRxCpltCallback>
}
 8004e6e:	e012      	b.n	8004e96 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004e96:	bf00      	nop
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b40      	cmp	r3, #64	@ 0x40
 8004eb0:	d117      	bne.n	8004ee2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004eca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004ecc:	e067      	b.n	8004f9e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	f043 0301 	orr.w	r3, r3, #1
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	611a      	str	r2, [r3, #16]
}
 8004ee0:	e05d      	b.n	8004f9e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eea:	d133      	bne.n	8004f54 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b21      	cmp	r3, #33	@ 0x21
 8004ef6:	d109      	bne.n	8004f0c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f08:	611a      	str	r2, [r3, #16]
 8004f0a:	e008      	b.n	8004f1e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f043 0301 	orr.w	r3, r3, #1
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d004      	beq.n	8004f30 <I2C_Master_SB+0x92>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d108      	bne.n	8004f42 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d032      	beq.n	8004f9e <I2C_Master_SB+0x100>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d02d      	beq.n	8004f9e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f50:	605a      	str	r2, [r3, #4]
}
 8004f52:	e024      	b.n	8004f9e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10e      	bne.n	8004f7a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	11db      	asrs	r3, r3, #7
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	f003 0306 	and.w	r3, r3, #6
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	f063 030f 	orn	r3, r3, #15
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	611a      	str	r2, [r3, #16]
}
 8004f78:	e011      	b.n	8004f9e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d10d      	bne.n	8004f9e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	11db      	asrs	r3, r3, #7
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	f003 0306 	and.w	r3, r3, #6
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	f063 030e 	orn	r3, r3, #14
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	611a      	str	r2, [r3, #16]
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d004      	beq.n	8004fd0 <I2C_Master_ADD10+0x26>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d108      	bne.n	8004fe2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00c      	beq.n	8004ff2 <I2C_Master_ADD10+0x48>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d007      	beq.n	8004ff2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ff0:	605a      	str	r2, [r3, #4]
  }
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b091      	sub	sp, #68	@ 0x44
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800500c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005014:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b22      	cmp	r3, #34	@ 0x22
 8005026:	f040 8169 	bne.w	80052fc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10f      	bne.n	8005052 <I2C_Master_ADDR+0x54>
 8005032:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005036:	2b40      	cmp	r3, #64	@ 0x40
 8005038:	d10b      	bne.n	8005052 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800503a:	2300      	movs	r3, #0
 800503c:	633b      	str	r3, [r7, #48]	@ 0x30
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	633b      	str	r3, [r7, #48]	@ 0x30
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	633b      	str	r3, [r7, #48]	@ 0x30
 800504e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005050:	e160      	b.n	8005314 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005056:	2b00      	cmp	r3, #0
 8005058:	d11d      	bne.n	8005096 <I2C_Master_ADDR+0x98>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005062:	d118      	bne.n	8005096 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005064:	2300      	movs	r3, #0
 8005066:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005088:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	651a      	str	r2, [r3, #80]	@ 0x50
 8005094:	e13e      	b.n	8005314 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d113      	bne.n	80050c8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050a0:	2300      	movs	r3, #0
 80050a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	e115      	b.n	80052f4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	f040 808a 	bne.w	80051e8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80050d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050da:	d137      	bne.n	800514c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050ea:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050fa:	d113      	bne.n	8005124 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800510a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800510c:	2300      	movs	r3, #0
 800510e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	627b      	str	r3, [r7, #36]	@ 0x24
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	e0e7      	b.n	80052f4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005124:	2300      	movs	r3, #0
 8005126:	623b      	str	r3, [r7, #32]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	623b      	str	r3, [r7, #32]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	623b      	str	r3, [r7, #32]
 8005138:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	e0d3      	b.n	80052f4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800514c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514e:	2b08      	cmp	r3, #8
 8005150:	d02e      	beq.n	80051b0 <I2C_Master_ADDR+0x1b2>
 8005152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005154:	2b20      	cmp	r3, #32
 8005156:	d02b      	beq.n	80051b0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800515a:	2b12      	cmp	r3, #18
 800515c:	d102      	bne.n	8005164 <I2C_Master_ADDR+0x166>
 800515e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005160:	2b01      	cmp	r3, #1
 8005162:	d125      	bne.n	80051b0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005166:	2b04      	cmp	r3, #4
 8005168:	d00e      	beq.n	8005188 <I2C_Master_ADDR+0x18a>
 800516a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516c:	2b02      	cmp	r3, #2
 800516e:	d00b      	beq.n	8005188 <I2C_Master_ADDR+0x18a>
 8005170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005172:	2b10      	cmp	r3, #16
 8005174:	d008      	beq.n	8005188 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	e007      	b.n	8005198 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005196:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005198:	2300      	movs	r3, #0
 800519a:	61fb      	str	r3, [r7, #28]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	61fb      	str	r3, [r7, #28]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	61fb      	str	r3, [r7, #28]
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	e0a1      	b.n	80052f4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051be:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051c0:	2300      	movs	r3, #0
 80051c2:	61bb      	str	r3, [r7, #24]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	61bb      	str	r3, [r7, #24]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	61bb      	str	r3, [r7, #24]
 80051d4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	e085      	b.n	80052f4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d14d      	bne.n	800528e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80051f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d016      	beq.n	8005226 <I2C_Master_ADDR+0x228>
 80051f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d013      	beq.n	8005226 <I2C_Master_ADDR+0x228>
 80051fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005200:	2b10      	cmp	r3, #16
 8005202:	d010      	beq.n	8005226 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005212:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	e007      	b.n	8005236 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005234:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005244:	d117      	bne.n	8005276 <I2C_Master_ADDR+0x278>
 8005246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005248:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800524c:	d00b      	beq.n	8005266 <I2C_Master_ADDR+0x268>
 800524e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005250:	2b01      	cmp	r3, #1
 8005252:	d008      	beq.n	8005266 <I2C_Master_ADDR+0x268>
 8005254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005256:	2b08      	cmp	r3, #8
 8005258:	d005      	beq.n	8005266 <I2C_Master_ADDR+0x268>
 800525a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525c:	2b10      	cmp	r3, #16
 800525e:	d002      	beq.n	8005266 <I2C_Master_ADDR+0x268>
 8005260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005262:	2b20      	cmp	r3, #32
 8005264:	d107      	bne.n	8005276 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005274:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	e032      	b.n	80052f4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800529c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052ac:	d117      	bne.n	80052de <I2C_Master_ADDR+0x2e0>
 80052ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80052b4:	d00b      	beq.n	80052ce <I2C_Master_ADDR+0x2d0>
 80052b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d008      	beq.n	80052ce <I2C_Master_ADDR+0x2d0>
 80052bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d005      	beq.n	80052ce <I2C_Master_ADDR+0x2d0>
 80052c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c4:	2b10      	cmp	r3, #16
 80052c6:	d002      	beq.n	80052ce <I2C_Master_ADDR+0x2d0>
 80052c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	d107      	bne.n	80052de <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80052dc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052de:	2300      	movs	r3, #0
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	613b      	str	r3, [r7, #16]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80052fa:	e00b      	b.n	8005314 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fc:	2300      	movs	r3, #0
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]
}
 8005312:	e7ff      	b.n	8005314 <I2C_Master_ADDR+0x316>
 8005314:	bf00      	nop
 8005316:	3744      	adds	r7, #68	@ 0x44
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800532e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d02b      	beq.n	8005392 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533e:	781a      	ldrb	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005354:	b29b      	uxth	r3, r3
 8005356:	3b01      	subs	r3, #1
 8005358:	b29a      	uxth	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d114      	bne.n	8005392 <I2C_SlaveTransmit_TXE+0x72>
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	2b29      	cmp	r3, #41	@ 0x29
 800536c:	d111      	bne.n	8005392 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800537c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2221      	movs	r2, #33	@ 0x21
 8005382:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2228      	movs	r2, #40	@ 0x28
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff fa0f 	bl	80047b0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005392:	bf00      	nop
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d011      	beq.n	80053d0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	781a      	ldrb	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d02c      	beq.n	8005450 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005412:	b29b      	uxth	r3, r3
 8005414:	3b01      	subs	r3, #1
 8005416:	b29a      	uxth	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d114      	bne.n	8005450 <I2C_SlaveReceive_RXNE+0x74>
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	2b2a      	cmp	r3, #42	@ 0x2a
 800542a:	d111      	bne.n	8005450 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800543a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2222      	movs	r2, #34	@ 0x22
 8005440:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2228      	movs	r2, #40	@ 0x28
 8005446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7ff f9ba 	bl	80047c4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005450:	bf00      	nop
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d012      	beq.n	8005490 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80054a6:	2300      	movs	r3, #0
 80054a8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80054b6:	2b28      	cmp	r3, #40	@ 0x28
 80054b8:	d127      	bne.n	800550a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054c8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	089b      	lsrs	r3, r3, #2
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80054d6:	2301      	movs	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	09db      	lsrs	r3, r3, #7
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d103      	bne.n	80054ee <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	81bb      	strh	r3, [r7, #12]
 80054ec:	e002      	b.n	80054f4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80054fc:	89ba      	ldrh	r2, [r7, #12]
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
 8005500:	4619      	mov	r1, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7ff f968 	bl	80047d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005508:	e00e      	b.n	8005528 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800550a:	2300      	movs	r3, #0
 800550c:	60bb      	str	r3, [r7, #8]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	60bb      	str	r3, [r7, #8]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005528:	bf00      	nop
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800553e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800554e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005550:	2300      	movs	r3, #0
 8005552:	60bb      	str	r3, [r7, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	60bb      	str	r3, [r7, #8]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800557c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005588:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800558c:	d172      	bne.n	8005674 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	2b22      	cmp	r3, #34	@ 0x22
 8005592:	d002      	beq.n	800559a <I2C_Slave_STOPF+0x6a>
 8005594:	7bfb      	ldrb	r3, [r7, #15]
 8005596:	2b2a      	cmp	r3, #42	@ 0x2a
 8005598:	d135      	bne.n	8005606 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b6:	f043 0204 	orr.w	r2, r3, #4
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fd ffdc 	bl	8003590 <HAL_DMA_GetState>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d049      	beq.n	8005672 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e2:	4a69      	ldr	r2, [pc, #420]	@ (8005788 <I2C_Slave_STOPF+0x258>)
 80055e4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fd fe24 	bl	8003238 <HAL_DMA_Abort_IT>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d03d      	beq.n	8005672 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005600:	4610      	mov	r0, r2
 8005602:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005604:	e035      	b.n	8005672 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	b29a      	uxth	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005618:	b29b      	uxth	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d005      	beq.n	800562a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005622:	f043 0204 	orr.w	r2, r3, #4
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005638:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563e:	4618      	mov	r0, r3
 8005640:	f7fd ffa6 	bl	8003590 <HAL_DMA_GetState>
 8005644:	4603      	mov	r3, r0
 8005646:	2b01      	cmp	r3, #1
 8005648:	d014      	beq.n	8005674 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800564e:	4a4e      	ldr	r2, [pc, #312]	@ (8005788 <I2C_Slave_STOPF+0x258>)
 8005650:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005656:	4618      	mov	r0, r3
 8005658:	f7fd fdee 	bl	8003238 <HAL_DMA_Abort_IT>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d008      	beq.n	8005674 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800566c:	4610      	mov	r0, r2
 800566e:	4798      	blx	r3
 8005670:	e000      	b.n	8005674 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005672:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005678:	b29b      	uxth	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d03e      	beq.n	80056fc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b04      	cmp	r3, #4
 800568a:	d112      	bne.n	80056b2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	3b01      	subs	r3, #1
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056bc:	2b40      	cmp	r3, #64	@ 0x40
 80056be:	d112      	bne.n	80056e6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056dc:	b29b      	uxth	r3, r3
 80056de:	3b01      	subs	r3, #1
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f4:	f043 0204 	orr.w	r2, r3, #4
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f8b3 	bl	8005870 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800570a:	e039      	b.n	8005780 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005710:	d109      	bne.n	8005726 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2228      	movs	r2, #40	@ 0x28
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7ff f84f 	bl	80047c4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b28      	cmp	r3, #40	@ 0x28
 8005730:	d111      	bne.n	8005756 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a15      	ldr	r2, [pc, #84]	@ (800578c <I2C_Slave_STOPF+0x25c>)
 8005736:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff f850 	bl	80047f4 <HAL_I2C_ListenCpltCallback>
}
 8005754:	e014      	b.n	8005780 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575a:	2b22      	cmp	r3, #34	@ 0x22
 800575c:	d002      	beq.n	8005764 <I2C_Slave_STOPF+0x234>
 800575e:	7bfb      	ldrb	r3, [r7, #15]
 8005760:	2b22      	cmp	r3, #34	@ 0x22
 8005762:	d10d      	bne.n	8005780 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2220      	movs	r2, #32
 800576e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7ff f822 	bl	80047c4 <HAL_I2C_SlaveRxCpltCallback>
}
 8005780:	bf00      	nop
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	08005ff5 	.word	0x08005ff5
 800578c:	ffff0000 	.word	0xffff0000

08005790 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800579e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d002      	beq.n	80057b2 <I2C_Slave_AF+0x22>
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d129      	bne.n	8005806 <I2C_Slave_AF+0x76>
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	2b28      	cmp	r3, #40	@ 0x28
 80057b6:	d126      	bne.n	8005806 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a2c      	ldr	r2, [pc, #176]	@ (800586c <I2C_Slave_AF+0xdc>)
 80057bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80057cc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057d6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057e6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7fe fff8 	bl	80047f4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005804:	e02e      	b.n	8005864 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	2b21      	cmp	r3, #33	@ 0x21
 800580a:	d126      	bne.n	800585a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a17      	ldr	r2, [pc, #92]	@ (800586c <I2C_Slave_AF+0xdc>)
 8005810:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2221      	movs	r2, #33	@ 0x21
 8005816:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005836:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005840:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005850:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fe ffac 	bl	80047b0 <HAL_I2C_SlaveTxCpltCallback>
}
 8005858:	e004      	b.n	8005864 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005862:	615a      	str	r2, [r3, #20]
}
 8005864:	bf00      	nop
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	ffff0000 	.word	0xffff0000

08005870 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800587e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005886:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005888:	7bbb      	ldrb	r3, [r7, #14]
 800588a:	2b10      	cmp	r3, #16
 800588c:	d002      	beq.n	8005894 <I2C_ITError+0x24>
 800588e:	7bbb      	ldrb	r3, [r7, #14]
 8005890:	2b40      	cmp	r3, #64	@ 0x40
 8005892:	d10a      	bne.n	80058aa <I2C_ITError+0x3a>
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	2b22      	cmp	r3, #34	@ 0x22
 8005898:	d107      	bne.n	80058aa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058a8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80058b0:	2b28      	cmp	r3, #40	@ 0x28
 80058b2:	d107      	bne.n	80058c4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2228      	movs	r2, #40	@ 0x28
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80058c2:	e015      	b.n	80058f0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058d2:	d00a      	beq.n	80058ea <I2C_ITError+0x7a>
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	2b60      	cmp	r3, #96	@ 0x60
 80058d8:	d007      	beq.n	80058ea <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058fe:	d162      	bne.n	80059c6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800590e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005914:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b01      	cmp	r3, #1
 800591c:	d020      	beq.n	8005960 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005922:	4a6a      	ldr	r2, [pc, #424]	@ (8005acc <I2C_ITError+0x25c>)
 8005924:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800592a:	4618      	mov	r0, r3
 800592c:	f7fd fc84 	bl	8003238 <HAL_DMA_Abort_IT>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 8089 	beq.w	8005a4a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0201 	bic.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800595a:	4610      	mov	r0, r2
 800595c:	4798      	blx	r3
 800595e:	e074      	b.n	8005a4a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005964:	4a59      	ldr	r2, [pc, #356]	@ (8005acc <I2C_ITError+0x25c>)
 8005966:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596c:	4618      	mov	r0, r3
 800596e:	f7fd fc63 	bl	8003238 <HAL_DMA_Abort_IT>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d068      	beq.n	8005a4a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005982:	2b40      	cmp	r3, #64	@ 0x40
 8005984:	d10b      	bne.n	800599e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005990:	b2d2      	uxtb	r2, r2
 8005992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0201 	bic.w	r2, r2, #1
 80059ac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80059c0:	4610      	mov	r0, r2
 80059c2:	4798      	blx	r3
 80059c4:	e041      	b.n	8005a4a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b60      	cmp	r3, #96	@ 0x60
 80059d0:	d125      	bne.n	8005a1e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2220      	movs	r2, #32
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ea:	2b40      	cmp	r3, #64	@ 0x40
 80059ec:	d10b      	bne.n	8005a06 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0201 	bic.w	r2, r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fe fef6 	bl	8004808 <HAL_I2C_AbortCpltCallback>
 8005a1c:	e015      	b.n	8005a4a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a28:	2b40      	cmp	r3, #64	@ 0x40
 8005a2a:	d10b      	bne.n	8005a44 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7fb fca1 	bl	800138c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10e      	bne.n	8005a78 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d109      	bne.n	8005a78 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d104      	bne.n	8005a78 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d007      	beq.n	8005a88 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a86:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a8e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d113      	bne.n	8005ac4 <I2C_ITError+0x254>
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	2b28      	cmp	r3, #40	@ 0x28
 8005aa0:	d110      	bne.n	8005ac4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8005ad0 <I2C_ITError+0x260>)
 8005aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fe fe98 	bl	80047f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ac4:	bf00      	nop
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	08005ff5 	.word	0x08005ff5
 8005ad0:	ffff0000 	.word	0xffff0000

08005ad4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	4608      	mov	r0, r1
 8005ade:	4611      	mov	r1, r2
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	817b      	strh	r3, [r7, #10]
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	813b      	strh	r3, [r7, #8]
 8005aea:	4613      	mov	r3, r2
 8005aec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005afc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fb1a 	bl	8006144 <I2C_WaitOnFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00d      	beq.n	8005b32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b24:	d103      	bne.n	8005b2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e05f      	b.n	8005bf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b32:	897b      	ldrh	r3, [r7, #10]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	461a      	mov	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b44:	6a3a      	ldr	r2, [r7, #32]
 8005b46:	492d      	ldr	r1, [pc, #180]	@ (8005bfc <I2C_RequestMemoryWrite+0x128>)
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 fb52 	bl	80061f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e04c      	b.n	8005bf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b58:	2300      	movs	r3, #0
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	617b      	str	r3, [r7, #20]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b70:	6a39      	ldr	r1, [r7, #32]
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 fbbc 	bl	80062f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00d      	beq.n	8005b9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d107      	bne.n	8005b96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e02b      	b.n	8005bf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d105      	bne.n	8005bac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ba0:	893b      	ldrh	r3, [r7, #8]
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	611a      	str	r2, [r3, #16]
 8005baa:	e021      	b.n	8005bf0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005bac:	893b      	ldrh	r3, [r7, #8]
 8005bae:	0a1b      	lsrs	r3, r3, #8
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bbc:	6a39      	ldr	r1, [r7, #32]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 fb96 	bl	80062f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00d      	beq.n	8005be6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d107      	bne.n	8005be2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005be0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e005      	b.n	8005bf2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005be6:	893b      	ldrh	r3, [r7, #8]
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	00010002 	.word	0x00010002

08005c00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b088      	sub	sp, #32
 8005c04:	af02      	add	r7, sp, #8
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	4608      	mov	r0, r1
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	4603      	mov	r3, r0
 8005c10:	817b      	strh	r3, [r7, #10]
 8005c12:	460b      	mov	r3, r1
 8005c14:	813b      	strh	r3, [r7, #8]
 8005c16:	4613      	mov	r3, r2
 8005c18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 fa7c 	bl	8006144 <I2C_WaitOnFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00d      	beq.n	8005c6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c60:	d103      	bne.n	8005c6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e0aa      	b.n	8005dc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c6e:	897b      	ldrh	r3, [r7, #10]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	461a      	mov	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c80:	6a3a      	ldr	r2, [r7, #32]
 8005c82:	4952      	ldr	r1, [pc, #328]	@ (8005dcc <I2C_RequestMemoryRead+0x1cc>)
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 fab4 	bl	80061f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e097      	b.n	8005dc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c94:	2300      	movs	r3, #0
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cac:	6a39      	ldr	r1, [r7, #32]
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 fb1e 	bl	80062f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00d      	beq.n	8005cd6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d107      	bne.n	8005cd2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e076      	b.n	8005dc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d105      	bne.n	8005ce8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cdc:	893b      	ldrh	r3, [r7, #8]
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	611a      	str	r2, [r3, #16]
 8005ce6:	e021      	b.n	8005d2c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ce8:	893b      	ldrh	r3, [r7, #8]
 8005cea:	0a1b      	lsrs	r3, r3, #8
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cf8:	6a39      	ldr	r1, [r7, #32]
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 faf8 	bl	80062f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00d      	beq.n	8005d22 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d107      	bne.n	8005d1e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e050      	b.n	8005dc4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d22:	893b      	ldrh	r3, [r7, #8]
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d2e:	6a39      	ldr	r1, [r7, #32]
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 fadd 	bl	80062f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00d      	beq.n	8005d58 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d107      	bne.n	8005d54 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e035      	b.n	8005dc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d66:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f9e5 	bl	8006144 <I2C_WaitOnFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00d      	beq.n	8005d9c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d8e:	d103      	bne.n	8005d98 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d96:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e013      	b.n	8005dc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d9c:	897b      	ldrh	r3, [r7, #10]
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	f043 0301 	orr.w	r3, r3, #1
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dae:	6a3a      	ldr	r2, [r7, #32]
 8005db0:	4906      	ldr	r1, [pc, #24]	@ (8005dcc <I2C_RequestMemoryRead+0x1cc>)
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 fa1d 	bl	80061f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3718      	adds	r7, #24
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	00010002 	.word	0x00010002

08005dd0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005de4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005dec:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005e02:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e10:	2200      	movs	r2, #0
 8005e12:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e20:	2200      	movs	r2, #0
 8005e22:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005e24:	7cfb      	ldrb	r3, [r7, #19]
 8005e26:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005e2a:	2b21      	cmp	r3, #33	@ 0x21
 8005e2c:	d007      	beq.n	8005e3e <I2C_DMAXferCplt+0x6e>
 8005e2e:	7cfb      	ldrb	r3, [r7, #19]
 8005e30:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005e34:	2b22      	cmp	r3, #34	@ 0x22
 8005e36:	d131      	bne.n	8005e9c <I2C_DMAXferCplt+0xcc>
 8005e38:	7cbb      	ldrb	r3, [r7, #18]
 8005e3a:	2b20      	cmp	r3, #32
 8005e3c:	d12e      	bne.n	8005e9c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e4c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2200      	movs	r2, #0
 8005e52:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005e54:	7cfb      	ldrb	r3, [r7, #19]
 8005e56:	2b29      	cmp	r3, #41	@ 0x29
 8005e58:	d10a      	bne.n	8005e70 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2221      	movs	r2, #33	@ 0x21
 8005e5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2228      	movs	r2, #40	@ 0x28
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e68:	6978      	ldr	r0, [r7, #20]
 8005e6a:	f7fe fca1 	bl	80047b0 <HAL_I2C_SlaveTxCpltCallback>
 8005e6e:	e00c      	b.n	8005e8a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e70:	7cfb      	ldrb	r3, [r7, #19]
 8005e72:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e74:	d109      	bne.n	8005e8a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2222      	movs	r2, #34	@ 0x22
 8005e7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2228      	movs	r2, #40	@ 0x28
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e84:	6978      	ldr	r0, [r7, #20]
 8005e86:	f7fe fc9d 	bl	80047c4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005e98:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005e9a:	e06a      	b.n	8005f72 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d064      	beq.n	8005f72 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d107      	bne.n	8005ec2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ec0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005ed0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ed8:	d009      	beq.n	8005eee <I2C_DMAXferCplt+0x11e>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d006      	beq.n	8005eee <I2C_DMAXferCplt+0x11e>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005ee6:	d002      	beq.n	8005eee <I2C_DMAXferCplt+0x11e>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	d107      	bne.n	8005efe <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005efc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f0c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f1c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2200      	movs	r2, #0
 8005f22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005f2c:	6978      	ldr	r0, [r7, #20]
 8005f2e:	f7fb fa2d 	bl	800138c <HAL_I2C_ErrorCallback>
}
 8005f32:	e01e      	b.n	8005f72 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b40      	cmp	r3, #64	@ 0x40
 8005f46:	d10a      	bne.n	8005f5e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2200      	movs	r2, #0
 8005f54:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005f56:	6978      	ldr	r0, [r7, #20]
 8005f58:	f7fb fa08 	bl	800136c <HAL_I2C_MemRxCpltCallback>
}
 8005f5c:	e009      	b.n	8005f72 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2212      	movs	r2, #18
 8005f6a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f6c:	6978      	ldr	r0, [r7, #20]
 8005f6e:	f7fe fc15 	bl	800479c <HAL_I2C_MasterRxCpltCallback>
}
 8005f72:	bf00      	nop
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f94:	2200      	movs	r2, #0
 8005f96:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7fd faff 	bl	80035ac <HAL_DMA_GetError>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d01b      	beq.n	8005fec <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fc2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fde:	f043 0210 	orr.w	r2, r3, #16
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7fb f9d0 	bl	800138c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005fec:	bf00      	nop
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006004:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800600c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800600e:	4b4b      	ldr	r3, [pc, #300]	@ (800613c <I2C_DMAAbort+0x148>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	08db      	lsrs	r3, r3, #3
 8006014:	4a4a      	ldr	r2, [pc, #296]	@ (8006140 <I2C_DMAAbort+0x14c>)
 8006016:	fba2 2303 	umull	r2, r3, r2, r3
 800601a:	0a1a      	lsrs	r2, r3, #8
 800601c:	4613      	mov	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	00da      	lsls	r2, r3, #3
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006032:	f043 0220 	orr.w	r2, r3, #32
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800603a:	e00a      	b.n	8006052 <I2C_DMAAbort+0x5e>
    }
    count--;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3b01      	subs	r3, #1
 8006040:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800604c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006050:	d0ea      	beq.n	8006028 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800605e:	2200      	movs	r2, #0
 8006060:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606e:	2200      	movs	r2, #0
 8006070:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006080:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2200      	movs	r2, #0
 8006086:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006094:	2200      	movs	r2, #0
 8006096:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a4:	2200      	movs	r2, #0
 80060a6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0201 	bic.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b60      	cmp	r3, #96	@ 0x60
 80060c2:	d10e      	bne.n	80060e2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2220      	movs	r2, #32
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2200      	movs	r2, #0
 80060d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060da:	6978      	ldr	r0, [r7, #20]
 80060dc:	f7fe fb94 	bl	8004808 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060e0:	e027      	b.n	8006132 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060e2:	7cfb      	ldrb	r3, [r7, #19]
 80060e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80060e8:	2b28      	cmp	r3, #40	@ 0x28
 80060ea:	d117      	bne.n	800611c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800610a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2200      	movs	r2, #0
 8006110:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2228      	movs	r2, #40	@ 0x28
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800611a:	e007      	b.n	800612c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2220      	movs	r2, #32
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800612c:	6978      	ldr	r0, [r7, #20]
 800612e:	f7fb f92d 	bl	800138c <HAL_I2C_ErrorCallback>
}
 8006132:	bf00      	nop
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20000000 	.word	0x20000000
 8006140:	14f8b589 	.word	0x14f8b589

08006144 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	4613      	mov	r3, r2
 8006152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006154:	e025      	b.n	80061a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615c:	d021      	beq.n	80061a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800615e:	f7fb fe93 	bl	8001e88 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d302      	bcc.n	8006174 <I2C_WaitOnFlagUntilTimeout+0x30>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d116      	bne.n	80061a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618e:	f043 0220 	orr.w	r2, r3, #32
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e023      	b.n	80061ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	0c1b      	lsrs	r3, r3, #16
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d10d      	bne.n	80061c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	43da      	mvns	r2, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	4013      	ands	r3, r2
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	bf0c      	ite	eq
 80061be:	2301      	moveq	r3, #1
 80061c0:	2300      	movne	r3, #0
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	e00c      	b.n	80061e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	43da      	mvns	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4013      	ands	r3, r2
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	bf0c      	ite	eq
 80061da:	2301      	moveq	r3, #1
 80061dc:	2300      	movne	r3, #0
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d0b6      	beq.n	8006156 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	607a      	str	r2, [r7, #4]
 80061fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006200:	e051      	b.n	80062a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800620c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006210:	d123      	bne.n	800625a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006220:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800622a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006246:	f043 0204 	orr.w	r2, r3, #4
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e046      	b.n	80062e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006260:	d021      	beq.n	80062a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006262:	f7fb fe11 	bl	8001e88 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	429a      	cmp	r2, r3
 8006270:	d302      	bcc.n	8006278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d116      	bne.n	80062a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2220      	movs	r2, #32
 8006282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006292:	f043 0220 	orr.w	r2, r3, #32
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e020      	b.n	80062e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	0c1b      	lsrs	r3, r3, #16
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d10c      	bne.n	80062ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	43da      	mvns	r2, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4013      	ands	r3, r2
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	bf14      	ite	ne
 80062c2:	2301      	movne	r3, #1
 80062c4:	2300      	moveq	r3, #0
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	e00b      	b.n	80062e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	43da      	mvns	r2, r3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	4013      	ands	r3, r2
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	bf14      	ite	ne
 80062dc:	2301      	movne	r3, #1
 80062de:	2300      	moveq	r3, #0
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d18d      	bne.n	8006202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062fc:	e02d      	b.n	800635a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 f86a 	bl	80063d8 <I2C_IsAcknowledgeFailed>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e02d      	b.n	800636a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006314:	d021      	beq.n	800635a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006316:	f7fb fdb7 	bl	8001e88 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	429a      	cmp	r2, r3
 8006324:	d302      	bcc.n	800632c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d116      	bne.n	800635a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2220      	movs	r2, #32
 8006336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006346:	f043 0220 	orr.w	r2, r3, #32
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e007      	b.n	800636a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006364:	2b80      	cmp	r3, #128	@ 0x80
 8006366:	d1ca      	bne.n	80062fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006380:	4b13      	ldr	r3, [pc, #76]	@ (80063d0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	08db      	lsrs	r3, r3, #3
 8006386:	4a13      	ldr	r2, [pc, #76]	@ (80063d4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006388:	fba2 2303 	umull	r2, r3, r2, r3
 800638c:	0a1a      	lsrs	r2, r3, #8
 800638e:	4613      	mov	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3b01      	subs	r3, #1
 800639a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d107      	bne.n	80063b2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a6:	f043 0220 	orr.w	r2, r3, #32
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e008      	b.n	80063c4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063c0:	d0e9      	beq.n	8006396 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	20000000 	.word	0x20000000
 80063d4:	14f8b589 	.word	0x14f8b589

080063d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ee:	d11b      	bne.n	8006428 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80063f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2220      	movs	r2, #32
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006414:	f043 0204 	orr.w	r2, r3, #4
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006442:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006446:	d103      	bne.n	8006450 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800644e:	e007      	b.n	8006460 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006454:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006458:	d102      	bne.n	8006460 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2208      	movs	r2, #8
 800645e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e0cc      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006480:	4b68      	ldr	r3, [pc, #416]	@ (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0307 	and.w	r3, r3, #7
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d90c      	bls.n	80064a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648e:	4b65      	ldr	r3, [pc, #404]	@ (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006496:	4b63      	ldr	r3, [pc, #396]	@ (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0307 	and.w	r3, r3, #7
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d001      	beq.n	80064a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e0b8      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d020      	beq.n	80064f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064c0:	4b59      	ldr	r3, [pc, #356]	@ (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	4a58      	ldr	r2, [pc, #352]	@ (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80064ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0308 	and.w	r3, r3, #8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064d8:	4b53      	ldr	r3, [pc, #332]	@ (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	4a52      	ldr	r2, [pc, #328]	@ (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80064e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064e4:	4b50      	ldr	r3, [pc, #320]	@ (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	494d      	ldr	r1, [pc, #308]	@ (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d044      	beq.n	800658c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d107      	bne.n	800651a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800650a:	4b47      	ldr	r3, [pc, #284]	@ (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d119      	bne.n	800654a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e07f      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2b02      	cmp	r3, #2
 8006520:	d003      	beq.n	800652a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006526:	2b03      	cmp	r3, #3
 8006528:	d107      	bne.n	800653a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800652a:	4b3f      	ldr	r3, [pc, #252]	@ (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d109      	bne.n	800654a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e06f      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800653a:	4b3b      	ldr	r3, [pc, #236]	@ (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e067      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800654a:	4b37      	ldr	r3, [pc, #220]	@ (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f023 0203 	bic.w	r2, r3, #3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	4934      	ldr	r1, [pc, #208]	@ (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 8006558:	4313      	orrs	r3, r2
 800655a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800655c:	f7fb fc94 	bl	8001e88 <HAL_GetTick>
 8006560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006562:	e00a      	b.n	800657a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006564:	f7fb fc90 	bl	8001e88 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006572:	4293      	cmp	r3, r2
 8006574:	d901      	bls.n	800657a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e04f      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800657a:	4b2b      	ldr	r3, [pc, #172]	@ (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 020c 	and.w	r2, r3, #12
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	429a      	cmp	r2, r3
 800658a:	d1eb      	bne.n	8006564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800658c:	4b25      	ldr	r3, [pc, #148]	@ (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d20c      	bcs.n	80065b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800659a:	4b22      	ldr	r3, [pc, #136]	@ (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a2:	4b20      	ldr	r3, [pc, #128]	@ (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d001      	beq.n	80065b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e032      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d008      	beq.n	80065d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065c0:	4b19      	ldr	r3, [pc, #100]	@ (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	4916      	ldr	r1, [pc, #88]	@ (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065de:	4b12      	ldr	r3, [pc, #72]	@ (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	490e      	ldr	r1, [pc, #56]	@ (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065f2:	f000 f821 	bl	8006638 <HAL_RCC_GetSysClockFreq>
 80065f6:	4602      	mov	r2, r0
 80065f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	091b      	lsrs	r3, r3, #4
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	490a      	ldr	r1, [pc, #40]	@ (800662c <HAL_RCC_ClockConfig+0x1c0>)
 8006604:	5ccb      	ldrb	r3, [r1, r3]
 8006606:	fa22 f303 	lsr.w	r3, r2, r3
 800660a:	4a09      	ldr	r2, [pc, #36]	@ (8006630 <HAL_RCC_ClockConfig+0x1c4>)
 800660c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800660e:	4b09      	ldr	r3, [pc, #36]	@ (8006634 <HAL_RCC_ClockConfig+0x1c8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f7fb fbf4 	bl	8001e00 <HAL_InitTick>

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	40023c00 	.word	0x40023c00
 8006628:	40023800 	.word	0x40023800
 800662c:	0800cd34 	.word	0x0800cd34
 8006630:	20000000 	.word	0x20000000
 8006634:	20000004 	.word	0x20000004

08006638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800663c:	b090      	sub	sp, #64	@ 0x40
 800663e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	637b      	str	r3, [r7, #52]	@ 0x34
 8006644:	2300      	movs	r3, #0
 8006646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006648:	2300      	movs	r3, #0
 800664a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006650:	4b59      	ldr	r3, [pc, #356]	@ (80067b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f003 030c 	and.w	r3, r3, #12
 8006658:	2b08      	cmp	r3, #8
 800665a:	d00d      	beq.n	8006678 <HAL_RCC_GetSysClockFreq+0x40>
 800665c:	2b08      	cmp	r3, #8
 800665e:	f200 80a1 	bhi.w	80067a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <HAL_RCC_GetSysClockFreq+0x34>
 8006666:	2b04      	cmp	r3, #4
 8006668:	d003      	beq.n	8006672 <HAL_RCC_GetSysClockFreq+0x3a>
 800666a:	e09b      	b.n	80067a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800666c:	4b53      	ldr	r3, [pc, #332]	@ (80067bc <HAL_RCC_GetSysClockFreq+0x184>)
 800666e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006670:	e09b      	b.n	80067aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006672:	4b53      	ldr	r3, [pc, #332]	@ (80067c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006674:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006676:	e098      	b.n	80067aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006678:	4b4f      	ldr	r3, [pc, #316]	@ (80067b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006680:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006682:	4b4d      	ldr	r3, [pc, #308]	@ (80067b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d028      	beq.n	80066e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800668e:	4b4a      	ldr	r3, [pc, #296]	@ (80067b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	099b      	lsrs	r3, r3, #6
 8006694:	2200      	movs	r2, #0
 8006696:	623b      	str	r3, [r7, #32]
 8006698:	627a      	str	r2, [r7, #36]	@ 0x24
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80066a0:	2100      	movs	r1, #0
 80066a2:	4b47      	ldr	r3, [pc, #284]	@ (80067c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80066a4:	fb03 f201 	mul.w	r2, r3, r1
 80066a8:	2300      	movs	r3, #0
 80066aa:	fb00 f303 	mul.w	r3, r0, r3
 80066ae:	4413      	add	r3, r2
 80066b0:	4a43      	ldr	r2, [pc, #268]	@ (80067c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80066b2:	fba0 1202 	umull	r1, r2, r0, r2
 80066b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066b8:	460a      	mov	r2, r1
 80066ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80066bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066be:	4413      	add	r3, r2
 80066c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c4:	2200      	movs	r2, #0
 80066c6:	61bb      	str	r3, [r7, #24]
 80066c8:	61fa      	str	r2, [r7, #28]
 80066ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80066d2:	f7f9 fda5 	bl	8000220 <__aeabi_uldivmod>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4613      	mov	r3, r2
 80066dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066de:	e053      	b.n	8006788 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066e0:	4b35      	ldr	r3, [pc, #212]	@ (80067b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	099b      	lsrs	r3, r3, #6
 80066e6:	2200      	movs	r2, #0
 80066e8:	613b      	str	r3, [r7, #16]
 80066ea:	617a      	str	r2, [r7, #20]
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80066f2:	f04f 0b00 	mov.w	fp, #0
 80066f6:	4652      	mov	r2, sl
 80066f8:	465b      	mov	r3, fp
 80066fa:	f04f 0000 	mov.w	r0, #0
 80066fe:	f04f 0100 	mov.w	r1, #0
 8006702:	0159      	lsls	r1, r3, #5
 8006704:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006708:	0150      	lsls	r0, r2, #5
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	ebb2 080a 	subs.w	r8, r2, sl
 8006712:	eb63 090b 	sbc.w	r9, r3, fp
 8006716:	f04f 0200 	mov.w	r2, #0
 800671a:	f04f 0300 	mov.w	r3, #0
 800671e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006722:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006726:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800672a:	ebb2 0408 	subs.w	r4, r2, r8
 800672e:	eb63 0509 	sbc.w	r5, r3, r9
 8006732:	f04f 0200 	mov.w	r2, #0
 8006736:	f04f 0300 	mov.w	r3, #0
 800673a:	00eb      	lsls	r3, r5, #3
 800673c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006740:	00e2      	lsls	r2, r4, #3
 8006742:	4614      	mov	r4, r2
 8006744:	461d      	mov	r5, r3
 8006746:	eb14 030a 	adds.w	r3, r4, sl
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	eb45 030b 	adc.w	r3, r5, fp
 8006750:	607b      	str	r3, [r7, #4]
 8006752:	f04f 0200 	mov.w	r2, #0
 8006756:	f04f 0300 	mov.w	r3, #0
 800675a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800675e:	4629      	mov	r1, r5
 8006760:	028b      	lsls	r3, r1, #10
 8006762:	4621      	mov	r1, r4
 8006764:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006768:	4621      	mov	r1, r4
 800676a:	028a      	lsls	r2, r1, #10
 800676c:	4610      	mov	r0, r2
 800676e:	4619      	mov	r1, r3
 8006770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006772:	2200      	movs	r2, #0
 8006774:	60bb      	str	r3, [r7, #8]
 8006776:	60fa      	str	r2, [r7, #12]
 8006778:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800677c:	f7f9 fd50 	bl	8000220 <__aeabi_uldivmod>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4613      	mov	r3, r2
 8006786:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006788:	4b0b      	ldr	r3, [pc, #44]	@ (80067b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	0c1b      	lsrs	r3, r3, #16
 800678e:	f003 0303 	and.w	r3, r3, #3
 8006792:	3301      	adds	r3, #1
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006798:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800679a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679c:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80067a2:	e002      	b.n	80067aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067a4:	4b05      	ldr	r3, [pc, #20]	@ (80067bc <HAL_RCC_GetSysClockFreq+0x184>)
 80067a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80067a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3740      	adds	r7, #64	@ 0x40
 80067b0:	46bd      	mov	sp, r7
 80067b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067b6:	bf00      	nop
 80067b8:	40023800 	.word	0x40023800
 80067bc:	00f42400 	.word	0x00f42400
 80067c0:	017d7840 	.word	0x017d7840

080067c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067c8:	4b03      	ldr	r3, [pc, #12]	@ (80067d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80067ca:	681b      	ldr	r3, [r3, #0]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	20000000 	.word	0x20000000

080067dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067e0:	f7ff fff0 	bl	80067c4 <HAL_RCC_GetHCLKFreq>
 80067e4:	4602      	mov	r2, r0
 80067e6:	4b05      	ldr	r3, [pc, #20]	@ (80067fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	0a9b      	lsrs	r3, r3, #10
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	4903      	ldr	r1, [pc, #12]	@ (8006800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067f2:	5ccb      	ldrb	r3, [r1, r3]
 80067f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	40023800 	.word	0x40023800
 8006800:	0800cd44 	.word	0x0800cd44

08006804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006808:	f7ff ffdc 	bl	80067c4 <HAL_RCC_GetHCLKFreq>
 800680c:	4602      	mov	r2, r0
 800680e:	4b05      	ldr	r3, [pc, #20]	@ (8006824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	0b5b      	lsrs	r3, r3, #13
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	4903      	ldr	r1, [pc, #12]	@ (8006828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800681a:	5ccb      	ldrb	r3, [r1, r3]
 800681c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006820:	4618      	mov	r0, r3
 8006822:	bd80      	pop	{r7, pc}
 8006824:	40023800 	.word	0x40023800
 8006828:	0800cd44 	.word	0x0800cd44

0800682c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e273      	b.n	8006d26 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d075      	beq.n	8006936 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800684a:	4b88      	ldr	r3, [pc, #544]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 030c 	and.w	r3, r3, #12
 8006852:	2b04      	cmp	r3, #4
 8006854:	d00c      	beq.n	8006870 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006856:	4b85      	ldr	r3, [pc, #532]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800685e:	2b08      	cmp	r3, #8
 8006860:	d112      	bne.n	8006888 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006862:	4b82      	ldr	r3, [pc, #520]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800686a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800686e:	d10b      	bne.n	8006888 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006870:	4b7e      	ldr	r3, [pc, #504]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d05b      	beq.n	8006934 <HAL_RCC_OscConfig+0x108>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d157      	bne.n	8006934 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e24e      	b.n	8006d26 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006890:	d106      	bne.n	80068a0 <HAL_RCC_OscConfig+0x74>
 8006892:	4b76      	ldr	r3, [pc, #472]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a75      	ldr	r2, [pc, #468]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 8006898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	e01d      	b.n	80068dc <HAL_RCC_OscConfig+0xb0>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068a8:	d10c      	bne.n	80068c4 <HAL_RCC_OscConfig+0x98>
 80068aa:	4b70      	ldr	r3, [pc, #448]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a6f      	ldr	r2, [pc, #444]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 80068b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068b4:	6013      	str	r3, [r2, #0]
 80068b6:	4b6d      	ldr	r3, [pc, #436]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a6c      	ldr	r2, [pc, #432]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 80068bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	e00b      	b.n	80068dc <HAL_RCC_OscConfig+0xb0>
 80068c4:	4b69      	ldr	r3, [pc, #420]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a68      	ldr	r2, [pc, #416]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 80068ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068ce:	6013      	str	r3, [r2, #0]
 80068d0:	4b66      	ldr	r3, [pc, #408]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a65      	ldr	r2, [pc, #404]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 80068d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d013      	beq.n	800690c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e4:	f7fb fad0 	bl	8001e88 <HAL_GetTick>
 80068e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ea:	e008      	b.n	80068fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068ec:	f7fb facc 	bl	8001e88 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b64      	cmp	r3, #100	@ 0x64
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e213      	b.n	8006d26 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068fe:	4b5b      	ldr	r3, [pc, #364]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0f0      	beq.n	80068ec <HAL_RCC_OscConfig+0xc0>
 800690a:	e014      	b.n	8006936 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800690c:	f7fb fabc 	bl	8001e88 <HAL_GetTick>
 8006910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006912:	e008      	b.n	8006926 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006914:	f7fb fab8 	bl	8001e88 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2b64      	cmp	r3, #100	@ 0x64
 8006920:	d901      	bls.n	8006926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e1ff      	b.n	8006d26 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006926:	4b51      	ldr	r3, [pc, #324]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1f0      	bne.n	8006914 <HAL_RCC_OscConfig+0xe8>
 8006932:	e000      	b.n	8006936 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d063      	beq.n	8006a0a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006942:	4b4a      	ldr	r3, [pc, #296]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f003 030c 	and.w	r3, r3, #12
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00b      	beq.n	8006966 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800694e:	4b47      	ldr	r3, [pc, #284]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006956:	2b08      	cmp	r3, #8
 8006958:	d11c      	bne.n	8006994 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800695a:	4b44      	ldr	r3, [pc, #272]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d116      	bne.n	8006994 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006966:	4b41      	ldr	r3, [pc, #260]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d005      	beq.n	800697e <HAL_RCC_OscConfig+0x152>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d001      	beq.n	800697e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e1d3      	b.n	8006d26 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800697e:	4b3b      	ldr	r3, [pc, #236]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	00db      	lsls	r3, r3, #3
 800698c:	4937      	ldr	r1, [pc, #220]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 800698e:	4313      	orrs	r3, r2
 8006990:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006992:	e03a      	b.n	8006a0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d020      	beq.n	80069de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800699c:	4b34      	ldr	r3, [pc, #208]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 800699e:	2201      	movs	r2, #1
 80069a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a2:	f7fb fa71 	bl	8001e88 <HAL_GetTick>
 80069a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069a8:	e008      	b.n	80069bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069aa:	f7fb fa6d 	bl	8001e88 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d901      	bls.n	80069bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e1b4      	b.n	8006d26 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069bc:	4b2b      	ldr	r3, [pc, #172]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0f0      	beq.n	80069aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069c8:	4b28      	ldr	r3, [pc, #160]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	00db      	lsls	r3, r3, #3
 80069d6:	4925      	ldr	r1, [pc, #148]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	600b      	str	r3, [r1, #0]
 80069dc:	e015      	b.n	8006a0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069de:	4b24      	ldr	r3, [pc, #144]	@ (8006a70 <HAL_RCC_OscConfig+0x244>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e4:	f7fb fa50 	bl	8001e88 <HAL_GetTick>
 80069e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ea:	e008      	b.n	80069fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069ec:	f7fb fa4c 	bl	8001e88 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e193      	b.n	8006d26 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069fe:	4b1b      	ldr	r3, [pc, #108]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1f0      	bne.n	80069ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0308 	and.w	r3, r3, #8
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d036      	beq.n	8006a84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d016      	beq.n	8006a4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a1e:	4b15      	ldr	r3, [pc, #84]	@ (8006a74 <HAL_RCC_OscConfig+0x248>)
 8006a20:	2201      	movs	r2, #1
 8006a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a24:	f7fb fa30 	bl	8001e88 <HAL_GetTick>
 8006a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a2c:	f7fb fa2c 	bl	8001e88 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e173      	b.n	8006d26 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a6c <HAL_RCC_OscConfig+0x240>)
 8006a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0f0      	beq.n	8006a2c <HAL_RCC_OscConfig+0x200>
 8006a4a:	e01b      	b.n	8006a84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a4c:	4b09      	ldr	r3, [pc, #36]	@ (8006a74 <HAL_RCC_OscConfig+0x248>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a52:	f7fb fa19 	bl	8001e88 <HAL_GetTick>
 8006a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a58:	e00e      	b.n	8006a78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a5a:	f7fb fa15 	bl	8001e88 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d907      	bls.n	8006a78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e15c      	b.n	8006d26 <HAL_RCC_OscConfig+0x4fa>
 8006a6c:	40023800 	.word	0x40023800
 8006a70:	42470000 	.word	0x42470000
 8006a74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a78:	4b8a      	ldr	r3, [pc, #552]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1ea      	bne.n	8006a5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 8097 	beq.w	8006bc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a92:	2300      	movs	r3, #0
 8006a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a96:	4b83      	ldr	r3, [pc, #524]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10f      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60bb      	str	r3, [r7, #8]
 8006aa6:	4b7f      	ldr	r3, [pc, #508]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aaa:	4a7e      	ldr	r2, [pc, #504]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ab2:	4b7c      	ldr	r3, [pc, #496]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006aba:	60bb      	str	r3, [r7, #8]
 8006abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac2:	4b79      	ldr	r3, [pc, #484]	@ (8006ca8 <HAL_RCC_OscConfig+0x47c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d118      	bne.n	8006b00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ace:	4b76      	ldr	r3, [pc, #472]	@ (8006ca8 <HAL_RCC_OscConfig+0x47c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a75      	ldr	r2, [pc, #468]	@ (8006ca8 <HAL_RCC_OscConfig+0x47c>)
 8006ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ada:	f7fb f9d5 	bl	8001e88 <HAL_GetTick>
 8006ade:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ae0:	e008      	b.n	8006af4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ae2:	f7fb f9d1 	bl	8001e88 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d901      	bls.n	8006af4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e118      	b.n	8006d26 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006af4:	4b6c      	ldr	r3, [pc, #432]	@ (8006ca8 <HAL_RCC_OscConfig+0x47c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d0f0      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d106      	bne.n	8006b16 <HAL_RCC_OscConfig+0x2ea>
 8006b08:	4b66      	ldr	r3, [pc, #408]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b0c:	4a65      	ldr	r2, [pc, #404]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006b0e:	f043 0301 	orr.w	r3, r3, #1
 8006b12:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b14:	e01c      	b.n	8006b50 <HAL_RCC_OscConfig+0x324>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	2b05      	cmp	r3, #5
 8006b1c:	d10c      	bne.n	8006b38 <HAL_RCC_OscConfig+0x30c>
 8006b1e:	4b61      	ldr	r3, [pc, #388]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b22:	4a60      	ldr	r2, [pc, #384]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006b24:	f043 0304 	orr.w	r3, r3, #4
 8006b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b2a:	4b5e      	ldr	r3, [pc, #376]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b2e:	4a5d      	ldr	r2, [pc, #372]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006b30:	f043 0301 	orr.w	r3, r3, #1
 8006b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b36:	e00b      	b.n	8006b50 <HAL_RCC_OscConfig+0x324>
 8006b38:	4b5a      	ldr	r3, [pc, #360]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b3c:	4a59      	ldr	r2, [pc, #356]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006b3e:	f023 0301 	bic.w	r3, r3, #1
 8006b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b44:	4b57      	ldr	r3, [pc, #348]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b48:	4a56      	ldr	r2, [pc, #344]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006b4a:	f023 0304 	bic.w	r3, r3, #4
 8006b4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d015      	beq.n	8006b84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b58:	f7fb f996 	bl	8001e88 <HAL_GetTick>
 8006b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b5e:	e00a      	b.n	8006b76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b60:	f7fb f992 	bl	8001e88 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e0d7      	b.n	8006d26 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b76:	4b4b      	ldr	r3, [pc, #300]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0ee      	beq.n	8006b60 <HAL_RCC_OscConfig+0x334>
 8006b82:	e014      	b.n	8006bae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b84:	f7fb f980 	bl	8001e88 <HAL_GetTick>
 8006b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b8a:	e00a      	b.n	8006ba2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b8c:	f7fb f97c 	bl	8001e88 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e0c1      	b.n	8006d26 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ba2:	4b40      	ldr	r3, [pc, #256]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1ee      	bne.n	8006b8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006bae:	7dfb      	ldrb	r3, [r7, #23]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d105      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb8:	4a3a      	ldr	r2, [pc, #232]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006bba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 80ad 	beq.w	8006d24 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bca:	4b36      	ldr	r3, [pc, #216]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f003 030c 	and.w	r3, r3, #12
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d060      	beq.n	8006c98 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d145      	bne.n	8006c6a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bde:	4b33      	ldr	r3, [pc, #204]	@ (8006cac <HAL_RCC_OscConfig+0x480>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be4:	f7fb f950 	bl	8001e88 <HAL_GetTick>
 8006be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bec:	f7fb f94c 	bl	8001e88 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e093      	b.n	8006d26 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bfe:	4b29      	ldr	r3, [pc, #164]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1f0      	bne.n	8006bec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	69da      	ldr	r2, [r3, #28]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c18:	019b      	lsls	r3, r3, #6
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c20:	085b      	lsrs	r3, r3, #1
 8006c22:	3b01      	subs	r3, #1
 8006c24:	041b      	lsls	r3, r3, #16
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2c:	061b      	lsls	r3, r3, #24
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c34:	071b      	lsls	r3, r3, #28
 8006c36:	491b      	ldr	r1, [pc, #108]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8006cac <HAL_RCC_OscConfig+0x480>)
 8006c3e:	2201      	movs	r2, #1
 8006c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c42:	f7fb f921 	bl	8001e88 <HAL_GetTick>
 8006c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c48:	e008      	b.n	8006c5c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c4a:	f7fb f91d 	bl	8001e88 <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d901      	bls.n	8006c5c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e064      	b.n	8006d26 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c5c:	4b11      	ldr	r3, [pc, #68]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0f0      	beq.n	8006c4a <HAL_RCC_OscConfig+0x41e>
 8006c68:	e05c      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c6a:	4b10      	ldr	r3, [pc, #64]	@ (8006cac <HAL_RCC_OscConfig+0x480>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c70:	f7fb f90a 	bl	8001e88 <HAL_GetTick>
 8006c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c78:	f7fb f906 	bl	8001e88 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e04d      	b.n	8006d26 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c8a:	4b06      	ldr	r3, [pc, #24]	@ (8006ca4 <HAL_RCC_OscConfig+0x478>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1f0      	bne.n	8006c78 <HAL_RCC_OscConfig+0x44c>
 8006c96:	e045      	b.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d107      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e040      	b.n	8006d26 <HAL_RCC_OscConfig+0x4fa>
 8006ca4:	40023800 	.word	0x40023800
 8006ca8:	40007000 	.word	0x40007000
 8006cac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d030      	beq.n	8006d20 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d129      	bne.n	8006d20 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d122      	bne.n	8006d20 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ce6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d119      	bne.n	8006d20 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf6:	085b      	lsrs	r3, r3, #1
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d10f      	bne.n	8006d20 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d107      	bne.n	8006d20 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d001      	beq.n	8006d24 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e000      	b.n	8006d26 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	40023800 	.word	0x40023800

08006d34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e07b      	b.n	8006e3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d108      	bne.n	8006d60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d56:	d009      	beq.n	8006d6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	61da      	str	r2, [r3, #28]
 8006d5e:	e005      	b.n	8006d6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d106      	bne.n	8006d8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7fa fd3a 	bl	8001800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006da2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006de6:	431a      	orrs	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006df0:	ea42 0103 	orr.w	r1, r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	0c1b      	lsrs	r3, r3, #16
 8006e0a:	f003 0104 	and.w	r1, r3, #4
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e12:	f003 0210 	and.w	r2, r3, #16
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b088      	sub	sp, #32
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	603b      	str	r3, [r7, #0]
 8006e52:	4613      	mov	r3, r2
 8006e54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_SPI_Transmit+0x22>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e126      	b.n	80070b6 <HAL_SPI_Transmit+0x270>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e70:	f7fb f80a 	bl	8001e88 <HAL_GetTick>
 8006e74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e76:	88fb      	ldrh	r3, [r7, #6]
 8006e78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d002      	beq.n	8006e8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e86:	2302      	movs	r3, #2
 8006e88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e8a:	e10b      	b.n	80070a4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d002      	beq.n	8006e98 <HAL_SPI_Transmit+0x52>
 8006e92:	88fb      	ldrh	r3, [r7, #6]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d102      	bne.n	8006e9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e9c:	e102      	b.n	80070a4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2203      	movs	r2, #3
 8006ea2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	88fa      	ldrh	r2, [r7, #6]
 8006eb6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	88fa      	ldrh	r2, [r7, #6]
 8006ebc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ee4:	d10f      	bne.n	8006f06 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ef4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f10:	2b40      	cmp	r3, #64	@ 0x40
 8006f12:	d007      	beq.n	8006f24 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f2c:	d14b      	bne.n	8006fc6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <HAL_SPI_Transmit+0xf6>
 8006f36:	8afb      	ldrh	r3, [r7, #22]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d13e      	bne.n	8006fba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f40:	881a      	ldrh	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f4c:	1c9a      	adds	r2, r3, #2
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f60:	e02b      	b.n	8006fba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f003 0302 	and.w	r3, r3, #2
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d112      	bne.n	8006f96 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f74:	881a      	ldrh	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f80:	1c9a      	adds	r2, r3, #2
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006f94:	e011      	b.n	8006fba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f96:	f7fa ff77 	bl	8001e88 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d803      	bhi.n	8006fae <HAL_SPI_Transmit+0x168>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fac:	d102      	bne.n	8006fb4 <HAL_SPI_Transmit+0x16e>
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d102      	bne.n	8006fba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006fb8:	e074      	b.n	80070a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1ce      	bne.n	8006f62 <HAL_SPI_Transmit+0x11c>
 8006fc4:	e04c      	b.n	8007060 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <HAL_SPI_Transmit+0x18e>
 8006fce:	8afb      	ldrh	r3, [r7, #22]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d140      	bne.n	8007056 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	330c      	adds	r3, #12
 8006fde:	7812      	ldrb	r2, [r2, #0]
 8006fe0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ffa:	e02c      	b.n	8007056 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b02      	cmp	r3, #2
 8007008:	d113      	bne.n	8007032 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	330c      	adds	r3, #12
 8007014:	7812      	ldrb	r2, [r2, #0]
 8007016:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007030:	e011      	b.n	8007056 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007032:	f7fa ff29 	bl	8001e88 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	683a      	ldr	r2, [r7, #0]
 800703e:	429a      	cmp	r2, r3
 8007040:	d803      	bhi.n	800704a <HAL_SPI_Transmit+0x204>
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007048:	d102      	bne.n	8007050 <HAL_SPI_Transmit+0x20a>
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d102      	bne.n	8007056 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007054:	e026      	b.n	80070a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800705a:	b29b      	uxth	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1cd      	bne.n	8006ffc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f001 f8cb 	bl	8008200 <SPI_EndRxTxTransaction>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2220      	movs	r2, #32
 8007074:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10a      	bne.n	8007094 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800707e:	2300      	movs	r3, #0
 8007080:	613b      	str	r3, [r7, #16]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	613b      	str	r3, [r7, #16]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	77fb      	strb	r3, [r7, #31]
 80070a0:	e000      	b.n	80070a4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80070a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80070b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3720      	adds	r7, #32
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b088      	sub	sp, #32
 80070c2:	af02      	add	r7, sp, #8
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	60b9      	str	r1, [r7, #8]
 80070c8:	603b      	str	r3, [r7, #0]
 80070ca:	4613      	mov	r3, r2
 80070cc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070da:	d112      	bne.n	8007102 <HAL_SPI_Receive+0x44>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10e      	bne.n	8007102 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2204      	movs	r2, #4
 80070e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80070ec:	88fa      	ldrh	r2, [r7, #6]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	4613      	mov	r3, r2
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	68b9      	ldr	r1, [r7, #8]
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f000 f8f1 	bl	80072e0 <HAL_SPI_TransmitReceive>
 80070fe:	4603      	mov	r3, r0
 8007100:	e0ea      	b.n	80072d8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007108:	2b01      	cmp	r3, #1
 800710a:	d101      	bne.n	8007110 <HAL_SPI_Receive+0x52>
 800710c:	2302      	movs	r3, #2
 800710e:	e0e3      	b.n	80072d8 <HAL_SPI_Receive+0x21a>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007118:	f7fa feb6 	bl	8001e88 <HAL_GetTick>
 800711c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b01      	cmp	r3, #1
 8007128:	d002      	beq.n	8007130 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800712a:	2302      	movs	r3, #2
 800712c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800712e:	e0ca      	b.n	80072c6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <HAL_SPI_Receive+0x7e>
 8007136:	88fb      	ldrh	r3, [r7, #6]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d102      	bne.n	8007142 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007140:	e0c1      	b.n	80072c6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2204      	movs	r2, #4
 8007146:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	88fa      	ldrh	r2, [r7, #6]
 800715a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	88fa      	ldrh	r2, [r7, #6]
 8007160:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007188:	d10f      	bne.n	80071aa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007198:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80071a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071b4:	2b40      	cmp	r3, #64	@ 0x40
 80071b6:	d007      	beq.n	80071c8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d162      	bne.n	8007296 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80071d0:	e02e      	b.n	8007230 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d115      	bne.n	800720c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f103 020c 	add.w	r2, r3, #12
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ec:	7812      	ldrb	r2, [r2, #0]
 80071ee:	b2d2      	uxtb	r2, r2
 80071f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800720a:	e011      	b.n	8007230 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800720c:	f7fa fe3c 	bl	8001e88 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	429a      	cmp	r2, r3
 800721a:	d803      	bhi.n	8007224 <HAL_SPI_Receive+0x166>
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007222:	d102      	bne.n	800722a <HAL_SPI_Receive+0x16c>
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d102      	bne.n	8007230 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800722e:	e04a      	b.n	80072c6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007234:	b29b      	uxth	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1cb      	bne.n	80071d2 <HAL_SPI_Receive+0x114>
 800723a:	e031      	b.n	80072a0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b01      	cmp	r3, #1
 8007248:	d113      	bne.n	8007272 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007254:	b292      	uxth	r2, r2
 8007256:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725c:	1c9a      	adds	r2, r3, #2
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007270:	e011      	b.n	8007296 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007272:	f7fa fe09 	bl	8001e88 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d803      	bhi.n	800728a <HAL_SPI_Receive+0x1cc>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007288:	d102      	bne.n	8007290 <HAL_SPI_Receive+0x1d2>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d102      	bne.n	8007296 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007294:	e017      	b.n	80072c6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800729a:	b29b      	uxth	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1cd      	bne.n	800723c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 ff45 	bl	8008134 <SPI_EndRxTransaction>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2220      	movs	r2, #32
 80072b4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	75fb      	strb	r3, [r7, #23]
 80072c2:	e000      	b.n	80072c6 <HAL_SPI_Receive+0x208>
  }

error :
 80072c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80072d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08c      	sub	sp, #48	@ 0x30
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072ee:	2301      	movs	r3, #1
 80072f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d101      	bne.n	8007306 <HAL_SPI_TransmitReceive+0x26>
 8007302:	2302      	movs	r3, #2
 8007304:	e18a      	b.n	800761c <HAL_SPI_TransmitReceive+0x33c>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800730e:	f7fa fdbb 	bl	8001e88 <HAL_GetTick>
 8007312:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800731a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007324:	887b      	ldrh	r3, [r7, #2]
 8007326:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007328:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800732c:	2b01      	cmp	r3, #1
 800732e:	d00f      	beq.n	8007350 <HAL_SPI_TransmitReceive+0x70>
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007336:	d107      	bne.n	8007348 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d103      	bne.n	8007348 <HAL_SPI_TransmitReceive+0x68>
 8007340:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007344:	2b04      	cmp	r3, #4
 8007346:	d003      	beq.n	8007350 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007348:	2302      	movs	r3, #2
 800734a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800734e:	e15b      	b.n	8007608 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d005      	beq.n	8007362 <HAL_SPI_TransmitReceive+0x82>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <HAL_SPI_TransmitReceive+0x82>
 800735c:	887b      	ldrh	r3, [r7, #2]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d103      	bne.n	800736a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007368:	e14e      	b.n	8007608 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b04      	cmp	r3, #4
 8007374:	d003      	beq.n	800737e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2205      	movs	r2, #5
 800737a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	887a      	ldrh	r2, [r7, #2]
 800738e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	887a      	ldrh	r2, [r7, #2]
 8007394:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	887a      	ldrh	r2, [r7, #2]
 80073a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	887a      	ldrh	r2, [r7, #2]
 80073a6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073be:	2b40      	cmp	r3, #64	@ 0x40
 80073c0:	d007      	beq.n	80073d2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073da:	d178      	bne.n	80074ce <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <HAL_SPI_TransmitReceive+0x10a>
 80073e4:	8b7b      	ldrh	r3, [r7, #26]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d166      	bne.n	80074b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ee:	881a      	ldrh	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073fa:	1c9a      	adds	r2, r3, #2
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007404:	b29b      	uxth	r3, r3
 8007406:	3b01      	subs	r3, #1
 8007408:	b29a      	uxth	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800740e:	e053      	b.n	80074b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b02      	cmp	r3, #2
 800741c:	d11b      	bne.n	8007456 <HAL_SPI_TransmitReceive+0x176>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007422:	b29b      	uxth	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d016      	beq.n	8007456 <HAL_SPI_TransmitReceive+0x176>
 8007428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742a:	2b01      	cmp	r3, #1
 800742c:	d113      	bne.n	8007456 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007432:	881a      	ldrh	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800743e:	1c9a      	adds	r2, r3, #2
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007448:	b29b      	uxth	r3, r3
 800744a:	3b01      	subs	r3, #1
 800744c:	b29a      	uxth	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007452:	2300      	movs	r3, #0
 8007454:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	2b01      	cmp	r3, #1
 8007462:	d119      	bne.n	8007498 <HAL_SPI_TransmitReceive+0x1b8>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d014      	beq.n	8007498 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007478:	b292      	uxth	r2, r2
 800747a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007480:	1c9a      	adds	r2, r3, #2
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800748a:	b29b      	uxth	r3, r3
 800748c:	3b01      	subs	r3, #1
 800748e:	b29a      	uxth	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007494:	2301      	movs	r3, #1
 8007496:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007498:	f7fa fcf6 	bl	8001e88 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d807      	bhi.n	80074b8 <HAL_SPI_TransmitReceive+0x1d8>
 80074a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ae:	d003      	beq.n	80074b8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80074b6:	e0a7      	b.n	8007608 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074bc:	b29b      	uxth	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1a6      	bne.n	8007410 <HAL_SPI_TransmitReceive+0x130>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1a1      	bne.n	8007410 <HAL_SPI_TransmitReceive+0x130>
 80074cc:	e07c      	b.n	80075c8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d002      	beq.n	80074dc <HAL_SPI_TransmitReceive+0x1fc>
 80074d6:	8b7b      	ldrh	r3, [r7, #26]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d16b      	bne.n	80075b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	330c      	adds	r3, #12
 80074e6:	7812      	ldrb	r2, [r2, #0]
 80074e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ee:	1c5a      	adds	r2, r3, #1
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007502:	e057      	b.n	80075b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b02      	cmp	r3, #2
 8007510:	d11c      	bne.n	800754c <HAL_SPI_TransmitReceive+0x26c>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007516:	b29b      	uxth	r3, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	d017      	beq.n	800754c <HAL_SPI_TransmitReceive+0x26c>
 800751c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800751e:	2b01      	cmp	r3, #1
 8007520:	d114      	bne.n	800754c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	330c      	adds	r3, #12
 800752c:	7812      	ldrb	r2, [r2, #0]
 800752e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007534:	1c5a      	adds	r2, r3, #1
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800753e:	b29b      	uxth	r3, r3
 8007540:	3b01      	subs	r3, #1
 8007542:	b29a      	uxth	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007548:	2300      	movs	r3, #0
 800754a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b01      	cmp	r3, #1
 8007558:	d119      	bne.n	800758e <HAL_SPI_TransmitReceive+0x2ae>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800755e:	b29b      	uxth	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	d014      	beq.n	800758e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68da      	ldr	r2, [r3, #12]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800756e:	b2d2      	uxtb	r2, r2
 8007570:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007580:	b29b      	uxth	r3, r3
 8007582:	3b01      	subs	r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800758a:	2301      	movs	r3, #1
 800758c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800758e:	f7fa fc7b 	bl	8001e88 <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800759a:	429a      	cmp	r2, r3
 800759c:	d803      	bhi.n	80075a6 <HAL_SPI_TransmitReceive+0x2c6>
 800759e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a4:	d102      	bne.n	80075ac <HAL_SPI_TransmitReceive+0x2cc>
 80075a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d103      	bne.n	80075b4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80075b2:	e029      	b.n	8007608 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1a2      	bne.n	8007504 <HAL_SPI_TransmitReceive+0x224>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d19d      	bne.n	8007504 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fe17 	bl	8008200 <SPI_EndRxTxTransaction>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d006      	beq.n	80075e6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2220      	movs	r2, #32
 80075e2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80075e4:	e010      	b.n	8007608 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10b      	bne.n	8007606 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075ee:	2300      	movs	r3, #0
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	617b      	str	r3, [r7, #20]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	617b      	str	r3, [r7, #20]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	e000      	b.n	8007608 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007606:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007618:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800761c:	4618      	mov	r0, r3
 800761e:	3730      	adds	r7, #48	@ 0x30
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	4613      	mov	r3, r2
 8007630:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800763c:	2b01      	cmp	r3, #1
 800763e:	d101      	bne.n	8007644 <HAL_SPI_Transmit_DMA+0x20>
 8007640:	2302      	movs	r3, #2
 8007642:	e09b      	b.n	800777c <HAL_SPI_Transmit_DMA+0x158>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b01      	cmp	r3, #1
 8007656:	d002      	beq.n	800765e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007658:	2302      	movs	r3, #2
 800765a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800765c:	e089      	b.n	8007772 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <HAL_SPI_Transmit_DMA+0x46>
 8007664:	88fb      	ldrh	r3, [r7, #6]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d102      	bne.n	8007670 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800766e:	e080      	b.n	8007772 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2203      	movs	r2, #3
 8007674:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	88fa      	ldrh	r2, [r7, #6]
 8007688:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	88fa      	ldrh	r2, [r7, #6]
 800768e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076b6:	d10f      	bne.n	80076d8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076dc:	4a29      	ldr	r2, [pc, #164]	@ (8007784 <HAL_SPI_Transmit_DMA+0x160>)
 80076de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076e4:	4a28      	ldr	r2, [pc, #160]	@ (8007788 <HAL_SPI_Transmit_DMA+0x164>)
 80076e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076ec:	4a27      	ldr	r2, [pc, #156]	@ (800778c <HAL_SPI_Transmit_DMA+0x168>)
 80076ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076f4:	2200      	movs	r2, #0
 80076f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007700:	4619      	mov	r1, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	330c      	adds	r3, #12
 8007708:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800770e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007710:	f7fb fcca 	bl	80030a8 <HAL_DMA_Start_IT>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00c      	beq.n	8007734 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800771e:	f043 0210 	orr.w	r2, r3, #16
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8007732:	e01e      	b.n	8007772 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773e:	2b40      	cmp	r3, #64	@ 0x40
 8007740:	d007      	beq.n	8007752 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007750:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f042 0220 	orr.w	r2, r2, #32
 8007760:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f042 0202 	orr.w	r2, r2, #2
 8007770:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800777a:	7dfb      	ldrb	r3, [r7, #23]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	08007f69 	.word	0x08007f69
 8007788:	08007d89 	.word	0x08007d89
 800778c:	08007fbd 	.word	0x08007fbd

08007790 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	4613      	mov	r3, r2
 800779c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d110      	bne.n	80077cc <HAL_SPI_Receive_DMA+0x3c>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077b2:	d10b      	bne.n	80077cc <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2204      	movs	r2, #4
 80077b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80077bc:	88fb      	ldrh	r3, [r7, #6]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	68b9      	ldr	r1, [r7, #8]
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 f8ac 	bl	8007920 <HAL_SPI_TransmitReceive_DMA>
 80077c8:	4603      	mov	r3, r0
 80077ca:	e09f      	b.n	800790c <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d101      	bne.n	80077da <HAL_SPI_Receive_DMA+0x4a>
 80077d6:	2302      	movs	r3, #2
 80077d8:	e098      	b.n	800790c <HAL_SPI_Receive_DMA+0x17c>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d002      	beq.n	80077f4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80077ee:	2302      	movs	r3, #2
 80077f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077f2:	e086      	b.n	8007902 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <HAL_SPI_Receive_DMA+0x70>
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d102      	bne.n	8007806 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007804:	e07d      	b.n	8007902 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2204      	movs	r2, #4
 800780a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	88fa      	ldrh	r2, [r7, #6]
 800781e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	88fa      	ldrh	r2, [r7, #6]
 8007824:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007846:	d10f      	bne.n	8007868 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007856:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007866:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800786c:	4a29      	ldr	r2, [pc, #164]	@ (8007914 <HAL_SPI_Receive_DMA+0x184>)
 800786e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007874:	4a28      	ldr	r2, [pc, #160]	@ (8007918 <HAL_SPI_Receive_DMA+0x188>)
 8007876:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800787c:	4a27      	ldr	r2, [pc, #156]	@ (800791c <HAL_SPI_Receive_DMA+0x18c>)
 800787e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007884:	2200      	movs	r2, #0
 8007886:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	330c      	adds	r3, #12
 8007892:	4619      	mov	r1, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007898:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800789e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80078a0:	f7fb fc02 	bl	80030a8 <HAL_DMA_Start_IT>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00c      	beq.n	80078c4 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ae:	f043 0210 	orr.w	r2, r3, #16
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 80078c2:	e01e      	b.n	8007902 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ce:	2b40      	cmp	r3, #64	@ 0x40
 80078d0:	d007      	beq.n	80078e2 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078e0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f042 0220 	orr.w	r2, r2, #32
 80078f0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f042 0201 	orr.w	r2, r2, #1
 8007900:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800790a:	7dfb      	ldrb	r3, [r7, #23]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	08007f85 	.word	0x08007f85
 8007918:	08007e31 	.word	0x08007e31
 800791c:	08007fbd 	.word	0x08007fbd

08007920 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007938:	2b01      	cmp	r3, #1
 800793a:	d101      	bne.n	8007940 <HAL_SPI_TransmitReceive_DMA+0x20>
 800793c:	2302      	movs	r3, #2
 800793e:	e0e3      	b.n	8007b08 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800794e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007956:	7dbb      	ldrb	r3, [r7, #22]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d00d      	beq.n	8007978 <HAL_SPI_TransmitReceive_DMA+0x58>
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007962:	d106      	bne.n	8007972 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d102      	bne.n	8007972 <HAL_SPI_TransmitReceive_DMA+0x52>
 800796c:	7dbb      	ldrb	r3, [r7, #22]
 800796e:	2b04      	cmp	r3, #4
 8007970:	d002      	beq.n	8007978 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8007972:	2302      	movs	r3, #2
 8007974:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007976:	e0c2      	b.n	8007afe <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d005      	beq.n	800798a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007984:	887b      	ldrh	r3, [r7, #2]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d102      	bne.n	8007990 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800798e:	e0b6      	b.n	8007afe <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b04      	cmp	r3, #4
 800799a:	d003      	beq.n	80079a4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2205      	movs	r2, #5
 80079a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	887a      	ldrh	r2, [r7, #2]
 80079b4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	887a      	ldrh	r2, [r7, #2]
 80079ba:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	887a      	ldrh	r2, [r7, #2]
 80079c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	887a      	ldrh	r2, [r7, #2]
 80079cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d108      	bne.n	80079f8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ea:	4a49      	ldr	r2, [pc, #292]	@ (8007b10 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80079ec:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079f2:	4a48      	ldr	r2, [pc, #288]	@ (8007b14 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80079f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80079f6:	e007      	b.n	8007a08 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079fc:	4a46      	ldr	r2, [pc, #280]	@ (8007b18 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80079fe:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a04:	4a45      	ldr	r2, [pc, #276]	@ (8007b1c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8007a06:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a0c:	4a44      	ldr	r2, [pc, #272]	@ (8007b20 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8007a0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a14:	2200      	movs	r2, #0
 8007a16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	330c      	adds	r3, #12
 8007a22:	4619      	mov	r1, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a28:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a2e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007a30:	f7fb fb3a 	bl	80030a8 <HAL_DMA_Start_IT>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00c      	beq.n	8007a54 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a3e:	f043 0210 	orr.w	r2, r3, #16
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8007a52:	e054      	b.n	8007afe <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685a      	ldr	r2, [r3, #4]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0201 	orr.w	r2, r2, #1
 8007a62:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a68:	2200      	movs	r2, #0
 8007a6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a70:	2200      	movs	r2, #0
 8007a72:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a78:	2200      	movs	r2, #0
 8007a7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a80:	2200      	movs	r2, #0
 8007a82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	330c      	adds	r3, #12
 8007a94:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a9a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007a9c:	f7fb fb04 	bl	80030a8 <HAL_DMA_Start_IT>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00c      	beq.n	8007ac0 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aaa:	f043 0210 	orr.w	r2, r3, #16
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8007abe:	e01e      	b.n	8007afe <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aca:	2b40      	cmp	r3, #64	@ 0x40
 8007acc:	d007      	beq.n	8007ade <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007adc:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f042 0220 	orr.w	r2, r2, #32
 8007aec:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f042 0202 	orr.w	r2, r2, #2
 8007afc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	08007f85 	.word	0x08007f85
 8007b14:	08007e31 	.word	0x08007e31
 8007b18:	08007fa1 	.word	0x08007fa1
 8007b1c:	08007ed9 	.word	0x08007ed9
 8007b20:	08007fbd 	.word	0x08007fbd

08007b24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b088      	sub	sp, #32
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	099b      	lsrs	r3, r3, #6
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10f      	bne.n	8007b68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	099b      	lsrs	r3, r3, #6
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d004      	beq.n	8007b68 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	4798      	blx	r3
    return;
 8007b66:	e0d7      	b.n	8007d18 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	085b      	lsrs	r3, r3, #1
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00a      	beq.n	8007b8a <HAL_SPI_IRQHandler+0x66>
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	09db      	lsrs	r3, r3, #7
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d004      	beq.n	8007b8a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	4798      	blx	r3
    return;
 8007b88:	e0c6      	b.n	8007d18 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	095b      	lsrs	r3, r3, #5
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10c      	bne.n	8007bb0 <HAL_SPI_IRQHandler+0x8c>
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	099b      	lsrs	r3, r3, #6
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d106      	bne.n	8007bb0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	0a1b      	lsrs	r3, r3, #8
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 80b4 	beq.w	8007d18 <HAL_SPI_IRQHandler+0x1f4>
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	095b      	lsrs	r3, r3, #5
 8007bb4:	f003 0301 	and.w	r3, r3, #1
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 80ad 	beq.w	8007d18 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	099b      	lsrs	r3, r3, #6
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d023      	beq.n	8007c12 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d011      	beq.n	8007bfa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bda:	f043 0204 	orr.w	r2, r3, #4
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007be2:	2300      	movs	r3, #0
 8007be4:	617b      	str	r3, [r7, #20]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	617b      	str	r3, [r7, #20]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	617b      	str	r3, [r7, #20]
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	e00b      	b.n	8007c12 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	613b      	str	r3, [r7, #16]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	613b      	str	r3, [r7, #16]
 8007c0e:	693b      	ldr	r3, [r7, #16]
        return;
 8007c10:	e082      	b.n	8007d18 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	095b      	lsrs	r3, r3, #5
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d014      	beq.n	8007c48 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c22:	f043 0201 	orr.w	r2, r3, #1
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60fb      	str	r3, [r7, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	0a1b      	lsrs	r3, r3, #8
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00c      	beq.n	8007c6e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c58:	f043 0208 	orr.w	r2, r3, #8
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007c60:	2300      	movs	r3, #0
 8007c62:	60bb      	str	r3, [r7, #8]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	60bb      	str	r3, [r7, #8]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d04f      	beq.n	8007d16 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c84:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	f003 0302 	and.w	r3, r3, #2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d104      	bne.n	8007ca2 <HAL_SPI_IRQHandler+0x17e>
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d034      	beq.n	8007d0c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f022 0203 	bic.w	r2, r2, #3
 8007cb0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d011      	beq.n	8007cde <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cbe:	4a18      	ldr	r2, [pc, #96]	@ (8007d20 <HAL_SPI_IRQHandler+0x1fc>)
 8007cc0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fb fab6 	bl	8003238 <HAL_DMA_Abort_IT>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d005      	beq.n	8007cde <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d016      	beq.n	8007d14 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cea:	4a0d      	ldr	r2, [pc, #52]	@ (8007d20 <HAL_SPI_IRQHandler+0x1fc>)
 8007cec:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fb faa0 	bl	8003238 <HAL_DMA_Abort_IT>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007d0a:	e003      	b.n	8007d14 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f831 	bl	8007d74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007d12:	e000      	b.n	8007d16 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007d14:	bf00      	nop
    return;
 8007d16:	bf00      	nop
  }
}
 8007d18:	3720      	adds	r7, #32
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	08007ffd 	.word	0x08007ffd

08007d24 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d94:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d96:	f7fa f877 	bl	8001e88 <HAL_GetTick>
 8007d9a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007daa:	d03b      	beq.n	8007e24 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f022 0220 	bic.w	r2, r2, #32
 8007dba:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f022 0202 	bic.w	r2, r2, #2
 8007dca:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	2164      	movs	r1, #100	@ 0x64
 8007dd0:	6978      	ldr	r0, [r7, #20]
 8007dd2:	f000 fa15 	bl	8008200 <SPI_EndRxTxTransaction>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d005      	beq.n	8007de8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de0:	f043 0220 	orr.w	r2, r3, #32
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10a      	bne.n	8007e06 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007df0:	2300      	movs	r3, #0
 8007df2:	60fb      	str	r3, [r7, #12]
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	60fb      	str	r3, [r7, #12]
 8007e04:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007e1c:	6978      	ldr	r0, [r7, #20]
 8007e1e:	f7ff ffa9 	bl	8007d74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007e22:	e002      	b.n	8007e2a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007e24:	6978      	ldr	r0, [r7, #20]
 8007e26:	f7f8 fd85 	bl	8000934 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e2a:	3718      	adds	r7, #24
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e3c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e3e:	f7fa f823 	bl	8001e88 <HAL_GetTick>
 8007e42:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e52:	d03b      	beq.n	8007ecc <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f022 0220 	bic.w	r2, r2, #32
 8007e62:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10d      	bne.n	8007e88 <SPI_DMAReceiveCplt+0x58>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e74:	d108      	bne.n	8007e88 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0203 	bic.w	r2, r2, #3
 8007e84:	605a      	str	r2, [r3, #4]
 8007e86:	e007      	b.n	8007e98 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 0201 	bic.w	r2, r2, #1
 8007e96:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	2164      	movs	r1, #100	@ 0x64
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f000 f949 	bl	8008134 <SPI_EndRxTransaction>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d003      	beq.n	8007ecc <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f7ff ff55 	bl	8007d74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007eca:	e002      	b.n	8007ed2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f7f8 fd49 	bl	8000964 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ee6:	f7f9 ffcf 	bl	8001e88 <HAL_GetTick>
 8007eea:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007efa:	d02f      	beq.n	8007f5c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f022 0220 	bic.w	r2, r2, #32
 8007f0a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	2164      	movs	r1, #100	@ 0x64
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 f975 	bl	8008200 <SPI_EndRxTxTransaction>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d005      	beq.n	8007f28 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f20:	f043 0220 	orr.w	r2, r3, #32
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685a      	ldr	r2, [r3, #4]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f022 0203 	bic.w	r2, r2, #3
 8007f36:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d003      	beq.n	8007f5c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f7ff ff0d 	bl	8007d74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007f5a:	e002      	b.n	8007f62 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f7ff fee1 	bl	8007d24 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f74:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f7ff fede 	bl	8007d38 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f7c:	bf00      	nop
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f90:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f7ff feda 	bl	8007d4c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f98:	bf00      	nop
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fac:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f7ff fed6 	bl	8007d60 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007fb4:	bf00      	nop
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 0203 	bic.w	r2, r2, #3
 8007fd8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fde:	f043 0210 	orr.w	r2, r3, #16
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f7ff fec0 	bl	8007d74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ff4:	bf00      	nop
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008008:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f7ff feac 	bl	8007d74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800801c:	bf00      	nop
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	603b      	str	r3, [r7, #0]
 8008030:	4613      	mov	r3, r2
 8008032:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008034:	f7f9 ff28 	bl	8001e88 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803c:	1a9b      	subs	r3, r3, r2
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	4413      	add	r3, r2
 8008042:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008044:	f7f9 ff20 	bl	8001e88 <HAL_GetTick>
 8008048:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800804a:	4b39      	ldr	r3, [pc, #228]	@ (8008130 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	015b      	lsls	r3, r3, #5
 8008050:	0d1b      	lsrs	r3, r3, #20
 8008052:	69fa      	ldr	r2, [r7, #28]
 8008054:	fb02 f303 	mul.w	r3, r2, r3
 8008058:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800805a:	e054      	b.n	8008106 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008062:	d050      	beq.n	8008106 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008064:	f7f9 ff10 	bl	8001e88 <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	429a      	cmp	r2, r3
 8008072:	d902      	bls.n	800807a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d13d      	bne.n	80080f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008088:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008092:	d111      	bne.n	80080b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800809c:	d004      	beq.n	80080a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080a6:	d107      	bne.n	80080b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080c0:	d10f      	bne.n	80080e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80080e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e017      	b.n	8008126 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	3b01      	subs	r3, #1
 8008104:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	689a      	ldr	r2, [r3, #8]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	4013      	ands	r3, r2
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	429a      	cmp	r2, r3
 8008114:	bf0c      	ite	eq
 8008116:	2301      	moveq	r3, #1
 8008118:	2300      	movne	r3, #0
 800811a:	b2db      	uxtb	r3, r3
 800811c:	461a      	mov	r2, r3
 800811e:	79fb      	ldrb	r3, [r7, #7]
 8008120:	429a      	cmp	r2, r3
 8008122:	d19b      	bne.n	800805c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3720      	adds	r7, #32
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20000000 	.word	0x20000000

08008134 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af02      	add	r7, sp, #8
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008148:	d111      	bne.n	800816e <SPI_EndRxTransaction+0x3a>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008152:	d004      	beq.n	800815e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800815c:	d107      	bne.n	800816e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800816c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008176:	d12a      	bne.n	80081ce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008180:	d012      	beq.n	80081a8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2200      	movs	r2, #0
 800818a:	2180      	movs	r1, #128	@ 0x80
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f7ff ff49 	bl	8008024 <SPI_WaitFlagStateUntilTimeout>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d02d      	beq.n	80081f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800819c:	f043 0220 	orr.w	r2, r3, #32
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e026      	b.n	80081f6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2200      	movs	r2, #0
 80081b0:	2101      	movs	r1, #1
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f7ff ff36 	bl	8008024 <SPI_WaitFlagStateUntilTimeout>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d01a      	beq.n	80081f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081c2:	f043 0220 	orr.w	r2, r3, #32
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e013      	b.n	80081f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	2200      	movs	r2, #0
 80081d6:	2101      	movs	r1, #1
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f7ff ff23 	bl	8008024 <SPI_WaitFlagStateUntilTimeout>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d007      	beq.n	80081f4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081e8:	f043 0220 	orr.w	r2, r3, #32
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e000      	b.n	80081f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af02      	add	r7, sp, #8
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800820c:	4b1b      	ldr	r3, [pc, #108]	@ (800827c <SPI_EndRxTxTransaction+0x7c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a1b      	ldr	r2, [pc, #108]	@ (8008280 <SPI_EndRxTxTransaction+0x80>)
 8008212:	fba2 2303 	umull	r2, r3, r2, r3
 8008216:	0d5b      	lsrs	r3, r3, #21
 8008218:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800821c:	fb02 f303 	mul.w	r3, r2, r3
 8008220:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800822a:	d112      	bne.n	8008252 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2200      	movs	r2, #0
 8008234:	2180      	movs	r1, #128	@ 0x80
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f7ff fef4 	bl	8008024 <SPI_WaitFlagStateUntilTimeout>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d016      	beq.n	8008270 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008246:	f043 0220 	orr.w	r2, r3, #32
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e00f      	b.n	8008272 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00a      	beq.n	800826e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	3b01      	subs	r3, #1
 800825c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008268:	2b80      	cmp	r3, #128	@ 0x80
 800826a:	d0f2      	beq.n	8008252 <SPI_EndRxTxTransaction+0x52>
 800826c:	e000      	b.n	8008270 <SPI_EndRxTxTransaction+0x70>
        break;
 800826e:	bf00      	nop
  }

  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	20000000 	.word	0x20000000
 8008280:	165e9f81 	.word	0x165e9f81

08008284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e03f      	b.n	8008316 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d106      	bne.n	80082b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7f9 fc22 	bl	8001af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2224      	movs	r2, #36	@ 0x24
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68da      	ldr	r2, [r3, #12]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80082c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fc7b 	bl	8008bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	691a      	ldr	r2, [r3, #16]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80082dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	695a      	ldr	r2, [r3, #20]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80082ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80082fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2220      	movs	r2, #32
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2220      	movs	r2, #32
 8008310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b0ba      	sub	sp, #232	@ 0xe8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008346:	2300      	movs	r3, #0
 8008348:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800834c:	2300      	movs	r3, #0
 800834e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008356:	f003 030f 	and.w	r3, r3, #15
 800835a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800835e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10f      	bne.n	8008386 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800836a:	f003 0320 	and.w	r3, r3, #32
 800836e:	2b00      	cmp	r3, #0
 8008370:	d009      	beq.n	8008386 <HAL_UART_IRQHandler+0x66>
 8008372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fb65 	bl	8008a4e <UART_Receive_IT>
      return;
 8008384:	e256      	b.n	8008834 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008386:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 80de 	beq.w	800854c <HAL_UART_IRQHandler+0x22c>
 8008390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	2b00      	cmp	r3, #0
 800839a:	d106      	bne.n	80083aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800839c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 80d1 	beq.w	800854c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80083aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00b      	beq.n	80083ce <HAL_UART_IRQHandler+0xae>
 80083b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d005      	beq.n	80083ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c6:	f043 0201 	orr.w	r2, r3, #1
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083d2:	f003 0304 	and.w	r3, r3, #4
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00b      	beq.n	80083f2 <HAL_UART_IRQHandler+0xd2>
 80083da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d005      	beq.n	80083f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ea:	f043 0202 	orr.w	r2, r3, #2
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083f6:	f003 0302 	and.w	r3, r3, #2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00b      	beq.n	8008416 <HAL_UART_IRQHandler+0xf6>
 80083fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	2b00      	cmp	r3, #0
 8008408:	d005      	beq.n	8008416 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840e:	f043 0204 	orr.w	r2, r3, #4
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800841a:	f003 0308 	and.w	r3, r3, #8
 800841e:	2b00      	cmp	r3, #0
 8008420:	d011      	beq.n	8008446 <HAL_UART_IRQHandler+0x126>
 8008422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b00      	cmp	r3, #0
 800842c:	d105      	bne.n	800843a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800842e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	2b00      	cmp	r3, #0
 8008438:	d005      	beq.n	8008446 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800843e:	f043 0208 	orr.w	r2, r3, #8
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800844a:	2b00      	cmp	r3, #0
 800844c:	f000 81ed 	beq.w	800882a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008454:	f003 0320 	and.w	r3, r3, #32
 8008458:	2b00      	cmp	r3, #0
 800845a:	d008      	beq.n	800846e <HAL_UART_IRQHandler+0x14e>
 800845c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008460:	f003 0320 	and.w	r3, r3, #32
 8008464:	2b00      	cmp	r3, #0
 8008466:	d002      	beq.n	800846e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 faf0 	bl	8008a4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008478:	2b40      	cmp	r3, #64	@ 0x40
 800847a:	bf0c      	ite	eq
 800847c:	2301      	moveq	r3, #1
 800847e:	2300      	movne	r3, #0
 8008480:	b2db      	uxtb	r3, r3
 8008482:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800848a:	f003 0308 	and.w	r3, r3, #8
 800848e:	2b00      	cmp	r3, #0
 8008490:	d103      	bne.n	800849a <HAL_UART_IRQHandler+0x17a>
 8008492:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008496:	2b00      	cmp	r3, #0
 8008498:	d04f      	beq.n	800853a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f9f8 	bl	8008890 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084aa:	2b40      	cmp	r3, #64	@ 0x40
 80084ac:	d141      	bne.n	8008532 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3314      	adds	r3, #20
 80084b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084bc:	e853 3f00 	ldrex	r3, [r3]
 80084c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80084c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	3314      	adds	r3, #20
 80084d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80084da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80084de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80084e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80084ea:	e841 2300 	strex	r3, r2, [r1]
 80084ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80084f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1d9      	bne.n	80084ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d013      	beq.n	800852a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008506:	4a7d      	ldr	r2, [pc, #500]	@ (80086fc <HAL_UART_IRQHandler+0x3dc>)
 8008508:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800850e:	4618      	mov	r0, r3
 8008510:	f7fa fe92 	bl	8003238 <HAL_DMA_Abort_IT>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d016      	beq.n	8008548 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800851e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008524:	4610      	mov	r0, r2
 8008526:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008528:	e00e      	b.n	8008548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f99a 	bl	8008864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008530:	e00a      	b.n	8008548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f996 	bl	8008864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008538:	e006      	b.n	8008548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f992 	bl	8008864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8008546:	e170      	b.n	800882a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008548:	bf00      	nop
    return;
 800854a:	e16e      	b.n	800882a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008550:	2b01      	cmp	r3, #1
 8008552:	f040 814a 	bne.w	80087ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800855a:	f003 0310 	and.w	r3, r3, #16
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 8143 	beq.w	80087ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008568:	f003 0310 	and.w	r3, r3, #16
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 813c 	beq.w	80087ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008572:	2300      	movs	r3, #0
 8008574:	60bb      	str	r3, [r7, #8]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	60bb      	str	r3, [r7, #8]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	60bb      	str	r3, [r7, #8]
 8008586:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008592:	2b40      	cmp	r3, #64	@ 0x40
 8008594:	f040 80b4 	bne.w	8008700 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 8140 	beq.w	800882e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80085b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085b6:	429a      	cmp	r2, r3
 80085b8:	f080 8139 	bcs.w	800882e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085ce:	f000 8088 	beq.w	80086e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	330c      	adds	r3, #12
 80085d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80085e0:	e853 3f00 	ldrex	r3, [r3]
 80085e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80085e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80085ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	330c      	adds	r3, #12
 80085fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80085fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008602:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800860a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008616:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1d9      	bne.n	80085d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3314      	adds	r3, #20
 8008624:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008626:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008628:	e853 3f00 	ldrex	r3, [r3]
 800862c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800862e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008630:	f023 0301 	bic.w	r3, r3, #1
 8008634:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3314      	adds	r3, #20
 800863e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008642:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008646:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008648:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800864a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800864e:	e841 2300 	strex	r3, r2, [r1]
 8008652:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008654:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1e1      	bne.n	800861e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3314      	adds	r3, #20
 8008660:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008662:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008664:	e853 3f00 	ldrex	r3, [r3]
 8008668:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800866a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800866c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008670:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	3314      	adds	r3, #20
 800867a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800867e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008680:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008682:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008684:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008686:	e841 2300 	strex	r3, r2, [r1]
 800868a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800868c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1e3      	bne.n	800865a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2220      	movs	r2, #32
 8008696:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	330c      	adds	r3, #12
 80086a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086aa:	e853 3f00 	ldrex	r3, [r3]
 80086ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086b2:	f023 0310 	bic.w	r3, r3, #16
 80086b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	330c      	adds	r3, #12
 80086c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80086c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80086c6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80086ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086cc:	e841 2300 	strex	r3, r2, [r1]
 80086d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80086d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1e3      	bne.n	80086a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fa fd3b 	bl	8003158 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f8c0 	bl	8008878 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086f8:	e099      	b.n	800882e <HAL_UART_IRQHandler+0x50e>
 80086fa:	bf00      	nop
 80086fc:	08008957 	.word	0x08008957
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008708:	b29b      	uxth	r3, r3
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008714:	b29b      	uxth	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 808b 	beq.w	8008832 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800871c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 8086 	beq.w	8008832 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	330c      	adds	r3, #12
 800872c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008730:	e853 3f00 	ldrex	r3, [r3]
 8008734:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008738:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800873c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	330c      	adds	r3, #12
 8008746:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800874a:	647a      	str	r2, [r7, #68]	@ 0x44
 800874c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008750:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008752:	e841 2300 	strex	r3, r2, [r1]
 8008756:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1e3      	bne.n	8008726 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3314      	adds	r3, #20
 8008764:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008768:	e853 3f00 	ldrex	r3, [r3]
 800876c:	623b      	str	r3, [r7, #32]
   return(result);
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	f023 0301 	bic.w	r3, r3, #1
 8008774:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3314      	adds	r3, #20
 800877e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008782:	633a      	str	r2, [r7, #48]	@ 0x30
 8008784:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008786:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800878a:	e841 2300 	strex	r3, r2, [r1]
 800878e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1e3      	bne.n	800875e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2220      	movs	r2, #32
 800879a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	330c      	adds	r3, #12
 80087aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 0310 	bic.w	r3, r3, #16
 80087ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	330c      	adds	r3, #12
 80087c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80087c8:	61fa      	str	r2, [r7, #28]
 80087ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	69b9      	ldr	r1, [r7, #24]
 80087ce:	69fa      	ldr	r2, [r7, #28]
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	617b      	str	r3, [r7, #20]
   return(result);
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e3      	bne.n	80087a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80087e0:	4619      	mov	r1, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f848 	bl	8008878 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087e8:	e023      	b.n	8008832 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80087ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d009      	beq.n	800880a <HAL_UART_IRQHandler+0x4ea>
 80087f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f8bb 	bl	800897e <UART_Transmit_IT>
    return;
 8008808:	e014      	b.n	8008834 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800880a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800880e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00e      	beq.n	8008834 <HAL_UART_IRQHandler+0x514>
 8008816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800881a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800881e:	2b00      	cmp	r3, #0
 8008820:	d008      	beq.n	8008834 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f8fb 	bl	8008a1e <UART_EndTransmit_IT>
    return;
 8008828:	e004      	b.n	8008834 <HAL_UART_IRQHandler+0x514>
    return;
 800882a:	bf00      	nop
 800882c:	e002      	b.n	8008834 <HAL_UART_IRQHandler+0x514>
      return;
 800882e:	bf00      	nop
 8008830:	e000      	b.n	8008834 <HAL_UART_IRQHandler+0x514>
      return;
 8008832:	bf00      	nop
  }
}
 8008834:	37e8      	adds	r7, #232	@ 0xe8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop

0800883c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	460b      	mov	r3, r1
 8008882:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008890:	b480      	push	{r7}
 8008892:	b095      	sub	sp, #84	@ 0x54
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	330c      	adds	r3, #12
 800889e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088a2:	e853 3f00 	ldrex	r3, [r3]
 80088a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	330c      	adds	r3, #12
 80088b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80088b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80088ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088c0:	e841 2300 	strex	r3, r2, [r1]
 80088c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80088c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1e5      	bne.n	8008898 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3314      	adds	r3, #20
 80088d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d4:	6a3b      	ldr	r3, [r7, #32]
 80088d6:	e853 3f00 	ldrex	r3, [r3]
 80088da:	61fb      	str	r3, [r7, #28]
   return(result);
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	f023 0301 	bic.w	r3, r3, #1
 80088e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3314      	adds	r3, #20
 80088ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088f4:	e841 2300 	strex	r3, r2, [r1]
 80088f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1e5      	bne.n	80088cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008904:	2b01      	cmp	r3, #1
 8008906:	d119      	bne.n	800893c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	330c      	adds	r3, #12
 800890e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	e853 3f00 	ldrex	r3, [r3]
 8008916:	60bb      	str	r3, [r7, #8]
   return(result);
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	f023 0310 	bic.w	r3, r3, #16
 800891e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	330c      	adds	r3, #12
 8008926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008928:	61ba      	str	r2, [r7, #24]
 800892a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892c:	6979      	ldr	r1, [r7, #20]
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	e841 2300 	strex	r3, r2, [r1]
 8008934:	613b      	str	r3, [r7, #16]
   return(result);
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1e5      	bne.n	8008908 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2220      	movs	r2, #32
 8008940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800894a:	bf00      	nop
 800894c:	3754      	adds	r7, #84	@ 0x54
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008962:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f7ff ff77 	bl	8008864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008976:	bf00      	nop
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800897e:	b480      	push	{r7}
 8008980:	b085      	sub	sp, #20
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b21      	cmp	r3, #33	@ 0x21
 8008990:	d13e      	bne.n	8008a10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800899a:	d114      	bne.n	80089c6 <UART_Transmit_IT+0x48>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d110      	bne.n	80089c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	461a      	mov	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	1c9a      	adds	r2, r3, #2
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	621a      	str	r2, [r3, #32]
 80089c4:	e008      	b.n	80089d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	1c59      	adds	r1, r3, #1
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	6211      	str	r1, [r2, #32]
 80089d0:	781a      	ldrb	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80089dc:	b29b      	uxth	r3, r3
 80089de:	3b01      	subs	r3, #1
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	4619      	mov	r1, r3
 80089e6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10f      	bne.n	8008a0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80089fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68da      	ldr	r2, [r3, #12]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	e000      	b.n	8008a12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a10:	2302      	movs	r3, #2
  }
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b082      	sub	sp, #8
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68da      	ldr	r2, [r3, #12]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2220      	movs	r2, #32
 8008a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7ff fefc 	bl	800883c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b08c      	sub	sp, #48	@ 0x30
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	2b22      	cmp	r3, #34	@ 0x22
 8008a60:	f040 80ab 	bne.w	8008bba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a6c:	d117      	bne.n	8008a9e <UART_Receive_IT+0x50>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d113      	bne.n	8008a9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a96:	1c9a      	adds	r2, r3, #2
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a9c:	e026      	b.n	8008aec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ab0:	d007      	beq.n	8008ac2 <UART_Receive_IT+0x74>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10a      	bne.n	8008ad0 <UART_Receive_IT+0x82>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d106      	bne.n	8008ad0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008acc:	701a      	strb	r2, [r3, #0]
 8008ace:	e008      	b.n	8008ae2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008adc:	b2da      	uxtb	r2, r3
 8008ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae6:	1c5a      	adds	r2, r3, #1
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	3b01      	subs	r3, #1
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	4619      	mov	r1, r3
 8008afa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d15a      	bne.n	8008bb6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68da      	ldr	r2, [r3, #12]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f022 0220 	bic.w	r2, r2, #32
 8008b0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68da      	ldr	r2, [r3, #12]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008b1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	695a      	ldr	r2, [r3, #20]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f022 0201 	bic.w	r2, r2, #1
 8008b2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2220      	movs	r2, #32
 8008b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d135      	bne.n	8008bac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	330c      	adds	r3, #12
 8008b4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	e853 3f00 	ldrex	r3, [r3]
 8008b54:	613b      	str	r3, [r7, #16]
   return(result);
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	f023 0310 	bic.w	r3, r3, #16
 8008b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	330c      	adds	r3, #12
 8008b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b66:	623a      	str	r2, [r7, #32]
 8008b68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6a:	69f9      	ldr	r1, [r7, #28]
 8008b6c:	6a3a      	ldr	r2, [r7, #32]
 8008b6e:	e841 2300 	strex	r3, r2, [r1]
 8008b72:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1e5      	bne.n	8008b46 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 0310 	and.w	r3, r3, #16
 8008b84:	2b10      	cmp	r3, #16
 8008b86:	d10a      	bne.n	8008b9e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b88:	2300      	movs	r3, #0
 8008b8a:	60fb      	str	r3, [r7, #12]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	60fb      	str	r3, [r7, #12]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7ff fe67 	bl	8008878 <HAL_UARTEx_RxEventCallback>
 8008baa:	e002      	b.n	8008bb2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f7ff fe4f 	bl	8008850 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	e002      	b.n	8008bbc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	e000      	b.n	8008bbc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008bba:	2302      	movs	r3, #2
  }
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3730      	adds	r7, #48	@ 0x30
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bc8:	b0c0      	sub	sp, #256	@ 0x100
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008be0:	68d9      	ldr	r1, [r3, #12]
 8008be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	ea40 0301 	orr.w	r3, r0, r1
 8008bec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bf2:	689a      	ldr	r2, [r3, #8]
 8008bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	431a      	orrs	r2, r3
 8008bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	431a      	orrs	r2, r3
 8008c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008c1c:	f021 010c 	bic.w	r1, r1, #12
 8008c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008c2a:	430b      	orrs	r3, r1
 8008c2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	695b      	ldr	r3, [r3, #20]
 8008c36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c3e:	6999      	ldr	r1, [r3, #24]
 8008c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	ea40 0301 	orr.w	r3, r0, r1
 8008c4a:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8008c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	4b95      	ldr	r3, [pc, #596]	@ (8008ea8 <UART_SetConfig+0x2e4>)
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d011      	beq.n	8008c7c <UART_SetConfig+0xb8>
 8008c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	4b93      	ldr	r3, [pc, #588]	@ (8008eac <UART_SetConfig+0x2e8>)
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d00b      	beq.n	8008c7c <UART_SetConfig+0xb8>
 8008c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	4b91      	ldr	r3, [pc, #580]	@ (8008eb0 <UART_SetConfig+0x2ec>)
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d005      	beq.n	8008c7c <UART_SetConfig+0xb8>
 8008c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	4b8f      	ldr	r3, [pc, #572]	@ (8008eb4 <UART_SetConfig+0x2f0>)
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d104      	bne.n	8008c86 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c7c:	f7fd fdc2 	bl	8006804 <HAL_RCC_GetPCLK2Freq>
 8008c80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008c84:	e003      	b.n	8008c8e <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c86:	f7fd fda9 	bl	80067dc <HAL_RCC_GetPCLK1Freq>
 8008c8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c98:	f040 8110 	bne.w	8008ebc <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008ca6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008caa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008cae:	4622      	mov	r2, r4
 8008cb0:	462b      	mov	r3, r5
 8008cb2:	1891      	adds	r1, r2, r2
 8008cb4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008cb6:	415b      	adcs	r3, r3
 8008cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	eb12 0801 	adds.w	r8, r2, r1
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	eb43 0901 	adc.w	r9, r3, r1
 8008cca:	f04f 0200 	mov.w	r2, #0
 8008cce:	f04f 0300 	mov.w	r3, #0
 8008cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cde:	4690      	mov	r8, r2
 8008ce0:	4699      	mov	r9, r3
 8008ce2:	4623      	mov	r3, r4
 8008ce4:	eb18 0303 	adds.w	r3, r8, r3
 8008ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008cec:	462b      	mov	r3, r5
 8008cee:	eb49 0303 	adc.w	r3, r9, r3
 8008cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d02:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008d06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	18db      	adds	r3, r3, r3
 8008d0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d10:	4613      	mov	r3, r2
 8008d12:	eb42 0303 	adc.w	r3, r2, r3
 8008d16:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008d1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008d20:	f7f7 fa7e 	bl	8000220 <__aeabi_uldivmod>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	4b63      	ldr	r3, [pc, #396]	@ (8008eb8 <UART_SetConfig+0x2f4>)
 8008d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d2e:	095b      	lsrs	r3, r3, #5
 8008d30:	011c      	lsls	r4, r3, #4
 8008d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d36:	2200      	movs	r2, #0
 8008d38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d3c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008d40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008d44:	4642      	mov	r2, r8
 8008d46:	464b      	mov	r3, r9
 8008d48:	1891      	adds	r1, r2, r2
 8008d4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008d4c:	415b      	adcs	r3, r3
 8008d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008d54:	4641      	mov	r1, r8
 8008d56:	eb12 0a01 	adds.w	sl, r2, r1
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	eb43 0b01 	adc.w	fp, r3, r1
 8008d60:	f04f 0200 	mov.w	r2, #0
 8008d64:	f04f 0300 	mov.w	r3, #0
 8008d68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d74:	4692      	mov	sl, r2
 8008d76:	469b      	mov	fp, r3
 8008d78:	4643      	mov	r3, r8
 8008d7a:	eb1a 0303 	adds.w	r3, sl, r3
 8008d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d82:	464b      	mov	r3, r9
 8008d84:	eb4b 0303 	adc.w	r3, fp, r3
 8008d88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d98:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008d9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008da0:	460b      	mov	r3, r1
 8008da2:	18db      	adds	r3, r3, r3
 8008da4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008da6:	4613      	mov	r3, r2
 8008da8:	eb42 0303 	adc.w	r3, r2, r3
 8008dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008db2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008db6:	f7f7 fa33 	bl	8000220 <__aeabi_uldivmod>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4b3d      	ldr	r3, [pc, #244]	@ (8008eb8 <UART_SetConfig+0x2f4>)
 8008dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8008dc6:	095b      	lsrs	r3, r3, #5
 8008dc8:	2264      	movs	r2, #100	@ 0x64
 8008dca:	fb02 f303 	mul.w	r3, r2, r3
 8008dce:	1acb      	subs	r3, r1, r3
 8008dd0:	00db      	lsls	r3, r3, #3
 8008dd2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008dd6:	4b38      	ldr	r3, [pc, #224]	@ (8008eb8 <UART_SetConfig+0x2f4>)
 8008dd8:	fba3 2302 	umull	r2, r3, r3, r2
 8008ddc:	095b      	lsrs	r3, r3, #5
 8008dde:	005b      	lsls	r3, r3, #1
 8008de0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008de4:	441c      	add	r4, r3
 8008de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dea:	2200      	movs	r2, #0
 8008dec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008df0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008df4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008df8:	4642      	mov	r2, r8
 8008dfa:	464b      	mov	r3, r9
 8008dfc:	1891      	adds	r1, r2, r2
 8008dfe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008e00:	415b      	adcs	r3, r3
 8008e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008e08:	4641      	mov	r1, r8
 8008e0a:	1851      	adds	r1, r2, r1
 8008e0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8008e0e:	4649      	mov	r1, r9
 8008e10:	414b      	adcs	r3, r1
 8008e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e14:	f04f 0200 	mov.w	r2, #0
 8008e18:	f04f 0300 	mov.w	r3, #0
 8008e1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008e20:	4659      	mov	r1, fp
 8008e22:	00cb      	lsls	r3, r1, #3
 8008e24:	4651      	mov	r1, sl
 8008e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e2a:	4651      	mov	r1, sl
 8008e2c:	00ca      	lsls	r2, r1, #3
 8008e2e:	4610      	mov	r0, r2
 8008e30:	4619      	mov	r1, r3
 8008e32:	4603      	mov	r3, r0
 8008e34:	4642      	mov	r2, r8
 8008e36:	189b      	adds	r3, r3, r2
 8008e38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e3c:	464b      	mov	r3, r9
 8008e3e:	460a      	mov	r2, r1
 8008e40:	eb42 0303 	adc.w	r3, r2, r3
 8008e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008e58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	18db      	adds	r3, r3, r3
 8008e60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e62:	4613      	mov	r3, r2
 8008e64:	eb42 0303 	adc.w	r3, r2, r3
 8008e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008e6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008e72:	f7f7 f9d5 	bl	8000220 <__aeabi_uldivmod>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008eb8 <UART_SetConfig+0x2f4>)
 8008e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e80:	095b      	lsrs	r3, r3, #5
 8008e82:	2164      	movs	r1, #100	@ 0x64
 8008e84:	fb01 f303 	mul.w	r3, r1, r3
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	00db      	lsls	r3, r3, #3
 8008e8c:	3332      	adds	r3, #50	@ 0x32
 8008e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8008eb8 <UART_SetConfig+0x2f4>)
 8008e90:	fba2 2303 	umull	r2, r3, r2, r3
 8008e94:	095b      	lsrs	r3, r3, #5
 8008e96:	f003 0207 	and.w	r2, r3, #7
 8008e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4422      	add	r2, r4
 8008ea2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ea4:	e10a      	b.n	80090bc <UART_SetConfig+0x4f8>
 8008ea6:	bf00      	nop
 8008ea8:	40011000 	.word	0x40011000
 8008eac:	40011400 	.word	0x40011400
 8008eb0:	40011800 	.word	0x40011800
 8008eb4:	40011c00 	.word	0x40011c00
 8008eb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008ec6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008eca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008ece:	4642      	mov	r2, r8
 8008ed0:	464b      	mov	r3, r9
 8008ed2:	1891      	adds	r1, r2, r2
 8008ed4:	6239      	str	r1, [r7, #32]
 8008ed6:	415b      	adcs	r3, r3
 8008ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008eda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ede:	4641      	mov	r1, r8
 8008ee0:	1854      	adds	r4, r2, r1
 8008ee2:	4649      	mov	r1, r9
 8008ee4:	eb43 0501 	adc.w	r5, r3, r1
 8008ee8:	f04f 0200 	mov.w	r2, #0
 8008eec:	f04f 0300 	mov.w	r3, #0
 8008ef0:	00eb      	lsls	r3, r5, #3
 8008ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ef6:	00e2      	lsls	r2, r4, #3
 8008ef8:	4614      	mov	r4, r2
 8008efa:	461d      	mov	r5, r3
 8008efc:	4643      	mov	r3, r8
 8008efe:	18e3      	adds	r3, r4, r3
 8008f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f04:	464b      	mov	r3, r9
 8008f06:	eb45 0303 	adc.w	r3, r5, r3
 8008f0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008f1e:	f04f 0200 	mov.w	r2, #0
 8008f22:	f04f 0300 	mov.w	r3, #0
 8008f26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	008b      	lsls	r3, r1, #2
 8008f2e:	4621      	mov	r1, r4
 8008f30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f34:	4621      	mov	r1, r4
 8008f36:	008a      	lsls	r2, r1, #2
 8008f38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008f3c:	f7f7 f970 	bl	8000220 <__aeabi_uldivmod>
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	4b60      	ldr	r3, [pc, #384]	@ (80090c8 <UART_SetConfig+0x504>)
 8008f46:	fba3 2302 	umull	r2, r3, r3, r2
 8008f4a:	095b      	lsrs	r3, r3, #5
 8008f4c:	011c      	lsls	r4, r3, #4
 8008f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f52:	2200      	movs	r2, #0
 8008f54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008f5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008f60:	4642      	mov	r2, r8
 8008f62:	464b      	mov	r3, r9
 8008f64:	1891      	adds	r1, r2, r2
 8008f66:	61b9      	str	r1, [r7, #24]
 8008f68:	415b      	adcs	r3, r3
 8008f6a:	61fb      	str	r3, [r7, #28]
 8008f6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f70:	4641      	mov	r1, r8
 8008f72:	1851      	adds	r1, r2, r1
 8008f74:	6139      	str	r1, [r7, #16]
 8008f76:	4649      	mov	r1, r9
 8008f78:	414b      	adcs	r3, r1
 8008f7a:	617b      	str	r3, [r7, #20]
 8008f7c:	f04f 0200 	mov.w	r2, #0
 8008f80:	f04f 0300 	mov.w	r3, #0
 8008f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f88:	4659      	mov	r1, fp
 8008f8a:	00cb      	lsls	r3, r1, #3
 8008f8c:	4651      	mov	r1, sl
 8008f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f92:	4651      	mov	r1, sl
 8008f94:	00ca      	lsls	r2, r1, #3
 8008f96:	4610      	mov	r0, r2
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	4642      	mov	r2, r8
 8008f9e:	189b      	adds	r3, r3, r2
 8008fa0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008fa4:	464b      	mov	r3, r9
 8008fa6:	460a      	mov	r2, r1
 8008fa8:	eb42 0303 	adc.w	r3, r2, r3
 8008fac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008fba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008fbc:	f04f 0200 	mov.w	r2, #0
 8008fc0:	f04f 0300 	mov.w	r3, #0
 8008fc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008fc8:	4649      	mov	r1, r9
 8008fca:	008b      	lsls	r3, r1, #2
 8008fcc:	4641      	mov	r1, r8
 8008fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fd2:	4641      	mov	r1, r8
 8008fd4:	008a      	lsls	r2, r1, #2
 8008fd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008fda:	f7f7 f921 	bl	8000220 <__aeabi_uldivmod>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	4611      	mov	r1, r2
 8008fe4:	4b38      	ldr	r3, [pc, #224]	@ (80090c8 <UART_SetConfig+0x504>)
 8008fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8008fea:	095b      	lsrs	r3, r3, #5
 8008fec:	2264      	movs	r2, #100	@ 0x64
 8008fee:	fb02 f303 	mul.w	r3, r2, r3
 8008ff2:	1acb      	subs	r3, r1, r3
 8008ff4:	011b      	lsls	r3, r3, #4
 8008ff6:	3332      	adds	r3, #50	@ 0x32
 8008ff8:	4a33      	ldr	r2, [pc, #204]	@ (80090c8 <UART_SetConfig+0x504>)
 8008ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffe:	095b      	lsrs	r3, r3, #5
 8009000:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009004:	441c      	add	r4, r3
 8009006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800900a:	2200      	movs	r2, #0
 800900c:	673b      	str	r3, [r7, #112]	@ 0x70
 800900e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009010:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009014:	4642      	mov	r2, r8
 8009016:	464b      	mov	r3, r9
 8009018:	1891      	adds	r1, r2, r2
 800901a:	60b9      	str	r1, [r7, #8]
 800901c:	415b      	adcs	r3, r3
 800901e:	60fb      	str	r3, [r7, #12]
 8009020:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009024:	4641      	mov	r1, r8
 8009026:	1851      	adds	r1, r2, r1
 8009028:	6039      	str	r1, [r7, #0]
 800902a:	4649      	mov	r1, r9
 800902c:	414b      	adcs	r3, r1
 800902e:	607b      	str	r3, [r7, #4]
 8009030:	f04f 0200 	mov.w	r2, #0
 8009034:	f04f 0300 	mov.w	r3, #0
 8009038:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800903c:	4659      	mov	r1, fp
 800903e:	00cb      	lsls	r3, r1, #3
 8009040:	4651      	mov	r1, sl
 8009042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009046:	4651      	mov	r1, sl
 8009048:	00ca      	lsls	r2, r1, #3
 800904a:	4610      	mov	r0, r2
 800904c:	4619      	mov	r1, r3
 800904e:	4603      	mov	r3, r0
 8009050:	4642      	mov	r2, r8
 8009052:	189b      	adds	r3, r3, r2
 8009054:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009056:	464b      	mov	r3, r9
 8009058:	460a      	mov	r2, r1
 800905a:	eb42 0303 	adc.w	r3, r2, r3
 800905e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	663b      	str	r3, [r7, #96]	@ 0x60
 800906a:	667a      	str	r2, [r7, #100]	@ 0x64
 800906c:	f04f 0200 	mov.w	r2, #0
 8009070:	f04f 0300 	mov.w	r3, #0
 8009074:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009078:	4649      	mov	r1, r9
 800907a:	008b      	lsls	r3, r1, #2
 800907c:	4641      	mov	r1, r8
 800907e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009082:	4641      	mov	r1, r8
 8009084:	008a      	lsls	r2, r1, #2
 8009086:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800908a:	f7f7 f8c9 	bl	8000220 <__aeabi_uldivmod>
 800908e:	4602      	mov	r2, r0
 8009090:	460b      	mov	r3, r1
 8009092:	4b0d      	ldr	r3, [pc, #52]	@ (80090c8 <UART_SetConfig+0x504>)
 8009094:	fba3 1302 	umull	r1, r3, r3, r2
 8009098:	095b      	lsrs	r3, r3, #5
 800909a:	2164      	movs	r1, #100	@ 0x64
 800909c:	fb01 f303 	mul.w	r3, r1, r3
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	011b      	lsls	r3, r3, #4
 80090a4:	3332      	adds	r3, #50	@ 0x32
 80090a6:	4a08      	ldr	r2, [pc, #32]	@ (80090c8 <UART_SetConfig+0x504>)
 80090a8:	fba2 2303 	umull	r2, r3, r2, r3
 80090ac:	095b      	lsrs	r3, r3, #5
 80090ae:	f003 020f 	and.w	r2, r3, #15
 80090b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4422      	add	r2, r4
 80090ba:	609a      	str	r2, [r3, #8]
}
 80090bc:	bf00      	nop
 80090be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80090c2:	46bd      	mov	sp, r7
 80090c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090c8:	51eb851f 	.word	0x51eb851f

080090cc <__NVIC_SetPriority>:
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	6039      	str	r1, [r7, #0]
 80090d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	db0a      	blt.n	80090f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	490c      	ldr	r1, [pc, #48]	@ (8009118 <__NVIC_SetPriority+0x4c>)
 80090e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090ea:	0112      	lsls	r2, r2, #4
 80090ec:	b2d2      	uxtb	r2, r2
 80090ee:	440b      	add	r3, r1
 80090f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80090f4:	e00a      	b.n	800910c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	4908      	ldr	r1, [pc, #32]	@ (800911c <__NVIC_SetPriority+0x50>)
 80090fc:	79fb      	ldrb	r3, [r7, #7]
 80090fe:	f003 030f 	and.w	r3, r3, #15
 8009102:	3b04      	subs	r3, #4
 8009104:	0112      	lsls	r2, r2, #4
 8009106:	b2d2      	uxtb	r2, r2
 8009108:	440b      	add	r3, r1
 800910a:	761a      	strb	r2, [r3, #24]
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr
 8009118:	e000e100 	.word	0xe000e100
 800911c:	e000ed00 	.word	0xe000ed00

08009120 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009120:	b580      	push	{r7, lr}
 8009122:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009124:	2100      	movs	r1, #0
 8009126:	f06f 0004 	mvn.w	r0, #4
 800912a:	f7ff ffcf 	bl	80090cc <__NVIC_SetPriority>
#endif
}
 800912e:	bf00      	nop
 8009130:	bd80      	pop	{r7, pc}
	...

08009134 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800913a:	f3ef 8305 	mrs	r3, IPSR
 800913e:	603b      	str	r3, [r7, #0]
  return(result);
 8009140:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009142:	2b00      	cmp	r3, #0
 8009144:	d003      	beq.n	800914e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009146:	f06f 0305 	mvn.w	r3, #5
 800914a:	607b      	str	r3, [r7, #4]
 800914c:	e00c      	b.n	8009168 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800914e:	4b0a      	ldr	r3, [pc, #40]	@ (8009178 <osKernelInitialize+0x44>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d105      	bne.n	8009162 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009156:	4b08      	ldr	r3, [pc, #32]	@ (8009178 <osKernelInitialize+0x44>)
 8009158:	2201      	movs	r2, #1
 800915a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800915c:	2300      	movs	r3, #0
 800915e:	607b      	str	r3, [r7, #4]
 8009160:	e002      	b.n	8009168 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009162:	f04f 33ff 	mov.w	r3, #4294967295
 8009166:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009168:	687b      	ldr	r3, [r7, #4]
}
 800916a:	4618      	mov	r0, r3
 800916c:	370c      	adds	r7, #12
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	20000588 	.word	0x20000588

0800917c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009182:	f3ef 8305 	mrs	r3, IPSR
 8009186:	603b      	str	r3, [r7, #0]
  return(result);
 8009188:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800918a:	2b00      	cmp	r3, #0
 800918c:	d003      	beq.n	8009196 <osKernelStart+0x1a>
    stat = osErrorISR;
 800918e:	f06f 0305 	mvn.w	r3, #5
 8009192:	607b      	str	r3, [r7, #4]
 8009194:	e010      	b.n	80091b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009196:	4b0b      	ldr	r3, [pc, #44]	@ (80091c4 <osKernelStart+0x48>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d109      	bne.n	80091b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800919e:	f7ff ffbf 	bl	8009120 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80091a2:	4b08      	ldr	r3, [pc, #32]	@ (80091c4 <osKernelStart+0x48>)
 80091a4:	2202      	movs	r2, #2
 80091a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80091a8:	f001 ff04 	bl	800afb4 <vTaskStartScheduler>
      stat = osOK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	607b      	str	r3, [r7, #4]
 80091b0:	e002      	b.n	80091b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80091b2:	f04f 33ff 	mov.w	r3, #4294967295
 80091b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80091b8:	687b      	ldr	r3, [r7, #4]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	20000588 	.word	0x20000588

080091c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b08e      	sub	sp, #56	@ 0x38
 80091cc:	af04      	add	r7, sp, #16
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80091d4:	2300      	movs	r3, #0
 80091d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091d8:	f3ef 8305 	mrs	r3, IPSR
 80091dc:	617b      	str	r3, [r7, #20]
  return(result);
 80091de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d17e      	bne.n	80092e2 <osThreadNew+0x11a>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d07b      	beq.n	80092e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80091ea:	2380      	movs	r3, #128	@ 0x80
 80091ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80091ee:	2318      	movs	r3, #24
 80091f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80091f2:	2300      	movs	r3, #0
 80091f4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80091f6:	f04f 33ff 	mov.w	r3, #4294967295
 80091fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d045      	beq.n	800928e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d002      	beq.n	8009210 <osThreadNew+0x48>
        name = attr->name;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d008      	beq.n	8009236 <osThreadNew+0x6e>
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	2b38      	cmp	r3, #56	@ 0x38
 8009228:	d805      	bhi.n	8009236 <osThreadNew+0x6e>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <osThreadNew+0x72>
        return (NULL);
 8009236:	2300      	movs	r3, #0
 8009238:	e054      	b.n	80092e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	695b      	ldr	r3, [r3, #20]
 8009246:	089b      	lsrs	r3, r3, #2
 8009248:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00e      	beq.n	8009270 <osThreadNew+0xa8>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	2b5b      	cmp	r3, #91	@ 0x5b
 8009258:	d90a      	bls.n	8009270 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800925e:	2b00      	cmp	r3, #0
 8009260:	d006      	beq.n	8009270 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d002      	beq.n	8009270 <osThreadNew+0xa8>
        mem = 1;
 800926a:	2301      	movs	r3, #1
 800926c:	61bb      	str	r3, [r7, #24]
 800926e:	e010      	b.n	8009292 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10c      	bne.n	8009292 <osThreadNew+0xca>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d108      	bne.n	8009292 <osThreadNew+0xca>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d104      	bne.n	8009292 <osThreadNew+0xca>
          mem = 0;
 8009288:	2300      	movs	r3, #0
 800928a:	61bb      	str	r3, [r7, #24]
 800928c:	e001      	b.n	8009292 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800928e:	2300      	movs	r3, #0
 8009290:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d110      	bne.n	80092ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092a0:	9202      	str	r2, [sp, #8]
 80092a2:	9301      	str	r3, [sp, #4]
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	6a3a      	ldr	r2, [r7, #32]
 80092ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f001 fca4 	bl	800abfc <xTaskCreateStatic>
 80092b4:	4603      	mov	r3, r0
 80092b6:	613b      	str	r3, [r7, #16]
 80092b8:	e013      	b.n	80092e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d110      	bne.n	80092e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80092c0:	6a3b      	ldr	r3, [r7, #32]
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	f107 0310 	add.w	r3, r7, #16
 80092c8:	9301      	str	r3, [sp, #4]
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f001 fcf2 	bl	800acbc <xTaskCreate>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d001      	beq.n	80092e2 <osThreadNew+0x11a>
            hTask = NULL;
 80092de:	2300      	movs	r3, #0
 80092e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80092e2:	693b      	ldr	r3, [r7, #16]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3728      	adds	r7, #40	@ 0x28
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092f4:	f3ef 8305 	mrs	r3, IPSR
 80092f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80092fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d003      	beq.n	8009308 <osDelay+0x1c>
    stat = osErrorISR;
 8009300:	f06f 0305 	mvn.w	r3, #5
 8009304:	60fb      	str	r3, [r7, #12]
 8009306:	e007      	b.n	8009318 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009308:	2300      	movs	r3, #0
 800930a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f001 fe18 	bl	800af48 <vTaskDelay>
    }
  }

  return (stat);
 8009318:	68fb      	ldr	r3, [r7, #12]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009322:	b580      	push	{r7, lr}
 8009324:	b088      	sub	sp, #32
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800932a:	2300      	movs	r3, #0
 800932c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800932e:	f3ef 8305 	mrs	r3, IPSR
 8009332:	60bb      	str	r3, [r7, #8]
  return(result);
 8009334:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009336:	2b00      	cmp	r3, #0
 8009338:	d174      	bne.n	8009424 <osMutexNew+0x102>
    if (attr != NULL) {
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d003      	beq.n	8009348 <osMutexNew+0x26>
      type = attr->attr_bits;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	61bb      	str	r3, [r7, #24]
 8009346:	e001      	b.n	800934c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009348:	2300      	movs	r3, #0
 800934a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d002      	beq.n	800935c <osMutexNew+0x3a>
      rmtx = 1U;
 8009356:	2301      	movs	r3, #1
 8009358:	617b      	str	r3, [r7, #20]
 800935a:	e001      	b.n	8009360 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800935c:	2300      	movs	r3, #0
 800935e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	f003 0308 	and.w	r3, r3, #8
 8009366:	2b00      	cmp	r3, #0
 8009368:	d15c      	bne.n	8009424 <osMutexNew+0x102>
      mem = -1;
 800936a:	f04f 33ff 	mov.w	r3, #4294967295
 800936e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d015      	beq.n	80093a2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d006      	beq.n	800938c <osMutexNew+0x6a>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	2b4f      	cmp	r3, #79	@ 0x4f
 8009384:	d902      	bls.n	800938c <osMutexNew+0x6a>
          mem = 1;
 8009386:	2301      	movs	r3, #1
 8009388:	613b      	str	r3, [r7, #16]
 800938a:	e00c      	b.n	80093a6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d108      	bne.n	80093a6 <osMutexNew+0x84>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d104      	bne.n	80093a6 <osMutexNew+0x84>
            mem = 0;
 800939c:	2300      	movs	r3, #0
 800939e:	613b      	str	r3, [r7, #16]
 80093a0:	e001      	b.n	80093a6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80093a2:	2300      	movs	r3, #0
 80093a4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d112      	bne.n	80093d2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d007      	beq.n	80093c2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	4619      	mov	r1, r3
 80093b8:	2004      	movs	r0, #4
 80093ba:	f000 fcb2 	bl	8009d22 <xQueueCreateMutexStatic>
 80093be:	61f8      	str	r0, [r7, #28]
 80093c0:	e016      	b.n	80093f0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	4619      	mov	r1, r3
 80093c8:	2001      	movs	r0, #1
 80093ca:	f000 fcaa 	bl	8009d22 <xQueueCreateMutexStatic>
 80093ce:	61f8      	str	r0, [r7, #28]
 80093d0:	e00e      	b.n	80093f0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10b      	bne.n	80093f0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d004      	beq.n	80093e8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80093de:	2004      	movs	r0, #4
 80093e0:	f000 fc87 	bl	8009cf2 <xQueueCreateMutex>
 80093e4:	61f8      	str	r0, [r7, #28]
 80093e6:	e003      	b.n	80093f0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80093e8:	2001      	movs	r0, #1
 80093ea:	f000 fc82 	bl	8009cf2 <xQueueCreateMutex>
 80093ee:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00c      	beq.n	8009410 <osMutexNew+0xee>
        if (attr != NULL) {
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d003      	beq.n	8009404 <osMutexNew+0xe2>
          name = attr->name;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	60fb      	str	r3, [r7, #12]
 8009402:	e001      	b.n	8009408 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009404:	2300      	movs	r3, #0
 8009406:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009408:	68f9      	ldr	r1, [r7, #12]
 800940a:	69f8      	ldr	r0, [r7, #28]
 800940c:	f001 fb6e 	bl	800aaec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d006      	beq.n	8009424 <osMutexNew+0x102>
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d003      	beq.n	8009424 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	f043 0301 	orr.w	r3, r3, #1
 8009422:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009424:	69fb      	ldr	r3, [r7, #28]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3720      	adds	r7, #32
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800942e:	b580      	push	{r7, lr}
 8009430:	b086      	sub	sp, #24
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f023 0301 	bic.w	r3, r3, #1
 800943e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009448:	2300      	movs	r3, #0
 800944a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800944c:	f3ef 8305 	mrs	r3, IPSR
 8009450:	60bb      	str	r3, [r7, #8]
  return(result);
 8009452:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009454:	2b00      	cmp	r3, #0
 8009456:	d003      	beq.n	8009460 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8009458:	f06f 0305 	mvn.w	r3, #5
 800945c:	617b      	str	r3, [r7, #20]
 800945e:	e02c      	b.n	80094ba <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d103      	bne.n	800946e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8009466:	f06f 0303 	mvn.w	r3, #3
 800946a:	617b      	str	r3, [r7, #20]
 800946c:	e025      	b.n	80094ba <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d011      	beq.n	8009498 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009474:	6839      	ldr	r1, [r7, #0]
 8009476:	6938      	ldr	r0, [r7, #16]
 8009478:	f000 fca3 	bl	8009dc2 <xQueueTakeMutexRecursive>
 800947c:	4603      	mov	r3, r0
 800947e:	2b01      	cmp	r3, #1
 8009480:	d01b      	beq.n	80094ba <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d003      	beq.n	8009490 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8009488:	f06f 0301 	mvn.w	r3, #1
 800948c:	617b      	str	r3, [r7, #20]
 800948e:	e014      	b.n	80094ba <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009490:	f06f 0302 	mvn.w	r3, #2
 8009494:	617b      	str	r3, [r7, #20]
 8009496:	e010      	b.n	80094ba <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6938      	ldr	r0, [r7, #16]
 800949c:	f001 f848 	bl	800a530 <xQueueSemaphoreTake>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d009      	beq.n	80094ba <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d003      	beq.n	80094b4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80094ac:	f06f 0301 	mvn.w	r3, #1
 80094b0:	617b      	str	r3, [r7, #20]
 80094b2:	e002      	b.n	80094ba <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80094b4:	f06f 0302 	mvn.w	r3, #2
 80094b8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80094ba:	697b      	ldr	r3, [r7, #20]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f023 0301 	bic.w	r3, r3, #1
 80094d2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80094dc:	2300      	movs	r3, #0
 80094de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094e0:	f3ef 8305 	mrs	r3, IPSR
 80094e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80094e6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d003      	beq.n	80094f4 <osMutexRelease+0x30>
    stat = osErrorISR;
 80094ec:	f06f 0305 	mvn.w	r3, #5
 80094f0:	617b      	str	r3, [r7, #20]
 80094f2:	e01f      	b.n	8009534 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d103      	bne.n	8009502 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80094fa:	f06f 0303 	mvn.w	r3, #3
 80094fe:	617b      	str	r3, [r7, #20]
 8009500:	e018      	b.n	8009534 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d009      	beq.n	800951c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009508:	6938      	ldr	r0, [r7, #16]
 800950a:	f000 fc25 	bl	8009d58 <xQueueGiveMutexRecursive>
 800950e:	4603      	mov	r3, r0
 8009510:	2b01      	cmp	r3, #1
 8009512:	d00f      	beq.n	8009534 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009514:	f06f 0302 	mvn.w	r3, #2
 8009518:	617b      	str	r3, [r7, #20]
 800951a:	e00b      	b.n	8009534 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800951c:	2300      	movs	r3, #0
 800951e:	2200      	movs	r2, #0
 8009520:	2100      	movs	r1, #0
 8009522:	6938      	ldr	r0, [r7, #16]
 8009524:	f000 fcf2 	bl	8009f0c <xQueueGenericSend>
 8009528:	4603      	mov	r3, r0
 800952a:	2b01      	cmp	r3, #1
 800952c:	d002      	beq.n	8009534 <osMutexRelease+0x70>
        stat = osErrorResource;
 800952e:	f06f 0302 	mvn.w	r3, #2
 8009532:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009534:	697b      	ldr	r3, [r7, #20]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3718      	adds	r7, #24
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800953e:	b580      	push	{r7, lr}
 8009540:	b08a      	sub	sp, #40	@ 0x28
 8009542:	af02      	add	r7, sp, #8
 8009544:	60f8      	str	r0, [r7, #12]
 8009546:	60b9      	str	r1, [r7, #8]
 8009548:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800954a:	2300      	movs	r3, #0
 800954c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800954e:	f3ef 8305 	mrs	r3, IPSR
 8009552:	613b      	str	r3, [r7, #16]
  return(result);
 8009554:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009556:	2b00      	cmp	r3, #0
 8009558:	d175      	bne.n	8009646 <osSemaphoreNew+0x108>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d072      	beq.n	8009646 <osSemaphoreNew+0x108>
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	429a      	cmp	r2, r3
 8009566:	d86e      	bhi.n	8009646 <osSemaphoreNew+0x108>
    mem = -1;
 8009568:	f04f 33ff 	mov.w	r3, #4294967295
 800956c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d015      	beq.n	80095a0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d006      	beq.n	800958a <osSemaphoreNew+0x4c>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	2b4f      	cmp	r3, #79	@ 0x4f
 8009582:	d902      	bls.n	800958a <osSemaphoreNew+0x4c>
        mem = 1;
 8009584:	2301      	movs	r3, #1
 8009586:	61bb      	str	r3, [r7, #24]
 8009588:	e00c      	b.n	80095a4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d108      	bne.n	80095a4 <osSemaphoreNew+0x66>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d104      	bne.n	80095a4 <osSemaphoreNew+0x66>
          mem = 0;
 800959a:	2300      	movs	r3, #0
 800959c:	61bb      	str	r3, [r7, #24]
 800959e:	e001      	b.n	80095a4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80095a0:	2300      	movs	r3, #0
 80095a2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095aa:	d04c      	beq.n	8009646 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d128      	bne.n	8009604 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d10a      	bne.n	80095ce <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	2203      	movs	r2, #3
 80095be:	9200      	str	r2, [sp, #0]
 80095c0:	2200      	movs	r2, #0
 80095c2:	2100      	movs	r1, #0
 80095c4:	2001      	movs	r0, #1
 80095c6:	f000 fa9f 	bl	8009b08 <xQueueGenericCreateStatic>
 80095ca:	61f8      	str	r0, [r7, #28]
 80095cc:	e005      	b.n	80095da <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80095ce:	2203      	movs	r2, #3
 80095d0:	2100      	movs	r1, #0
 80095d2:	2001      	movs	r0, #1
 80095d4:	f000 fb15 	bl	8009c02 <xQueueGenericCreate>
 80095d8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d022      	beq.n	8009626 <osSemaphoreNew+0xe8>
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d01f      	beq.n	8009626 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80095e6:	2300      	movs	r3, #0
 80095e8:	2200      	movs	r2, #0
 80095ea:	2100      	movs	r1, #0
 80095ec:	69f8      	ldr	r0, [r7, #28]
 80095ee:	f000 fc8d 	bl	8009f0c <xQueueGenericSend>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d016      	beq.n	8009626 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80095f8:	69f8      	ldr	r0, [r7, #28]
 80095fa:	f001 f92b 	bl	800a854 <vQueueDelete>
            hSemaphore = NULL;
 80095fe:	2300      	movs	r3, #0
 8009600:	61fb      	str	r3, [r7, #28]
 8009602:	e010      	b.n	8009626 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d108      	bne.n	800961c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	461a      	mov	r2, r3
 8009610:	68b9      	ldr	r1, [r7, #8]
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 fc0c 	bl	8009e30 <xQueueCreateCountingSemaphoreStatic>
 8009618:	61f8      	str	r0, [r7, #28]
 800961a:	e004      	b.n	8009626 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800961c:	68b9      	ldr	r1, [r7, #8]
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f000 fc3f 	bl	8009ea2 <xQueueCreateCountingSemaphore>
 8009624:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00c      	beq.n	8009646 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <osSemaphoreNew+0xfc>
          name = attr->name;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	617b      	str	r3, [r7, #20]
 8009638:	e001      	b.n	800963e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800963a:	2300      	movs	r3, #0
 800963c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800963e:	6979      	ldr	r1, [r7, #20]
 8009640:	69f8      	ldr	r0, [r7, #28]
 8009642:	f001 fa53 	bl	800aaec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009646:	69fb      	ldr	r3, [r7, #28]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3720      	adds	r7, #32
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009650:	b580      	push	{r7, lr}
 8009652:	b086      	sub	sp, #24
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800965e:	2300      	movs	r3, #0
 8009660:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d103      	bne.n	8009670 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009668:	f06f 0303 	mvn.w	r3, #3
 800966c:	617b      	str	r3, [r7, #20]
 800966e:	e039      	b.n	80096e4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009670:	f3ef 8305 	mrs	r3, IPSR
 8009674:	60fb      	str	r3, [r7, #12]
  return(result);
 8009676:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009678:	2b00      	cmp	r3, #0
 800967a:	d022      	beq.n	80096c2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d003      	beq.n	800968a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009682:	f06f 0303 	mvn.w	r3, #3
 8009686:	617b      	str	r3, [r7, #20]
 8009688:	e02c      	b.n	80096e4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800968a:	2300      	movs	r3, #0
 800968c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800968e:	f107 0308 	add.w	r3, r7, #8
 8009692:	461a      	mov	r2, r3
 8009694:	2100      	movs	r1, #0
 8009696:	6938      	ldr	r0, [r7, #16]
 8009698:	f001 f85a 	bl	800a750 <xQueueReceiveFromISR>
 800969c:	4603      	mov	r3, r0
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d003      	beq.n	80096aa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80096a2:	f06f 0302 	mvn.w	r3, #2
 80096a6:	617b      	str	r3, [r7, #20]
 80096a8:	e01c      	b.n	80096e4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d019      	beq.n	80096e4 <osSemaphoreAcquire+0x94>
 80096b0:	4b0f      	ldr	r3, [pc, #60]	@ (80096f0 <osSemaphoreAcquire+0xa0>)
 80096b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096b6:	601a      	str	r2, [r3, #0]
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	e010      	b.n	80096e4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80096c2:	6839      	ldr	r1, [r7, #0]
 80096c4:	6938      	ldr	r0, [r7, #16]
 80096c6:	f000 ff33 	bl	800a530 <xQueueSemaphoreTake>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d009      	beq.n	80096e4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d003      	beq.n	80096de <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80096d6:	f06f 0301 	mvn.w	r3, #1
 80096da:	617b      	str	r3, [r7, #20]
 80096dc:	e002      	b.n	80096e4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80096de:	f06f 0302 	mvn.w	r3, #2
 80096e2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80096e4:	697b      	ldr	r3, [r7, #20]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	e000ed04 	.word	0xe000ed04

080096f4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009700:	2300      	movs	r3, #0
 8009702:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d103      	bne.n	8009712 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800970a:	f06f 0303 	mvn.w	r3, #3
 800970e:	617b      	str	r3, [r7, #20]
 8009710:	e02c      	b.n	800976c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009712:	f3ef 8305 	mrs	r3, IPSR
 8009716:	60fb      	str	r3, [r7, #12]
  return(result);
 8009718:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800971a:	2b00      	cmp	r3, #0
 800971c:	d01a      	beq.n	8009754 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800971e:	2300      	movs	r3, #0
 8009720:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009722:	f107 0308 	add.w	r3, r7, #8
 8009726:	4619      	mov	r1, r3
 8009728:	6938      	ldr	r0, [r7, #16]
 800972a:	f000 fd8f 	bl	800a24c <xQueueGiveFromISR>
 800972e:	4603      	mov	r3, r0
 8009730:	2b01      	cmp	r3, #1
 8009732:	d003      	beq.n	800973c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009734:	f06f 0302 	mvn.w	r3, #2
 8009738:	617b      	str	r3, [r7, #20]
 800973a:	e017      	b.n	800976c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d014      	beq.n	800976c <osSemaphoreRelease+0x78>
 8009742:	4b0d      	ldr	r3, [pc, #52]	@ (8009778 <osSemaphoreRelease+0x84>)
 8009744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009748:	601a      	str	r2, [r3, #0]
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	e00b      	b.n	800976c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009754:	2300      	movs	r3, #0
 8009756:	2200      	movs	r2, #0
 8009758:	2100      	movs	r1, #0
 800975a:	6938      	ldr	r0, [r7, #16]
 800975c:	f000 fbd6 	bl	8009f0c <xQueueGenericSend>
 8009760:	4603      	mov	r3, r0
 8009762:	2b01      	cmp	r3, #1
 8009764:	d002      	beq.n	800976c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009766:	f06f 0302 	mvn.w	r3, #2
 800976a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800976c:	697b      	ldr	r3, [r7, #20]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3718      	adds	r7, #24
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	e000ed04 	.word	0xe000ed04

0800977c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800977c:	b580      	push	{r7, lr}
 800977e:	b08a      	sub	sp, #40	@ 0x28
 8009780:	af02      	add	r7, sp, #8
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009788:	2300      	movs	r3, #0
 800978a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800978c:	f3ef 8305 	mrs	r3, IPSR
 8009790:	613b      	str	r3, [r7, #16]
  return(result);
 8009792:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009794:	2b00      	cmp	r3, #0
 8009796:	d15f      	bne.n	8009858 <osMessageQueueNew+0xdc>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d05c      	beq.n	8009858 <osMessageQueueNew+0xdc>
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d059      	beq.n	8009858 <osMessageQueueNew+0xdc>
    mem = -1;
 80097a4:	f04f 33ff 	mov.w	r3, #4294967295
 80097a8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d029      	beq.n	8009804 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d012      	beq.n	80097de <osMessageQueueNew+0x62>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	2b4f      	cmp	r3, #79	@ 0x4f
 80097be:	d90e      	bls.n	80097de <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00a      	beq.n	80097de <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	695a      	ldr	r2, [r3, #20]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	68b9      	ldr	r1, [r7, #8]
 80097d0:	fb01 f303 	mul.w	r3, r1, r3
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d302      	bcc.n	80097de <osMessageQueueNew+0x62>
        mem = 1;
 80097d8:	2301      	movs	r3, #1
 80097da:	61bb      	str	r3, [r7, #24]
 80097dc:	e014      	b.n	8009808 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d110      	bne.n	8009808 <osMessageQueueNew+0x8c>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10c      	bne.n	8009808 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d108      	bne.n	8009808 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	695b      	ldr	r3, [r3, #20]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d104      	bne.n	8009808 <osMessageQueueNew+0x8c>
          mem = 0;
 80097fe:	2300      	movs	r3, #0
 8009800:	61bb      	str	r3, [r7, #24]
 8009802:	e001      	b.n	8009808 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009804:	2300      	movs	r3, #0
 8009806:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d10b      	bne.n	8009826 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	691a      	ldr	r2, [r3, #16]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	2100      	movs	r1, #0
 8009818:	9100      	str	r1, [sp, #0]
 800981a:	68b9      	ldr	r1, [r7, #8]
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f000 f973 	bl	8009b08 <xQueueGenericCreateStatic>
 8009822:	61f8      	str	r0, [r7, #28]
 8009824:	e008      	b.n	8009838 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d105      	bne.n	8009838 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800982c:	2200      	movs	r2, #0
 800982e:	68b9      	ldr	r1, [r7, #8]
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f000 f9e6 	bl	8009c02 <xQueueGenericCreate>
 8009836:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00c      	beq.n	8009858 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d003      	beq.n	800984c <osMessageQueueNew+0xd0>
        name = attr->name;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	617b      	str	r3, [r7, #20]
 800984a:	e001      	b.n	8009850 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800984c:	2300      	movs	r3, #0
 800984e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009850:	6979      	ldr	r1, [r7, #20]
 8009852:	69f8      	ldr	r0, [r7, #28]
 8009854:	f001 f94a 	bl	800aaec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009858:	69fb      	ldr	r3, [r7, #28]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3720      	adds	r7, #32
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
	...

08009864 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4a07      	ldr	r2, [pc, #28]	@ (8009890 <vApplicationGetIdleTaskMemory+0x2c>)
 8009874:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	4a06      	ldr	r2, [pc, #24]	@ (8009894 <vApplicationGetIdleTaskMemory+0x30>)
 800987a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2280      	movs	r2, #128	@ 0x80
 8009880:	601a      	str	r2, [r3, #0]
}
 8009882:	bf00      	nop
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	2000058c 	.word	0x2000058c
 8009894:	200005e8 	.word	0x200005e8

08009898 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4a07      	ldr	r2, [pc, #28]	@ (80098c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80098a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	4a06      	ldr	r2, [pc, #24]	@ (80098c8 <vApplicationGetTimerTaskMemory+0x30>)
 80098ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80098b6:	601a      	str	r2, [r3, #0]
}
 80098b8:	bf00      	nop
 80098ba:	3714      	adds	r7, #20
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	200007e8 	.word	0x200007e8
 80098c8:	20000844 	.word	0x20000844

080098cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f103 0208 	add.w	r2, r3, #8
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f04f 32ff 	mov.w	r2, #4294967295
 80098e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f103 0208 	add.w	r2, r3, #8
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f103 0208 	add.w	r2, r3, #8
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800991a:	bf00      	nop
 800991c:	370c      	adds	r7, #12
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr

08009926 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009926:	b480      	push	{r7}
 8009928:	b085      	sub	sp, #20
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	689a      	ldr	r2, [r3, #8]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	1c5a      	adds	r2, r3, #1
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	601a      	str	r2, [r3, #0]
}
 8009962:	bf00      	nop
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800996e:	b480      	push	{r7}
 8009970:	b085      	sub	sp, #20
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009984:	d103      	bne.n	800998e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	60fb      	str	r3, [r7, #12]
 800998c:	e00c      	b.n	80099a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	3308      	adds	r3, #8
 8009992:	60fb      	str	r3, [r7, #12]
 8009994:	e002      	b.n	800999c <vListInsert+0x2e>
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	60fb      	str	r3, [r7, #12]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d2f6      	bcs.n	8009996 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	683a      	ldr	r2, [r7, #0]
 80099b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	601a      	str	r2, [r3, #0]
}
 80099d4:	bf00      	nop
 80099d6:	3714      	adds	r7, #20
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	6892      	ldr	r2, [r2, #8]
 80099f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	6852      	ldr	r2, [r2, #4]
 8009a00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d103      	bne.n	8009a14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	689a      	ldr	r2, [r3, #8]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	1e5a      	subs	r2, r3, #1
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10b      	bne.n	8009a60 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a4c:	f383 8811 	msr	BASEPRI, r3
 8009a50:	f3bf 8f6f 	isb	sy
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009a5a:	bf00      	nop
 8009a5c:	bf00      	nop
 8009a5e:	e7fd      	b.n	8009a5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009a60:	f002 fd72 	bl	800c548 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a6c:	68f9      	ldr	r1, [r7, #12]
 8009a6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009a70:	fb01 f303 	mul.w	r3, r1, r3
 8009a74:	441a      	add	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a90:	3b01      	subs	r3, #1
 8009a92:	68f9      	ldr	r1, [r7, #12]
 8009a94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009a96:	fb01 f303 	mul.w	r3, r1, r3
 8009a9a:	441a      	add	r2, r3
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	22ff      	movs	r2, #255	@ 0xff
 8009aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	22ff      	movs	r2, #255	@ 0xff
 8009aac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d114      	bne.n	8009ae0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d01a      	beq.n	8009af4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3310      	adds	r3, #16
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f001 fd04 	bl	800b4d0 <xTaskRemoveFromEventList>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d012      	beq.n	8009af4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ace:	4b0d      	ldr	r3, [pc, #52]	@ (8009b04 <xQueueGenericReset+0xd0>)
 8009ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ad4:	601a      	str	r2, [r3, #0]
 8009ad6:	f3bf 8f4f 	dsb	sy
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	e009      	b.n	8009af4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	3310      	adds	r3, #16
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7ff fef1 	bl	80098cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	3324      	adds	r3, #36	@ 0x24
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7ff feec 	bl	80098cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009af4:	f002 fd5a 	bl	800c5ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009af8:	2301      	movs	r3, #1
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	e000ed04 	.word	0xe000ed04

08009b08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08e      	sub	sp, #56	@ 0x38
 8009b0c:	af02      	add	r7, sp, #8
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10b      	bne.n	8009b34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009b2e:	bf00      	nop
 8009b30:	bf00      	nop
 8009b32:	e7fd      	b.n	8009b30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10b      	bne.n	8009b52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009b4c:	bf00      	nop
 8009b4e:	bf00      	nop
 8009b50:	e7fd      	b.n	8009b4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d002      	beq.n	8009b5e <xQueueGenericCreateStatic+0x56>
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d001      	beq.n	8009b62 <xQueueGenericCreateStatic+0x5a>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e000      	b.n	8009b64 <xQueueGenericCreateStatic+0x5c>
 8009b62:	2300      	movs	r3, #0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10b      	bne.n	8009b80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	623b      	str	r3, [r7, #32]
}
 8009b7a:	bf00      	nop
 8009b7c:	bf00      	nop
 8009b7e:	e7fd      	b.n	8009b7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d102      	bne.n	8009b8c <xQueueGenericCreateStatic+0x84>
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d101      	bne.n	8009b90 <xQueueGenericCreateStatic+0x88>
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e000      	b.n	8009b92 <xQueueGenericCreateStatic+0x8a>
 8009b90:	2300      	movs	r3, #0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10b      	bne.n	8009bae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9a:	f383 8811 	msr	BASEPRI, r3
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	61fb      	str	r3, [r7, #28]
}
 8009ba8:	bf00      	nop
 8009baa:	bf00      	nop
 8009bac:	e7fd      	b.n	8009baa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009bae:	2350      	movs	r3, #80	@ 0x50
 8009bb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2b50      	cmp	r3, #80	@ 0x50
 8009bb6:	d00b      	beq.n	8009bd0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bbc:	f383 8811 	msr	BASEPRI, r3
 8009bc0:	f3bf 8f6f 	isb	sy
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	61bb      	str	r3, [r7, #24]
}
 8009bca:	bf00      	nop
 8009bcc:	bf00      	nop
 8009bce:	e7fd      	b.n	8009bcc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009bd0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d00d      	beq.n	8009bf8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009be4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	4613      	mov	r3, r2
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	68b9      	ldr	r1, [r7, #8]
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f000 f840 	bl	8009c78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3730      	adds	r7, #48	@ 0x30
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b08a      	sub	sp, #40	@ 0x28
 8009c06:	af02      	add	r7, sp, #8
 8009c08:	60f8      	str	r0, [r7, #12]
 8009c0a:	60b9      	str	r1, [r7, #8]
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10b      	bne.n	8009c2e <xQueueGenericCreate+0x2c>
	__asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	613b      	str	r3, [r7, #16]
}
 8009c28:	bf00      	nop
 8009c2a:	bf00      	nop
 8009c2c:	e7fd      	b.n	8009c2a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	fb02 f303 	mul.w	r3, r2, r3
 8009c36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	3350      	adds	r3, #80	@ 0x50
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f002 fda5 	bl	800c78c <pvPortMalloc>
 8009c42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d011      	beq.n	8009c6e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	3350      	adds	r3, #80	@ 0x50
 8009c52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c5c:	79fa      	ldrb	r2, [r7, #7]
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	4613      	mov	r3, r2
 8009c64:	697a      	ldr	r2, [r7, #20]
 8009c66:	68b9      	ldr	r1, [r7, #8]
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f000 f805 	bl	8009c78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c6e:	69bb      	ldr	r3, [r7, #24]
	}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3720      	adds	r7, #32
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
 8009c84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d103      	bne.n	8009c94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	69ba      	ldr	r2, [r7, #24]
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	e002      	b.n	8009c9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ca6:	2101      	movs	r1, #1
 8009ca8:	69b8      	ldr	r0, [r7, #24]
 8009caa:	f7ff fec3 	bl	8009a34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	78fa      	ldrb	r2, [r7, #3]
 8009cb2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009cb6:	bf00      	nop
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b082      	sub	sp, #8
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00e      	beq.n	8009cea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009cde:	2300      	movs	r3, #0
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f911 	bl	8009f0c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009cea:	bf00      	nop
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b086      	sub	sp, #24
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	2300      	movs	r3, #0
 8009d02:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009d04:	79fb      	ldrb	r3, [r7, #7]
 8009d06:	461a      	mov	r2, r3
 8009d08:	6939      	ldr	r1, [r7, #16]
 8009d0a:	6978      	ldr	r0, [r7, #20]
 8009d0c:	f7ff ff79 	bl	8009c02 <xQueueGenericCreate>
 8009d10:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f7ff ffd3 	bl	8009cbe <prvInitialiseMutex>

		return xNewQueue;
 8009d18:	68fb      	ldr	r3, [r7, #12]
	}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3718      	adds	r7, #24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b088      	sub	sp, #32
 8009d26:	af02      	add	r7, sp, #8
 8009d28:	4603      	mov	r3, r0
 8009d2a:	6039      	str	r1, [r7, #0]
 8009d2c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	617b      	str	r3, [r7, #20]
 8009d32:	2300      	movs	r3, #0
 8009d34:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009d36:	79fb      	ldrb	r3, [r7, #7]
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	6939      	ldr	r1, [r7, #16]
 8009d40:	6978      	ldr	r0, [r7, #20]
 8009d42:	f7ff fee1 	bl	8009b08 <xQueueGenericCreateStatic>
 8009d46:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f7ff ffb8 	bl	8009cbe <prvInitialiseMutex>

		return xNewQueue;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
	}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3718      	adds	r7, #24
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009d58:	b590      	push	{r4, r7, lr}
 8009d5a:	b087      	sub	sp, #28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10b      	bne.n	8009d82 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8009d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d6e:	f383 8811 	msr	BASEPRI, r3
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	f3bf 8f4f 	dsb	sy
 8009d7a:	60fb      	str	r3, [r7, #12]
}
 8009d7c:	bf00      	nop
 8009d7e:	bf00      	nop
 8009d80:	e7fd      	b.n	8009d7e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	689c      	ldr	r4, [r3, #8]
 8009d86:	f001 fd63 	bl	800b850 <xTaskGetCurrentTaskHandle>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	429c      	cmp	r4, r3
 8009d8e:	d111      	bne.n	8009db4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	1e5a      	subs	r2, r3, #1
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d105      	bne.n	8009dae <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009da2:	2300      	movs	r3, #0
 8009da4:	2200      	movs	r2, #0
 8009da6:	2100      	movs	r1, #0
 8009da8:	6938      	ldr	r0, [r7, #16]
 8009daa:	f000 f8af 	bl	8009f0c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009dae:	2301      	movs	r3, #1
 8009db0:	617b      	str	r3, [r7, #20]
 8009db2:	e001      	b.n	8009db8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009db4:	2300      	movs	r3, #0
 8009db6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009db8:	697b      	ldr	r3, [r7, #20]
	}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	371c      	adds	r7, #28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd90      	pop	{r4, r7, pc}

08009dc2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009dc2:	b590      	push	{r4, r7, lr}
 8009dc4:	b087      	sub	sp, #28
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d10b      	bne.n	8009dee <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8009dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	60fb      	str	r3, [r7, #12]
}
 8009de8:	bf00      	nop
 8009dea:	bf00      	nop
 8009dec:	e7fd      	b.n	8009dea <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	689c      	ldr	r4, [r3, #8]
 8009df2:	f001 fd2d 	bl	800b850 <xTaskGetCurrentTaskHandle>
 8009df6:	4603      	mov	r3, r0
 8009df8:	429c      	cmp	r4, r3
 8009dfa:	d107      	bne.n	8009e0c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	1c5a      	adds	r2, r3, #1
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009e06:	2301      	movs	r3, #1
 8009e08:	617b      	str	r3, [r7, #20]
 8009e0a:	e00c      	b.n	8009e26 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6938      	ldr	r0, [r7, #16]
 8009e10:	f000 fb8e 	bl	800a530 <xQueueSemaphoreTake>
 8009e14:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d004      	beq.n	8009e26 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	1c5a      	adds	r2, r3, #1
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009e26:	697b      	ldr	r3, [r7, #20]
	}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	371c      	adds	r7, #28
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd90      	pop	{r4, r7, pc}

08009e30 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b08a      	sub	sp, #40	@ 0x28
 8009e34:	af02      	add	r7, sp, #8
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10b      	bne.n	8009e5a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8009e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	61bb      	str	r3, [r7, #24]
}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop
 8009e58:	e7fd      	b.n	8009e56 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d90b      	bls.n	8009e7a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	617b      	str	r3, [r7, #20]
}
 8009e74:	bf00      	nop
 8009e76:	bf00      	nop
 8009e78:	e7fd      	b.n	8009e76 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009e7a:	2302      	movs	r3, #2
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	2100      	movs	r1, #0
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f7ff fe3f 	bl	8009b08 <xQueueGenericCreateStatic>
 8009e8a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d002      	beq.n	8009e98 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009e98:	69fb      	ldr	r3, [r7, #28]
	}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3720      	adds	r7, #32
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b086      	sub	sp, #24
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10b      	bne.n	8009eca <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8009eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	613b      	str	r3, [r7, #16]
}
 8009ec4:	bf00      	nop
 8009ec6:	bf00      	nop
 8009ec8:	e7fd      	b.n	8009ec6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009eca:	683a      	ldr	r2, [r7, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d90b      	bls.n	8009eea <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	60fb      	str	r3, [r7, #12]
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop
 8009ee8:	e7fd      	b.n	8009ee6 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009eea:	2202      	movs	r2, #2
 8009eec:	2100      	movs	r1, #0
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f7ff fe87 	bl	8009c02 <xQueueGenericCreate>
 8009ef4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	683a      	ldr	r2, [r7, #0]
 8009f00:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009f02:	697b      	ldr	r3, [r7, #20]
	}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3718      	adds	r7, #24
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b08e      	sub	sp, #56	@ 0x38
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]
 8009f18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10b      	bne.n	8009f40 <xQueueGenericSend+0x34>
	__asm volatile
 8009f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f3a:	bf00      	nop
 8009f3c:	bf00      	nop
 8009f3e:	e7fd      	b.n	8009f3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d103      	bne.n	8009f4e <xQueueGenericSend+0x42>
 8009f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <xQueueGenericSend+0x46>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e000      	b.n	8009f54 <xQueueGenericSend+0x48>
 8009f52:	2300      	movs	r3, #0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10b      	bne.n	8009f70 <xQueueGenericSend+0x64>
	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f6a:	bf00      	nop
 8009f6c:	bf00      	nop
 8009f6e:	e7fd      	b.n	8009f6c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d103      	bne.n	8009f7e <xQueueGenericSend+0x72>
 8009f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d101      	bne.n	8009f82 <xQueueGenericSend+0x76>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e000      	b.n	8009f84 <xQueueGenericSend+0x78>
 8009f82:	2300      	movs	r3, #0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10b      	bne.n	8009fa0 <xQueueGenericSend+0x94>
	__asm volatile
 8009f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8c:	f383 8811 	msr	BASEPRI, r3
 8009f90:	f3bf 8f6f 	isb	sy
 8009f94:	f3bf 8f4f 	dsb	sy
 8009f98:	623b      	str	r3, [r7, #32]
}
 8009f9a:	bf00      	nop
 8009f9c:	bf00      	nop
 8009f9e:	e7fd      	b.n	8009f9c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fa0:	f001 fc66 	bl	800b870 <xTaskGetSchedulerState>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d102      	bne.n	8009fb0 <xQueueGenericSend+0xa4>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d101      	bne.n	8009fb4 <xQueueGenericSend+0xa8>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e000      	b.n	8009fb6 <xQueueGenericSend+0xaa>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d10b      	bne.n	8009fd2 <xQueueGenericSend+0xc6>
	__asm volatile
 8009fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	61fb      	str	r3, [r7, #28]
}
 8009fcc:	bf00      	nop
 8009fce:	bf00      	nop
 8009fd0:	e7fd      	b.n	8009fce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009fd2:	f002 fab9 	bl	800c548 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d302      	bcc.n	8009fe8 <xQueueGenericSend+0xdc>
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	2b02      	cmp	r3, #2
 8009fe6:	d129      	bne.n	800a03c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	68b9      	ldr	r1, [r7, #8]
 8009fec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fee:	f000 fc6d 	bl	800a8cc <prvCopyDataToQueue>
 8009ff2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d010      	beq.n	800a01e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffe:	3324      	adds	r3, #36	@ 0x24
 800a000:	4618      	mov	r0, r3
 800a002:	f001 fa65 	bl	800b4d0 <xTaskRemoveFromEventList>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d013      	beq.n	800a034 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a00c:	4b3f      	ldr	r3, [pc, #252]	@ (800a10c <xQueueGenericSend+0x200>)
 800a00e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a012:	601a      	str	r2, [r3, #0]
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	e00a      	b.n	800a034 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a01e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a020:	2b00      	cmp	r3, #0
 800a022:	d007      	beq.n	800a034 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a024:	4b39      	ldr	r3, [pc, #228]	@ (800a10c <xQueueGenericSend+0x200>)
 800a026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a02a:	601a      	str	r2, [r3, #0]
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a034:	f002 faba 	bl	800c5ac <vPortExitCritical>
				return pdPASS;
 800a038:	2301      	movs	r3, #1
 800a03a:	e063      	b.n	800a104 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d103      	bne.n	800a04a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a042:	f002 fab3 	bl	800c5ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a046:	2300      	movs	r3, #0
 800a048:	e05c      	b.n	800a104 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a04a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d106      	bne.n	800a05e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a050:	f107 0314 	add.w	r3, r7, #20
 800a054:	4618      	mov	r0, r3
 800a056:	f001 fa9f 	bl	800b598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a05a:	2301      	movs	r3, #1
 800a05c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a05e:	f002 faa5 	bl	800c5ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a062:	f001 f80f 	bl	800b084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a066:	f002 fa6f 	bl	800c548 <vPortEnterCritical>
 800a06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a06c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a070:	b25b      	sxtb	r3, r3
 800a072:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a076:	d103      	bne.n	800a080 <xQueueGenericSend+0x174>
 800a078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a082:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a086:	b25b      	sxtb	r3, r3
 800a088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08c:	d103      	bne.n	800a096 <xQueueGenericSend+0x18a>
 800a08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a090:	2200      	movs	r2, #0
 800a092:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a096:	f002 fa89 	bl	800c5ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a09a:	1d3a      	adds	r2, r7, #4
 800a09c:	f107 0314 	add.w	r3, r7, #20
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f001 fa8e 	bl	800b5c4 <xTaskCheckForTimeOut>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d124      	bne.n	800a0f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a0ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0b0:	f000 fd04 	bl	800aabc <prvIsQueueFull>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d018      	beq.n	800a0ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0bc:	3310      	adds	r3, #16
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	4611      	mov	r1, r2
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f001 f9b2 	bl	800b42c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a0c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0ca:	f000 fc8f 	bl	800a9ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a0ce:	f000 ffe7 	bl	800b0a0 <xTaskResumeAll>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f47f af7c 	bne.w	8009fd2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a0da:	4b0c      	ldr	r3, [pc, #48]	@ (800a10c <xQueueGenericSend+0x200>)
 800a0dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0e0:	601a      	str	r2, [r3, #0]
 800a0e2:	f3bf 8f4f 	dsb	sy
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	e772      	b.n	8009fd2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a0ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0ee:	f000 fc7d 	bl	800a9ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0f2:	f000 ffd5 	bl	800b0a0 <xTaskResumeAll>
 800a0f6:	e76c      	b.n	8009fd2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a0f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0fa:	f000 fc77 	bl	800a9ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0fe:	f000 ffcf 	bl	800b0a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a102:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a104:	4618      	mov	r0, r3
 800a106:	3738      	adds	r7, #56	@ 0x38
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	e000ed04 	.word	0xe000ed04

0800a110 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b090      	sub	sp, #64	@ 0x40
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
 800a11c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10b      	bne.n	800a140 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a12c:	f383 8811 	msr	BASEPRI, r3
 800a130:	f3bf 8f6f 	isb	sy
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a13a:	bf00      	nop
 800a13c:	bf00      	nop
 800a13e:	e7fd      	b.n	800a13c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d103      	bne.n	800a14e <xQueueGenericSendFromISR+0x3e>
 800a146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d101      	bne.n	800a152 <xQueueGenericSendFromISR+0x42>
 800a14e:	2301      	movs	r3, #1
 800a150:	e000      	b.n	800a154 <xQueueGenericSendFromISR+0x44>
 800a152:	2300      	movs	r3, #0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10b      	bne.n	800a170 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a15c:	f383 8811 	msr	BASEPRI, r3
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a16a:	bf00      	nop
 800a16c:	bf00      	nop
 800a16e:	e7fd      	b.n	800a16c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	2b02      	cmp	r3, #2
 800a174:	d103      	bne.n	800a17e <xQueueGenericSendFromISR+0x6e>
 800a176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d101      	bne.n	800a182 <xQueueGenericSendFromISR+0x72>
 800a17e:	2301      	movs	r3, #1
 800a180:	e000      	b.n	800a184 <xQueueGenericSendFromISR+0x74>
 800a182:	2300      	movs	r3, #0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10b      	bne.n	800a1a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	623b      	str	r3, [r7, #32]
}
 800a19a:	bf00      	nop
 800a19c:	bf00      	nop
 800a19e:	e7fd      	b.n	800a19c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1a0:	f002 fab2 	bl	800c708 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a1a4:	f3ef 8211 	mrs	r2, BASEPRI
 800a1a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ac:	f383 8811 	msr	BASEPRI, r3
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	61fa      	str	r2, [r7, #28]
 800a1ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a1bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d302      	bcc.n	800a1d2 <xQueueGenericSendFromISR+0xc2>
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d12f      	bne.n	800a232 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a1d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	68b9      	ldr	r1, [r7, #8]
 800a1e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a1e8:	f000 fb70 	bl	800a8cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a1ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f4:	d112      	bne.n	800a21c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d016      	beq.n	800a22c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a200:	3324      	adds	r3, #36	@ 0x24
 800a202:	4618      	mov	r0, r3
 800a204:	f001 f964 	bl	800b4d0 <xTaskRemoveFromEventList>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00e      	beq.n	800a22c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00b      	beq.n	800a22c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	601a      	str	r2, [r3, #0]
 800a21a:	e007      	b.n	800a22c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a21c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a220:	3301      	adds	r3, #1
 800a222:	b2db      	uxtb	r3, r3
 800a224:	b25a      	sxtb	r2, r3
 800a226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a22c:	2301      	movs	r3, #1
 800a22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a230:	e001      	b.n	800a236 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a232:	2300      	movs	r3, #0
 800a234:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a238:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a240:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a244:	4618      	mov	r0, r3
 800a246:	3740      	adds	r7, #64	@ 0x40
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08e      	sub	sp, #56	@ 0x38
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d10b      	bne.n	800a278 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	623b      	str	r3, [r7, #32]
}
 800a272:	bf00      	nop
 800a274:	bf00      	nop
 800a276:	e7fd      	b.n	800a274 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00b      	beq.n	800a298 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	61fb      	str	r3, [r7, #28]
}
 800a292:	bf00      	nop
 800a294:	bf00      	nop
 800a296:	e7fd      	b.n	800a294 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d103      	bne.n	800a2a8 <xQueueGiveFromISR+0x5c>
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <xQueueGiveFromISR+0x60>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e000      	b.n	800a2ae <xQueueGiveFromISR+0x62>
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10b      	bne.n	800a2ca <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	61bb      	str	r3, [r7, #24]
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop
 800a2c8:	e7fd      	b.n	800a2c6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2ca:	f002 fa1d 	bl	800c708 <vPortValidateInterruptPriority>
	__asm volatile
 800a2ce:	f3ef 8211 	mrs	r2, BASEPRI
 800a2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	617a      	str	r2, [r7, #20]
 800a2e4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a2e6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d22b      	bcs.n	800a352 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a306:	1c5a      	adds	r2, r3, #1
 800a308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a30a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a30c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a314:	d112      	bne.n	800a33c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d016      	beq.n	800a34c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a320:	3324      	adds	r3, #36	@ 0x24
 800a322:	4618      	mov	r0, r3
 800a324:	f001 f8d4 	bl	800b4d0 <xTaskRemoveFromEventList>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00e      	beq.n	800a34c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00b      	beq.n	800a34c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	2201      	movs	r2, #1
 800a338:	601a      	str	r2, [r3, #0]
 800a33a:	e007      	b.n	800a34c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a33c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a340:	3301      	adds	r3, #1
 800a342:	b2db      	uxtb	r3, r3
 800a344:	b25a      	sxtb	r2, r3
 800a346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a34c:	2301      	movs	r3, #1
 800a34e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a350:	e001      	b.n	800a356 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a352:	2300      	movs	r3, #0
 800a354:	637b      	str	r3, [r7, #52]	@ 0x34
 800a356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a358:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f383 8811 	msr	BASEPRI, r3
}
 800a360:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a364:	4618      	mov	r0, r3
 800a366:	3738      	adds	r7, #56	@ 0x38
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b08c      	sub	sp, #48	@ 0x30
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a378:	2300      	movs	r3, #0
 800a37a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10b      	bne.n	800a39e <xQueueReceive+0x32>
	__asm volatile
 800a386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a38a:	f383 8811 	msr	BASEPRI, r3
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	623b      	str	r3, [r7, #32]
}
 800a398:	bf00      	nop
 800a39a:	bf00      	nop
 800a39c:	e7fd      	b.n	800a39a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d103      	bne.n	800a3ac <xQueueReceive+0x40>
 800a3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d101      	bne.n	800a3b0 <xQueueReceive+0x44>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e000      	b.n	800a3b2 <xQueueReceive+0x46>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10b      	bne.n	800a3ce <xQueueReceive+0x62>
	__asm volatile
 800a3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ba:	f383 8811 	msr	BASEPRI, r3
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f3bf 8f4f 	dsb	sy
 800a3c6:	61fb      	str	r3, [r7, #28]
}
 800a3c8:	bf00      	nop
 800a3ca:	bf00      	nop
 800a3cc:	e7fd      	b.n	800a3ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3ce:	f001 fa4f 	bl	800b870 <xTaskGetSchedulerState>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d102      	bne.n	800a3de <xQueueReceive+0x72>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d101      	bne.n	800a3e2 <xQueueReceive+0x76>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e000      	b.n	800a3e4 <xQueueReceive+0x78>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10b      	bne.n	800a400 <xQueueReceive+0x94>
	__asm volatile
 800a3e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ec:	f383 8811 	msr	BASEPRI, r3
 800a3f0:	f3bf 8f6f 	isb	sy
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	61bb      	str	r3, [r7, #24]
}
 800a3fa:	bf00      	nop
 800a3fc:	bf00      	nop
 800a3fe:	e7fd      	b.n	800a3fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a400:	f002 f8a2 	bl	800c548 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a408:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d01f      	beq.n	800a450 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a410:	68b9      	ldr	r1, [r7, #8]
 800a412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a414:	f000 fac4 	bl	800a9a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41a:	1e5a      	subs	r2, r3, #1
 800a41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a41e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00f      	beq.n	800a448 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a42a:	3310      	adds	r3, #16
 800a42c:	4618      	mov	r0, r3
 800a42e:	f001 f84f 	bl	800b4d0 <xTaskRemoveFromEventList>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d007      	beq.n	800a448 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a438:	4b3c      	ldr	r3, [pc, #240]	@ (800a52c <xQueueReceive+0x1c0>)
 800a43a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a43e:	601a      	str	r2, [r3, #0]
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a448:	f002 f8b0 	bl	800c5ac <vPortExitCritical>
				return pdPASS;
 800a44c:	2301      	movs	r3, #1
 800a44e:	e069      	b.n	800a524 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d103      	bne.n	800a45e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a456:	f002 f8a9 	bl	800c5ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a45a:	2300      	movs	r3, #0
 800a45c:	e062      	b.n	800a524 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a460:	2b00      	cmp	r3, #0
 800a462:	d106      	bne.n	800a472 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a464:	f107 0310 	add.w	r3, r7, #16
 800a468:	4618      	mov	r0, r3
 800a46a:	f001 f895 	bl	800b598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a46e:	2301      	movs	r3, #1
 800a470:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a472:	f002 f89b 	bl	800c5ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a476:	f000 fe05 	bl	800b084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a47a:	f002 f865 	bl	800c548 <vPortEnterCritical>
 800a47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a480:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a484:	b25b      	sxtb	r3, r3
 800a486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a48a:	d103      	bne.n	800a494 <xQueueReceive+0x128>
 800a48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a496:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a49a:	b25b      	sxtb	r3, r3
 800a49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a0:	d103      	bne.n	800a4aa <xQueueReceive+0x13e>
 800a4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4aa:	f002 f87f 	bl	800c5ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4ae:	1d3a      	adds	r2, r7, #4
 800a4b0:	f107 0310 	add.w	r3, r7, #16
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f001 f884 	bl	800b5c4 <xTaskCheckForTimeOut>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d123      	bne.n	800a50a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4c4:	f000 fae4 	bl	800aa90 <prvIsQueueEmpty>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d017      	beq.n	800a4fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d0:	3324      	adds	r3, #36	@ 0x24
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f000 ffa8 	bl	800b42c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a4dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4de:	f000 fa85 	bl	800a9ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a4e2:	f000 fddd 	bl	800b0a0 <xTaskResumeAll>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d189      	bne.n	800a400 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a4ec:	4b0f      	ldr	r3, [pc, #60]	@ (800a52c <xQueueReceive+0x1c0>)
 800a4ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	e780      	b.n	800a400 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a4fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a500:	f000 fa74 	bl	800a9ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a504:	f000 fdcc 	bl	800b0a0 <xTaskResumeAll>
 800a508:	e77a      	b.n	800a400 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a50a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a50c:	f000 fa6e 	bl	800a9ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a510:	f000 fdc6 	bl	800b0a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a514:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a516:	f000 fabb 	bl	800aa90 <prvIsQueueEmpty>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f43f af6f 	beq.w	800a400 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a522:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a524:	4618      	mov	r0, r3
 800a526:	3730      	adds	r7, #48	@ 0x30
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	e000ed04 	.word	0xe000ed04

0800a530 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b08e      	sub	sp, #56	@ 0x38
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a53a:	2300      	movs	r3, #0
 800a53c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a542:	2300      	movs	r3, #0
 800a544:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d10b      	bne.n	800a564 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	623b      	str	r3, [r7, #32]
}
 800a55e:	bf00      	nop
 800a560:	bf00      	nop
 800a562:	e7fd      	b.n	800a560 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00b      	beq.n	800a584 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	61fb      	str	r3, [r7, #28]
}
 800a57e:	bf00      	nop
 800a580:	bf00      	nop
 800a582:	e7fd      	b.n	800a580 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a584:	f001 f974 	bl	800b870 <xTaskGetSchedulerState>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d102      	bne.n	800a594 <xQueueSemaphoreTake+0x64>
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d101      	bne.n	800a598 <xQueueSemaphoreTake+0x68>
 800a594:	2301      	movs	r3, #1
 800a596:	e000      	b.n	800a59a <xQueueSemaphoreTake+0x6a>
 800a598:	2300      	movs	r3, #0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d10b      	bne.n	800a5b6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a2:	f383 8811 	msr	BASEPRI, r3
 800a5a6:	f3bf 8f6f 	isb	sy
 800a5aa:	f3bf 8f4f 	dsb	sy
 800a5ae:	61bb      	str	r3, [r7, #24]
}
 800a5b0:	bf00      	nop
 800a5b2:	bf00      	nop
 800a5b4:	e7fd      	b.n	800a5b2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5b6:	f001 ffc7 	bl	800c548 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a5ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5be:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d024      	beq.n	800a610 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c8:	1e5a      	subs	r2, r3, #1
 800a5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5cc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d104      	bne.n	800a5e0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a5d6:	f001 fac5 	bl	800bb64 <pvTaskIncrementMutexHeldCount>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5de:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00f      	beq.n	800a608 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ea:	3310      	adds	r3, #16
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f000 ff6f 	bl	800b4d0 <xTaskRemoveFromEventList>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d007      	beq.n	800a608 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a5f8:	4b54      	ldr	r3, [pc, #336]	@ (800a74c <xQueueSemaphoreTake+0x21c>)
 800a5fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5fe:	601a      	str	r2, [r3, #0]
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a608:	f001 ffd0 	bl	800c5ac <vPortExitCritical>
				return pdPASS;
 800a60c:	2301      	movs	r3, #1
 800a60e:	e098      	b.n	800a742 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d112      	bne.n	800a63c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00b      	beq.n	800a634 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	617b      	str	r3, [r7, #20]
}
 800a62e:	bf00      	nop
 800a630:	bf00      	nop
 800a632:	e7fd      	b.n	800a630 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a634:	f001 ffba 	bl	800c5ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a638:	2300      	movs	r3, #0
 800a63a:	e082      	b.n	800a742 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a63c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d106      	bne.n	800a650 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a642:	f107 030c 	add.w	r3, r7, #12
 800a646:	4618      	mov	r0, r3
 800a648:	f000 ffa6 	bl	800b598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a64c:	2301      	movs	r3, #1
 800a64e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a650:	f001 ffac 	bl	800c5ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a654:	f000 fd16 	bl	800b084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a658:	f001 ff76 	bl	800c548 <vPortEnterCritical>
 800a65c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a65e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a662:	b25b      	sxtb	r3, r3
 800a664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a668:	d103      	bne.n	800a672 <xQueueSemaphoreTake+0x142>
 800a66a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a66c:	2200      	movs	r2, #0
 800a66e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a674:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a678:	b25b      	sxtb	r3, r3
 800a67a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a67e:	d103      	bne.n	800a688 <xQueueSemaphoreTake+0x158>
 800a680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a682:	2200      	movs	r2, #0
 800a684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a688:	f001 ff90 	bl	800c5ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a68c:	463a      	mov	r2, r7
 800a68e:	f107 030c 	add.w	r3, r7, #12
 800a692:	4611      	mov	r1, r2
 800a694:	4618      	mov	r0, r3
 800a696:	f000 ff95 	bl	800b5c4 <xTaskCheckForTimeOut>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d132      	bne.n	800a706 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a6a2:	f000 f9f5 	bl	800aa90 <prvIsQueueEmpty>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d026      	beq.n	800a6fa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d109      	bne.n	800a6c8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a6b4:	f001 ff48 	bl	800c548 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f001 f8f5 	bl	800b8ac <xTaskPriorityInherit>
 800a6c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a6c4:	f001 ff72 	bl	800c5ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ca:	3324      	adds	r3, #36	@ 0x24
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f000 feab 	bl	800b42c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a6d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a6d8:	f000 f988 	bl	800a9ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a6dc:	f000 fce0 	bl	800b0a0 <xTaskResumeAll>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f47f af67 	bne.w	800a5b6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a6e8:	4b18      	ldr	r3, [pc, #96]	@ (800a74c <xQueueSemaphoreTake+0x21c>)
 800a6ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6ee:	601a      	str	r2, [r3, #0]
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	e75d      	b.n	800a5b6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a6fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a6fc:	f000 f976 	bl	800a9ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a700:	f000 fcce 	bl	800b0a0 <xTaskResumeAll>
 800a704:	e757      	b.n	800a5b6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a706:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a708:	f000 f970 	bl	800a9ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a70c:	f000 fcc8 	bl	800b0a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a710:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a712:	f000 f9bd 	bl	800aa90 <prvIsQueueEmpty>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f43f af4c 	beq.w	800a5b6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00d      	beq.n	800a740 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a724:	f001 ff10 	bl	800c548 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a728:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a72a:	f000 f8b7 	bl	800a89c <prvGetDisinheritPriorityAfterTimeout>
 800a72e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a736:	4618      	mov	r0, r3
 800a738:	f001 f990 	bl	800ba5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a73c:	f001 ff36 	bl	800c5ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a740:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a742:	4618      	mov	r0, r3
 800a744:	3738      	adds	r7, #56	@ 0x38
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	e000ed04 	.word	0xe000ed04

0800a750 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b08e      	sub	sp, #56	@ 0x38
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a762:	2b00      	cmp	r3, #0
 800a764:	d10b      	bne.n	800a77e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a76a:	f383 8811 	msr	BASEPRI, r3
 800a76e:	f3bf 8f6f 	isb	sy
 800a772:	f3bf 8f4f 	dsb	sy
 800a776:	623b      	str	r3, [r7, #32]
}
 800a778:	bf00      	nop
 800a77a:	bf00      	nop
 800a77c:	e7fd      	b.n	800a77a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d103      	bne.n	800a78c <xQueueReceiveFromISR+0x3c>
 800a784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d101      	bne.n	800a790 <xQueueReceiveFromISR+0x40>
 800a78c:	2301      	movs	r3, #1
 800a78e:	e000      	b.n	800a792 <xQueueReceiveFromISR+0x42>
 800a790:	2300      	movs	r3, #0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10b      	bne.n	800a7ae <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	61fb      	str	r3, [r7, #28]
}
 800a7a8:	bf00      	nop
 800a7aa:	bf00      	nop
 800a7ac:	e7fd      	b.n	800a7aa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7ae:	f001 ffab 	bl	800c708 <vPortValidateInterruptPriority>
	__asm volatile
 800a7b2:	f3ef 8211 	mrs	r2, BASEPRI
 800a7b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ba:	f383 8811 	msr	BASEPRI, r3
 800a7be:	f3bf 8f6f 	isb	sy
 800a7c2:	f3bf 8f4f 	dsb	sy
 800a7c6:	61ba      	str	r2, [r7, #24]
 800a7c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a7ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a7cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7d2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d02f      	beq.n	800a83a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7e4:	68b9      	ldr	r1, [r7, #8]
 800a7e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7e8:	f000 f8da 	bl	800a9a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ee:	1e5a      	subs	r2, r3, #1
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a7f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fc:	d112      	bne.n	800a824 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d016      	beq.n	800a834 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a808:	3310      	adds	r3, #16
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 fe60 	bl	800b4d0 <xTaskRemoveFromEventList>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00e      	beq.n	800a834 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00b      	beq.n	800a834 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	601a      	str	r2, [r3, #0]
 800a822:	e007      	b.n	800a834 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a824:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a828:	3301      	adds	r3, #1
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	b25a      	sxtb	r2, r3
 800a82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a834:	2301      	movs	r3, #1
 800a836:	637b      	str	r3, [r7, #52]	@ 0x34
 800a838:	e001      	b.n	800a83e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a83a:	2300      	movs	r3, #0
 800a83c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a840:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	f383 8811 	msr	BASEPRI, r3
}
 800a848:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a84a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3738      	adds	r7, #56	@ 0x38
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10b      	bne.n	800a87e <vQueueDelete+0x2a>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	60bb      	str	r3, [r7, #8]
}
 800a878:	bf00      	nop
 800a87a:	bf00      	nop
 800a87c:	e7fd      	b.n	800a87a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f000 f95e 	bl	800ab40 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d102      	bne.n	800a894 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	f002 f84a 	bl	800c928 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a894:	bf00      	nop
 800a896:	3710      	adds	r7, #16
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d006      	beq.n	800a8ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a8b6:	60fb      	str	r3, [r7, #12]
 800a8b8:	e001      	b.n	800a8be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a8be:	68fb      	ldr	r3, [r7, #12]
	}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3714      	adds	r7, #20
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10d      	bne.n	800a906 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d14d      	bne.n	800a98e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f001 f840 	bl	800b97c <xTaskPriorityDisinherit>
 800a8fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	609a      	str	r2, [r3, #8]
 800a904:	e043      	b.n	800a98e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d119      	bne.n	800a940 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6858      	ldr	r0, [r3, #4]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a914:	461a      	mov	r2, r3
 800a916:	68b9      	ldr	r1, [r7, #8]
 800a918:	f002 f952 	bl	800cbc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	685a      	ldr	r2, [r3, #4]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a924:	441a      	add	r2, r3
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	685a      	ldr	r2, [r3, #4]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	429a      	cmp	r2, r3
 800a934:	d32b      	bcc.n	800a98e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	605a      	str	r2, [r3, #4]
 800a93e:	e026      	b.n	800a98e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	68d8      	ldr	r0, [r3, #12]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a948:	461a      	mov	r2, r3
 800a94a:	68b9      	ldr	r1, [r7, #8]
 800a94c:	f002 f938 	bl	800cbc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	68da      	ldr	r2, [r3, #12]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a958:	425b      	negs	r3, r3
 800a95a:	441a      	add	r2, r3
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	68da      	ldr	r2, [r3, #12]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d207      	bcs.n	800a97c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	689a      	ldr	r2, [r3, #8]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a974:	425b      	negs	r3, r3
 800a976:	441a      	add	r2, r3
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d105      	bne.n	800a98e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d002      	beq.n	800a98e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	3b01      	subs	r3, #1
 800a98c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	1c5a      	adds	r2, r3, #1
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a996:	697b      	ldr	r3, [r7, #20]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3718      	adds	r7, #24
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d018      	beq.n	800a9e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	68da      	ldr	r2, [r3, #12]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ba:	441a      	add	r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	68da      	ldr	r2, [r3, #12]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d303      	bcc.n	800a9d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	68d9      	ldr	r1, [r3, #12]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9dc:	461a      	mov	r2, r3
 800a9de:	6838      	ldr	r0, [r7, #0]
 800a9e0:	f002 f8ee 	bl	800cbc0 <memcpy>
	}
}
 800a9e4:	bf00      	nop
 800a9e6:	3708      	adds	r7, #8
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a9f4:	f001 fda8 	bl	800c548 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa00:	e011      	b.n	800aa26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d012      	beq.n	800aa30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	3324      	adds	r3, #36	@ 0x24
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f000 fd5e 	bl	800b4d0 <xTaskRemoveFromEventList>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d001      	beq.n	800aa1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa1a:	f000 fe37 	bl	800b68c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa1e:	7bfb      	ldrb	r3, [r7, #15]
 800aa20:	3b01      	subs	r3, #1
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	dce9      	bgt.n	800aa02 <prvUnlockQueue+0x16>
 800aa2e:	e000      	b.n	800aa32 <prvUnlockQueue+0x46>
					break;
 800aa30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	22ff      	movs	r2, #255	@ 0xff
 800aa36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800aa3a:	f001 fdb7 	bl	800c5ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa3e:	f001 fd83 	bl	800c548 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa4a:	e011      	b.n	800aa70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d012      	beq.n	800aa7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	3310      	adds	r3, #16
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f000 fd39 	bl	800b4d0 <xTaskRemoveFromEventList>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d001      	beq.n	800aa68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aa64:	f000 fe12 	bl	800b68c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa68:	7bbb      	ldrb	r3, [r7, #14]
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	dce9      	bgt.n	800aa4c <prvUnlockQueue+0x60>
 800aa78:	e000      	b.n	800aa7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	22ff      	movs	r2, #255	@ 0xff
 800aa80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aa84:	f001 fd92 	bl	800c5ac <vPortExitCritical>
}
 800aa88:	bf00      	nop
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa98:	f001 fd56 	bl	800c548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d102      	bne.n	800aaaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	60fb      	str	r3, [r7, #12]
 800aaa8:	e001      	b.n	800aaae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aaae:	f001 fd7d 	bl	800c5ac <vPortExitCritical>

	return xReturn;
 800aab2:	68fb      	ldr	r3, [r7, #12]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aac4:	f001 fd40 	bl	800c548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d102      	bne.n	800aada <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aad4:	2301      	movs	r3, #1
 800aad6:	60fb      	str	r3, [r7, #12]
 800aad8:	e001      	b.n	800aade <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aada:	2300      	movs	r3, #0
 800aadc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aade:	f001 fd65 	bl	800c5ac <vPortExitCritical>

	return xReturn;
 800aae2:	68fb      	ldr	r3, [r7, #12]
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3710      	adds	r7, #16
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	60fb      	str	r3, [r7, #12]
 800aafa:	e014      	b.n	800ab26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aafc:	4a0f      	ldr	r2, [pc, #60]	@ (800ab3c <vQueueAddToRegistry+0x50>)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10b      	bne.n	800ab20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab08:	490c      	ldr	r1, [pc, #48]	@ (800ab3c <vQueueAddToRegistry+0x50>)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	683a      	ldr	r2, [r7, #0]
 800ab0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab12:	4a0a      	ldr	r2, [pc, #40]	@ (800ab3c <vQueueAddToRegistry+0x50>)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	00db      	lsls	r3, r3, #3
 800ab18:	4413      	add	r3, r2
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab1e:	e006      	b.n	800ab2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	3301      	adds	r3, #1
 800ab24:	60fb      	str	r3, [r7, #12]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2b07      	cmp	r3, #7
 800ab2a:	d9e7      	bls.n	800aafc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ab2c:	bf00      	nop
 800ab2e:	bf00      	nop
 800ab30:	3714      	adds	r7, #20
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop
 800ab3c:	20000c44 	.word	0x20000c44

0800ab40 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab48:	2300      	movs	r3, #0
 800ab4a:	60fb      	str	r3, [r7, #12]
 800ab4c:	e016      	b.n	800ab7c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ab4e:	4a10      	ldr	r2, [pc, #64]	@ (800ab90 <vQueueUnregisterQueue+0x50>)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	00db      	lsls	r3, r3, #3
 800ab54:	4413      	add	r3, r2
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d10b      	bne.n	800ab76 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ab5e:	4a0c      	ldr	r2, [pc, #48]	@ (800ab90 <vQueueUnregisterQueue+0x50>)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2100      	movs	r1, #0
 800ab64:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ab68:	4a09      	ldr	r2, [pc, #36]	@ (800ab90 <vQueueUnregisterQueue+0x50>)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	00db      	lsls	r3, r3, #3
 800ab6e:	4413      	add	r3, r2
 800ab70:	2200      	movs	r2, #0
 800ab72:	605a      	str	r2, [r3, #4]
				break;
 800ab74:	e006      	b.n	800ab84 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	60fb      	str	r3, [r7, #12]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2b07      	cmp	r3, #7
 800ab80:	d9e5      	bls.n	800ab4e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ab82:	bf00      	nop
 800ab84:	bf00      	nop
 800ab86:	3714      	adds	r7, #20
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr
 800ab90:	20000c44 	.word	0x20000c44

0800ab94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aba4:	f001 fcd0 	bl	800c548 <vPortEnterCritical>
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800abae:	b25b      	sxtb	r3, r3
 800abb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb4:	d103      	bne.n	800abbe <vQueueWaitForMessageRestricted+0x2a>
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	2200      	movs	r2, #0
 800abba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abc4:	b25b      	sxtb	r3, r3
 800abc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abca:	d103      	bne.n	800abd4 <vQueueWaitForMessageRestricted+0x40>
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	2200      	movs	r2, #0
 800abd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abd4:	f001 fcea 	bl	800c5ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d106      	bne.n	800abee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	3324      	adds	r3, #36	@ 0x24
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	68b9      	ldr	r1, [r7, #8]
 800abe8:	4618      	mov	r0, r3
 800abea:	f000 fc45 	bl	800b478 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800abee:	6978      	ldr	r0, [r7, #20]
 800abf0:	f7ff fefc 	bl	800a9ec <prvUnlockQueue>
	}
 800abf4:	bf00      	nop
 800abf6:	3718      	adds	r7, #24
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b08e      	sub	sp, #56	@ 0x38
 800ac00:	af04      	add	r7, sp, #16
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
 800ac08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10b      	bne.n	800ac28 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	623b      	str	r3, [r7, #32]
}
 800ac22:	bf00      	nop
 800ac24:	bf00      	nop
 800ac26:	e7fd      	b.n	800ac24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ac28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10b      	bne.n	800ac46 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	61fb      	str	r3, [r7, #28]
}
 800ac40:	bf00      	nop
 800ac42:	bf00      	nop
 800ac44:	e7fd      	b.n	800ac42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac46:	235c      	movs	r3, #92	@ 0x5c
 800ac48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ac4e:	d00b      	beq.n	800ac68 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	61bb      	str	r3, [r7, #24]
}
 800ac62:	bf00      	nop
 800ac64:	bf00      	nop
 800ac66:	e7fd      	b.n	800ac64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ac68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ac6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d01e      	beq.n	800acae <xTaskCreateStatic+0xb2>
 800ac70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d01b      	beq.n	800acae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac82:	2202      	movs	r2, #2
 800ac84:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac88:	2300      	movs	r3, #0
 800ac8a:	9303      	str	r3, [sp, #12]
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8e:	9302      	str	r3, [sp, #8]
 800ac90:	f107 0314 	add.w	r3, r7, #20
 800ac94:	9301      	str	r3, [sp, #4]
 800ac96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac98:	9300      	str	r3, [sp, #0]
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	68b9      	ldr	r1, [r7, #8]
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f000 f850 	bl	800ad46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aca6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aca8:	f000 f8de 	bl	800ae68 <prvAddNewTaskToReadyList>
 800acac:	e001      	b.n	800acb2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800acae:	2300      	movs	r3, #0
 800acb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800acb2:	697b      	ldr	r3, [r7, #20]
	}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3728      	adds	r7, #40	@ 0x28
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b08c      	sub	sp, #48	@ 0x30
 800acc0:	af04      	add	r7, sp, #16
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	603b      	str	r3, [r7, #0]
 800acc8:	4613      	mov	r3, r2
 800acca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800accc:	88fb      	ldrh	r3, [r7, #6]
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4618      	mov	r0, r3
 800acd2:	f001 fd5b 	bl	800c78c <pvPortMalloc>
 800acd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00e      	beq.n	800acfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800acde:	205c      	movs	r0, #92	@ 0x5c
 800ace0:	f001 fd54 	bl	800c78c <pvPortMalloc>
 800ace4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d003      	beq.n	800acf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	697a      	ldr	r2, [r7, #20]
 800acf0:	631a      	str	r2, [r3, #48]	@ 0x30
 800acf2:	e005      	b.n	800ad00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800acf4:	6978      	ldr	r0, [r7, #20]
 800acf6:	f001 fe17 	bl	800c928 <vPortFree>
 800acfa:	e001      	b.n	800ad00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800acfc:	2300      	movs	r3, #0
 800acfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d017      	beq.n	800ad36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad06:	69fb      	ldr	r3, [r7, #28]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad0e:	88fa      	ldrh	r2, [r7, #6]
 800ad10:	2300      	movs	r3, #0
 800ad12:	9303      	str	r3, [sp, #12]
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	9302      	str	r3, [sp, #8]
 800ad18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad1a:	9301      	str	r3, [sp, #4]
 800ad1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	68b9      	ldr	r1, [r7, #8]
 800ad24:	68f8      	ldr	r0, [r7, #12]
 800ad26:	f000 f80e 	bl	800ad46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad2a:	69f8      	ldr	r0, [r7, #28]
 800ad2c:	f000 f89c 	bl	800ae68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ad30:	2301      	movs	r3, #1
 800ad32:	61bb      	str	r3, [r7, #24]
 800ad34:	e002      	b.n	800ad3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad36:	f04f 33ff 	mov.w	r3, #4294967295
 800ad3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad3c:	69bb      	ldr	r3, [r7, #24]
	}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3720      	adds	r7, #32
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b088      	sub	sp, #32
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	60f8      	str	r0, [r7, #12]
 800ad4e:	60b9      	str	r1, [r7, #8]
 800ad50:	607a      	str	r2, [r7, #4]
 800ad52:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ad54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad56:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	21a5      	movs	r1, #165	@ 0xa5
 800ad60:	f001 ff02 	bl	800cb68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ad64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4413      	add	r3, r2
 800ad74:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	f023 0307 	bic.w	r3, r3, #7
 800ad7c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	f003 0307 	and.w	r3, r3, #7
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00b      	beq.n	800ada0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ad88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad8c:	f383 8811 	msr	BASEPRI, r3
 800ad90:	f3bf 8f6f 	isb	sy
 800ad94:	f3bf 8f4f 	dsb	sy
 800ad98:	617b      	str	r3, [r7, #20]
}
 800ad9a:	bf00      	nop
 800ad9c:	bf00      	nop
 800ad9e:	e7fd      	b.n	800ad9c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d01f      	beq.n	800ade6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ada6:	2300      	movs	r3, #0
 800ada8:	61fb      	str	r3, [r7, #28]
 800adaa:	e012      	b.n	800add2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	4413      	add	r3, r2
 800adb2:	7819      	ldrb	r1, [r3, #0]
 800adb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	4413      	add	r3, r2
 800adba:	3334      	adds	r3, #52	@ 0x34
 800adbc:	460a      	mov	r2, r1
 800adbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	4413      	add	r3, r2
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d006      	beq.n	800adda <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	3301      	adds	r3, #1
 800add0:	61fb      	str	r3, [r7, #28]
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	2b0f      	cmp	r3, #15
 800add6:	d9e9      	bls.n	800adac <prvInitialiseNewTask+0x66>
 800add8:	e000      	b.n	800addc <prvInitialiseNewTask+0x96>
			{
				break;
 800adda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800addc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adde:	2200      	movs	r2, #0
 800ade0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ade4:	e003      	b.n	800adee <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ade6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800adee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf0:	2b37      	cmp	r3, #55	@ 0x37
 800adf2:	d901      	bls.n	800adf8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800adf4:	2337      	movs	r3, #55	@ 0x37
 800adf6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800adf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adfc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800adfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae02:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ae04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae06:	2200      	movs	r2, #0
 800ae08:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fe fd7c 	bl	800990c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae16:	3318      	adds	r3, #24
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7fe fd77 	bl	800990c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae26:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ae2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae32:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ae34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae36:	2200      	movs	r2, #0
 800ae38:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae42:	683a      	ldr	r2, [r7, #0]
 800ae44:	68f9      	ldr	r1, [r7, #12]
 800ae46:	69b8      	ldr	r0, [r7, #24]
 800ae48:	f001 fa4e 	bl	800c2e8 <pxPortInitialiseStack>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d002      	beq.n	800ae5e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae5e:	bf00      	nop
 800ae60:	3720      	adds	r7, #32
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
	...

0800ae68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae70:	f001 fb6a 	bl	800c548 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae74:	4b2d      	ldr	r3, [pc, #180]	@ (800af2c <prvAddNewTaskToReadyList+0xc4>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	4a2c      	ldr	r2, [pc, #176]	@ (800af2c <prvAddNewTaskToReadyList+0xc4>)
 800ae7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae7e:	4b2c      	ldr	r3, [pc, #176]	@ (800af30 <prvAddNewTaskToReadyList+0xc8>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d109      	bne.n	800ae9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae86:	4a2a      	ldr	r2, [pc, #168]	@ (800af30 <prvAddNewTaskToReadyList+0xc8>)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae8c:	4b27      	ldr	r3, [pc, #156]	@ (800af2c <prvAddNewTaskToReadyList+0xc4>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d110      	bne.n	800aeb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae94:	f000 fc1e 	bl	800b6d4 <prvInitialiseTaskLists>
 800ae98:	e00d      	b.n	800aeb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae9a:	4b26      	ldr	r3, [pc, #152]	@ (800af34 <prvAddNewTaskToReadyList+0xcc>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d109      	bne.n	800aeb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aea2:	4b23      	ldr	r3, [pc, #140]	@ (800af30 <prvAddNewTaskToReadyList+0xc8>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d802      	bhi.n	800aeb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aeb0:	4a1f      	ldr	r2, [pc, #124]	@ (800af30 <prvAddNewTaskToReadyList+0xc8>)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aeb6:	4b20      	ldr	r3, [pc, #128]	@ (800af38 <prvAddNewTaskToReadyList+0xd0>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	3301      	adds	r3, #1
 800aebc:	4a1e      	ldr	r2, [pc, #120]	@ (800af38 <prvAddNewTaskToReadyList+0xd0>)
 800aebe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aec0:	4b1d      	ldr	r3, [pc, #116]	@ (800af38 <prvAddNewTaskToReadyList+0xd0>)
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aecc:	4b1b      	ldr	r3, [pc, #108]	@ (800af3c <prvAddNewTaskToReadyList+0xd4>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d903      	bls.n	800aedc <prvAddNewTaskToReadyList+0x74>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed8:	4a18      	ldr	r2, [pc, #96]	@ (800af3c <prvAddNewTaskToReadyList+0xd4>)
 800aeda:	6013      	str	r3, [r2, #0]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aee0:	4613      	mov	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4a15      	ldr	r2, [pc, #84]	@ (800af40 <prvAddNewTaskToReadyList+0xd8>)
 800aeea:	441a      	add	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	3304      	adds	r3, #4
 800aef0:	4619      	mov	r1, r3
 800aef2:	4610      	mov	r0, r2
 800aef4:	f7fe fd17 	bl	8009926 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aef8:	f001 fb58 	bl	800c5ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aefc:	4b0d      	ldr	r3, [pc, #52]	@ (800af34 <prvAddNewTaskToReadyList+0xcc>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00e      	beq.n	800af22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af04:	4b0a      	ldr	r3, [pc, #40]	@ (800af30 <prvAddNewTaskToReadyList+0xc8>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af0e:	429a      	cmp	r2, r3
 800af10:	d207      	bcs.n	800af22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800af12:	4b0c      	ldr	r3, [pc, #48]	@ (800af44 <prvAddNewTaskToReadyList+0xdc>)
 800af14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af18:	601a      	str	r2, [r3, #0]
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af22:	bf00      	nop
 800af24:	3708      	adds	r7, #8
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	20001158 	.word	0x20001158
 800af30:	20000c84 	.word	0x20000c84
 800af34:	20001164 	.word	0x20001164
 800af38:	20001174 	.word	0x20001174
 800af3c:	20001160 	.word	0x20001160
 800af40:	20000c88 	.word	0x20000c88
 800af44:	e000ed04 	.word	0xe000ed04

0800af48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af50:	2300      	movs	r3, #0
 800af52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d018      	beq.n	800af8c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af5a:	4b14      	ldr	r3, [pc, #80]	@ (800afac <vTaskDelay+0x64>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00b      	beq.n	800af7a <vTaskDelay+0x32>
	__asm volatile
 800af62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af66:	f383 8811 	msr	BASEPRI, r3
 800af6a:	f3bf 8f6f 	isb	sy
 800af6e:	f3bf 8f4f 	dsb	sy
 800af72:	60bb      	str	r3, [r7, #8]
}
 800af74:	bf00      	nop
 800af76:	bf00      	nop
 800af78:	e7fd      	b.n	800af76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800af7a:	f000 f883 	bl	800b084 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af7e:	2100      	movs	r1, #0
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 fe03 	bl	800bb8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af86:	f000 f88b 	bl	800b0a0 <xTaskResumeAll>
 800af8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d107      	bne.n	800afa2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800af92:	4b07      	ldr	r3, [pc, #28]	@ (800afb0 <vTaskDelay+0x68>)
 800af94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af98:	601a      	str	r2, [r3, #0]
 800af9a:	f3bf 8f4f 	dsb	sy
 800af9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800afa2:	bf00      	nop
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	20001180 	.word	0x20001180
 800afb0:	e000ed04 	.word	0xe000ed04

0800afb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b08a      	sub	sp, #40	@ 0x28
 800afb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800afba:	2300      	movs	r3, #0
 800afbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800afbe:	2300      	movs	r3, #0
 800afc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800afc2:	463a      	mov	r2, r7
 800afc4:	1d39      	adds	r1, r7, #4
 800afc6:	f107 0308 	add.w	r3, r7, #8
 800afca:	4618      	mov	r0, r3
 800afcc:	f7fe fc4a 	bl	8009864 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800afd0:	6839      	ldr	r1, [r7, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	68ba      	ldr	r2, [r7, #8]
 800afd6:	9202      	str	r2, [sp, #8]
 800afd8:	9301      	str	r3, [sp, #4]
 800afda:	2300      	movs	r3, #0
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	2300      	movs	r3, #0
 800afe0:	460a      	mov	r2, r1
 800afe2:	4922      	ldr	r1, [pc, #136]	@ (800b06c <vTaskStartScheduler+0xb8>)
 800afe4:	4822      	ldr	r0, [pc, #136]	@ (800b070 <vTaskStartScheduler+0xbc>)
 800afe6:	f7ff fe09 	bl	800abfc <xTaskCreateStatic>
 800afea:	4603      	mov	r3, r0
 800afec:	4a21      	ldr	r2, [pc, #132]	@ (800b074 <vTaskStartScheduler+0xc0>)
 800afee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aff0:	4b20      	ldr	r3, [pc, #128]	@ (800b074 <vTaskStartScheduler+0xc0>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d002      	beq.n	800affe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aff8:	2301      	movs	r3, #1
 800affa:	617b      	str	r3, [r7, #20]
 800affc:	e001      	b.n	800b002 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800affe:	2300      	movs	r3, #0
 800b000:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	2b01      	cmp	r3, #1
 800b006:	d102      	bne.n	800b00e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b008:	f000 fe14 	bl	800bc34 <xTimerCreateTimerTask>
 800b00c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d116      	bne.n	800b042 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	613b      	str	r3, [r7, #16]
}
 800b026:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b028:	4b13      	ldr	r3, [pc, #76]	@ (800b078 <vTaskStartScheduler+0xc4>)
 800b02a:	f04f 32ff 	mov.w	r2, #4294967295
 800b02e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b030:	4b12      	ldr	r3, [pc, #72]	@ (800b07c <vTaskStartScheduler+0xc8>)
 800b032:	2201      	movs	r2, #1
 800b034:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b036:	4b12      	ldr	r3, [pc, #72]	@ (800b080 <vTaskStartScheduler+0xcc>)
 800b038:	2200      	movs	r2, #0
 800b03a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b03c:	f001 f9e0 	bl	800c400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b040:	e00f      	b.n	800b062 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b048:	d10b      	bne.n	800b062 <vTaskStartScheduler+0xae>
	__asm volatile
 800b04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b04e:	f383 8811 	msr	BASEPRI, r3
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	f3bf 8f4f 	dsb	sy
 800b05a:	60fb      	str	r3, [r7, #12]
}
 800b05c:	bf00      	nop
 800b05e:	bf00      	nop
 800b060:	e7fd      	b.n	800b05e <vTaskStartScheduler+0xaa>
}
 800b062:	bf00      	nop
 800b064:	3718      	adds	r7, #24
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	0800cc40 	.word	0x0800cc40
 800b070:	0800b6a5 	.word	0x0800b6a5
 800b074:	2000117c 	.word	0x2000117c
 800b078:	20001178 	.word	0x20001178
 800b07c:	20001164 	.word	0x20001164
 800b080:	2000115c 	.word	0x2000115c

0800b084 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b084:	b480      	push	{r7}
 800b086:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b088:	4b04      	ldr	r3, [pc, #16]	@ (800b09c <vTaskSuspendAll+0x18>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	3301      	adds	r3, #1
 800b08e:	4a03      	ldr	r2, [pc, #12]	@ (800b09c <vTaskSuspendAll+0x18>)
 800b090:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b092:	bf00      	nop
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr
 800b09c:	20001180 	.word	0x20001180

0800b0a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b0ae:	4b42      	ldr	r3, [pc, #264]	@ (800b1b8 <xTaskResumeAll+0x118>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d10b      	bne.n	800b0ce <xTaskResumeAll+0x2e>
	__asm volatile
 800b0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ba:	f383 8811 	msr	BASEPRI, r3
 800b0be:	f3bf 8f6f 	isb	sy
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	603b      	str	r3, [r7, #0]
}
 800b0c8:	bf00      	nop
 800b0ca:	bf00      	nop
 800b0cc:	e7fd      	b.n	800b0ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b0ce:	f001 fa3b 	bl	800c548 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b0d2:	4b39      	ldr	r3, [pc, #228]	@ (800b1b8 <xTaskResumeAll+0x118>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	4a37      	ldr	r2, [pc, #220]	@ (800b1b8 <xTaskResumeAll+0x118>)
 800b0da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0dc:	4b36      	ldr	r3, [pc, #216]	@ (800b1b8 <xTaskResumeAll+0x118>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d162      	bne.n	800b1aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b0e4:	4b35      	ldr	r3, [pc, #212]	@ (800b1bc <xTaskResumeAll+0x11c>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d05e      	beq.n	800b1aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0ec:	e02f      	b.n	800b14e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0ee:	4b34      	ldr	r3, [pc, #208]	@ (800b1c0 <xTaskResumeAll+0x120>)
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	3318      	adds	r3, #24
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fe fc70 	bl	80099e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	3304      	adds	r3, #4
 800b104:	4618      	mov	r0, r3
 800b106:	f7fe fc6b 	bl	80099e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b10e:	4b2d      	ldr	r3, [pc, #180]	@ (800b1c4 <xTaskResumeAll+0x124>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	429a      	cmp	r2, r3
 800b114:	d903      	bls.n	800b11e <xTaskResumeAll+0x7e>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b11a:	4a2a      	ldr	r2, [pc, #168]	@ (800b1c4 <xTaskResumeAll+0x124>)
 800b11c:	6013      	str	r3, [r2, #0]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b122:	4613      	mov	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4413      	add	r3, r2
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4a27      	ldr	r2, [pc, #156]	@ (800b1c8 <xTaskResumeAll+0x128>)
 800b12c:	441a      	add	r2, r3
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3304      	adds	r3, #4
 800b132:	4619      	mov	r1, r3
 800b134:	4610      	mov	r0, r2
 800b136:	f7fe fbf6 	bl	8009926 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b13e:	4b23      	ldr	r3, [pc, #140]	@ (800b1cc <xTaskResumeAll+0x12c>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b144:	429a      	cmp	r2, r3
 800b146:	d302      	bcc.n	800b14e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b148:	4b21      	ldr	r3, [pc, #132]	@ (800b1d0 <xTaskResumeAll+0x130>)
 800b14a:	2201      	movs	r2, #1
 800b14c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b14e:	4b1c      	ldr	r3, [pc, #112]	@ (800b1c0 <xTaskResumeAll+0x120>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d1cb      	bne.n	800b0ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d001      	beq.n	800b160 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b15c:	f000 fb58 	bl	800b810 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b160:	4b1c      	ldr	r3, [pc, #112]	@ (800b1d4 <xTaskResumeAll+0x134>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d010      	beq.n	800b18e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b16c:	f000 f846 	bl	800b1fc <xTaskIncrementTick>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d002      	beq.n	800b17c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b176:	4b16      	ldr	r3, [pc, #88]	@ (800b1d0 <xTaskResumeAll+0x130>)
 800b178:	2201      	movs	r2, #1
 800b17a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	3b01      	subs	r3, #1
 800b180:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1f1      	bne.n	800b16c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b188:	4b12      	ldr	r3, [pc, #72]	@ (800b1d4 <xTaskResumeAll+0x134>)
 800b18a:	2200      	movs	r2, #0
 800b18c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b18e:	4b10      	ldr	r3, [pc, #64]	@ (800b1d0 <xTaskResumeAll+0x130>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d009      	beq.n	800b1aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b196:	2301      	movs	r3, #1
 800b198:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b19a:	4b0f      	ldr	r3, [pc, #60]	@ (800b1d8 <xTaskResumeAll+0x138>)
 800b19c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1a0:	601a      	str	r2, [r3, #0]
 800b1a2:	f3bf 8f4f 	dsb	sy
 800b1a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1aa:	f001 f9ff 	bl	800c5ac <vPortExitCritical>

	return xAlreadyYielded;
 800b1ae:	68bb      	ldr	r3, [r7, #8]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	20001180 	.word	0x20001180
 800b1bc:	20001158 	.word	0x20001158
 800b1c0:	20001118 	.word	0x20001118
 800b1c4:	20001160 	.word	0x20001160
 800b1c8:	20000c88 	.word	0x20000c88
 800b1cc:	20000c84 	.word	0x20000c84
 800b1d0:	2000116c 	.word	0x2000116c
 800b1d4:	20001168 	.word	0x20001168
 800b1d8:	e000ed04 	.word	0xe000ed04

0800b1dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b1e2:	4b05      	ldr	r3, [pc, #20]	@ (800b1f8 <xTaskGetTickCount+0x1c>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b1e8:	687b      	ldr	r3, [r7, #4]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	370c      	adds	r7, #12
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	2000115c 	.word	0x2000115c

0800b1fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b202:	2300      	movs	r3, #0
 800b204:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b206:	4b4f      	ldr	r3, [pc, #316]	@ (800b344 <xTaskIncrementTick+0x148>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f040 8090 	bne.w	800b330 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b210:	4b4d      	ldr	r3, [pc, #308]	@ (800b348 <xTaskIncrementTick+0x14c>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	3301      	adds	r3, #1
 800b216:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b218:	4a4b      	ldr	r2, [pc, #300]	@ (800b348 <xTaskIncrementTick+0x14c>)
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d121      	bne.n	800b268 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b224:	4b49      	ldr	r3, [pc, #292]	@ (800b34c <xTaskIncrementTick+0x150>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00b      	beq.n	800b246 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	603b      	str	r3, [r7, #0]
}
 800b240:	bf00      	nop
 800b242:	bf00      	nop
 800b244:	e7fd      	b.n	800b242 <xTaskIncrementTick+0x46>
 800b246:	4b41      	ldr	r3, [pc, #260]	@ (800b34c <xTaskIncrementTick+0x150>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	60fb      	str	r3, [r7, #12]
 800b24c:	4b40      	ldr	r3, [pc, #256]	@ (800b350 <xTaskIncrementTick+0x154>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a3e      	ldr	r2, [pc, #248]	@ (800b34c <xTaskIncrementTick+0x150>)
 800b252:	6013      	str	r3, [r2, #0]
 800b254:	4a3e      	ldr	r2, [pc, #248]	@ (800b350 <xTaskIncrementTick+0x154>)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6013      	str	r3, [r2, #0]
 800b25a:	4b3e      	ldr	r3, [pc, #248]	@ (800b354 <xTaskIncrementTick+0x158>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	3301      	adds	r3, #1
 800b260:	4a3c      	ldr	r2, [pc, #240]	@ (800b354 <xTaskIncrementTick+0x158>)
 800b262:	6013      	str	r3, [r2, #0]
 800b264:	f000 fad4 	bl	800b810 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b268:	4b3b      	ldr	r3, [pc, #236]	@ (800b358 <xTaskIncrementTick+0x15c>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	693a      	ldr	r2, [r7, #16]
 800b26e:	429a      	cmp	r2, r3
 800b270:	d349      	bcc.n	800b306 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b272:	4b36      	ldr	r3, [pc, #216]	@ (800b34c <xTaskIncrementTick+0x150>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d104      	bne.n	800b286 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b27c:	4b36      	ldr	r3, [pc, #216]	@ (800b358 <xTaskIncrementTick+0x15c>)
 800b27e:	f04f 32ff 	mov.w	r2, #4294967295
 800b282:	601a      	str	r2, [r3, #0]
					break;
 800b284:	e03f      	b.n	800b306 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b286:	4b31      	ldr	r3, [pc, #196]	@ (800b34c <xTaskIncrementTick+0x150>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b296:	693a      	ldr	r2, [r7, #16]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d203      	bcs.n	800b2a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b29e:	4a2e      	ldr	r2, [pc, #184]	@ (800b358 <xTaskIncrementTick+0x15c>)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b2a4:	e02f      	b.n	800b306 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	3304      	adds	r3, #4
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7fe fb98 	bl	80099e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d004      	beq.n	800b2c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	3318      	adds	r3, #24
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7fe fb8f 	bl	80099e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2c6:	4b25      	ldr	r3, [pc, #148]	@ (800b35c <xTaskIncrementTick+0x160>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d903      	bls.n	800b2d6 <xTaskIncrementTick+0xda>
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d2:	4a22      	ldr	r2, [pc, #136]	@ (800b35c <xTaskIncrementTick+0x160>)
 800b2d4:	6013      	str	r3, [r2, #0]
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2da:	4613      	mov	r3, r2
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	4413      	add	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4a1f      	ldr	r2, [pc, #124]	@ (800b360 <xTaskIncrementTick+0x164>)
 800b2e4:	441a      	add	r2, r3
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	f7fe fb1a 	bl	8009926 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2f6:	4b1b      	ldr	r3, [pc, #108]	@ (800b364 <xTaskIncrementTick+0x168>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d3b8      	bcc.n	800b272 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b300:	2301      	movs	r3, #1
 800b302:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b304:	e7b5      	b.n	800b272 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b306:	4b17      	ldr	r3, [pc, #92]	@ (800b364 <xTaskIncrementTick+0x168>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b30c:	4914      	ldr	r1, [pc, #80]	@ (800b360 <xTaskIncrementTick+0x164>)
 800b30e:	4613      	mov	r3, r2
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	4413      	add	r3, r2
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	440b      	add	r3, r1
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d901      	bls.n	800b322 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b31e:	2301      	movs	r3, #1
 800b320:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b322:	4b11      	ldr	r3, [pc, #68]	@ (800b368 <xTaskIncrementTick+0x16c>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d007      	beq.n	800b33a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b32a:	2301      	movs	r3, #1
 800b32c:	617b      	str	r3, [r7, #20]
 800b32e:	e004      	b.n	800b33a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b330:	4b0e      	ldr	r3, [pc, #56]	@ (800b36c <xTaskIncrementTick+0x170>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	3301      	adds	r3, #1
 800b336:	4a0d      	ldr	r2, [pc, #52]	@ (800b36c <xTaskIncrementTick+0x170>)
 800b338:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b33a:	697b      	ldr	r3, [r7, #20]
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3718      	adds	r7, #24
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	20001180 	.word	0x20001180
 800b348:	2000115c 	.word	0x2000115c
 800b34c:	20001110 	.word	0x20001110
 800b350:	20001114 	.word	0x20001114
 800b354:	20001170 	.word	0x20001170
 800b358:	20001178 	.word	0x20001178
 800b35c:	20001160 	.word	0x20001160
 800b360:	20000c88 	.word	0x20000c88
 800b364:	20000c84 	.word	0x20000c84
 800b368:	2000116c 	.word	0x2000116c
 800b36c:	20001168 	.word	0x20001168

0800b370 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b370:	b480      	push	{r7}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b376:	4b28      	ldr	r3, [pc, #160]	@ (800b418 <vTaskSwitchContext+0xa8>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d003      	beq.n	800b386 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b37e:	4b27      	ldr	r3, [pc, #156]	@ (800b41c <vTaskSwitchContext+0xac>)
 800b380:	2201      	movs	r2, #1
 800b382:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b384:	e042      	b.n	800b40c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b386:	4b25      	ldr	r3, [pc, #148]	@ (800b41c <vTaskSwitchContext+0xac>)
 800b388:	2200      	movs	r2, #0
 800b38a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b38c:	4b24      	ldr	r3, [pc, #144]	@ (800b420 <vTaskSwitchContext+0xb0>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	60fb      	str	r3, [r7, #12]
 800b392:	e011      	b.n	800b3b8 <vTaskSwitchContext+0x48>
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d10b      	bne.n	800b3b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800b39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	607b      	str	r3, [r7, #4]
}
 800b3ac:	bf00      	nop
 800b3ae:	bf00      	nop
 800b3b0:	e7fd      	b.n	800b3ae <vTaskSwitchContext+0x3e>
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	60fb      	str	r3, [r7, #12]
 800b3b8:	491a      	ldr	r1, [pc, #104]	@ (800b424 <vTaskSwitchContext+0xb4>)
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	4613      	mov	r3, r2
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	4413      	add	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	440b      	add	r3, r1
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d0e3      	beq.n	800b394 <vTaskSwitchContext+0x24>
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	4413      	add	r3, r2
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4a13      	ldr	r2, [pc, #76]	@ (800b424 <vTaskSwitchContext+0xb4>)
 800b3d8:	4413      	add	r3, r2
 800b3da:	60bb      	str	r3, [r7, #8]
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	685a      	ldr	r2, [r3, #4]
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	605a      	str	r2, [r3, #4]
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	685a      	ldr	r2, [r3, #4]
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	3308      	adds	r3, #8
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d104      	bne.n	800b3fc <vTaskSwitchContext+0x8c>
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	685a      	ldr	r2, [r3, #4]
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	605a      	str	r2, [r3, #4]
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	4a09      	ldr	r2, [pc, #36]	@ (800b428 <vTaskSwitchContext+0xb8>)
 800b404:	6013      	str	r3, [r2, #0]
 800b406:	4a06      	ldr	r2, [pc, #24]	@ (800b420 <vTaskSwitchContext+0xb0>)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6013      	str	r3, [r2, #0]
}
 800b40c:	bf00      	nop
 800b40e:	3714      	adds	r7, #20
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr
 800b418:	20001180 	.word	0x20001180
 800b41c:	2000116c 	.word	0x2000116c
 800b420:	20001160 	.word	0x20001160
 800b424:	20000c88 	.word	0x20000c88
 800b428:	20000c84 	.word	0x20000c84

0800b42c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d10b      	bne.n	800b454 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b43c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b440:	f383 8811 	msr	BASEPRI, r3
 800b444:	f3bf 8f6f 	isb	sy
 800b448:	f3bf 8f4f 	dsb	sy
 800b44c:	60fb      	str	r3, [r7, #12]
}
 800b44e:	bf00      	nop
 800b450:	bf00      	nop
 800b452:	e7fd      	b.n	800b450 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b454:	4b07      	ldr	r3, [pc, #28]	@ (800b474 <vTaskPlaceOnEventList+0x48>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	3318      	adds	r3, #24
 800b45a:	4619      	mov	r1, r3
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f7fe fa86 	bl	800996e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b462:	2101      	movs	r1, #1
 800b464:	6838      	ldr	r0, [r7, #0]
 800b466:	f000 fb91 	bl	800bb8c <prvAddCurrentTaskToDelayedList>
}
 800b46a:	bf00      	nop
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	20000c84 	.word	0x20000c84

0800b478 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b086      	sub	sp, #24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10b      	bne.n	800b4a2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b48e:	f383 8811 	msr	BASEPRI, r3
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	617b      	str	r3, [r7, #20]
}
 800b49c:	bf00      	nop
 800b49e:	bf00      	nop
 800b4a0:	e7fd      	b.n	800b49e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b4cc <vTaskPlaceOnEventListRestricted+0x54>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	3318      	adds	r3, #24
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f7fe fa3b 	bl	8009926 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d002      	beq.n	800b4bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b4bc:	6879      	ldr	r1, [r7, #4]
 800b4be:	68b8      	ldr	r0, [r7, #8]
 800b4c0:	f000 fb64 	bl	800bb8c <prvAddCurrentTaskToDelayedList>
	}
 800b4c4:	bf00      	nop
 800b4c6:	3718      	adds	r7, #24
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	20000c84 	.word	0x20000c84

0800b4d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10b      	bne.n	800b4fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	60fb      	str	r3, [r7, #12]
}
 800b4f8:	bf00      	nop
 800b4fa:	bf00      	nop
 800b4fc:	e7fd      	b.n	800b4fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	3318      	adds	r3, #24
 800b502:	4618      	mov	r0, r3
 800b504:	f7fe fa6c 	bl	80099e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b508:	4b1d      	ldr	r3, [pc, #116]	@ (800b580 <xTaskRemoveFromEventList+0xb0>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d11d      	bne.n	800b54c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	3304      	adds	r3, #4
 800b514:	4618      	mov	r0, r3
 800b516:	f7fe fa63 	bl	80099e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b51e:	4b19      	ldr	r3, [pc, #100]	@ (800b584 <xTaskRemoveFromEventList+0xb4>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	429a      	cmp	r2, r3
 800b524:	d903      	bls.n	800b52e <xTaskRemoveFromEventList+0x5e>
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b52a:	4a16      	ldr	r2, [pc, #88]	@ (800b584 <xTaskRemoveFromEventList+0xb4>)
 800b52c:	6013      	str	r3, [r2, #0]
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b532:	4613      	mov	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	4413      	add	r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	4a13      	ldr	r2, [pc, #76]	@ (800b588 <xTaskRemoveFromEventList+0xb8>)
 800b53c:	441a      	add	r2, r3
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	3304      	adds	r3, #4
 800b542:	4619      	mov	r1, r3
 800b544:	4610      	mov	r0, r2
 800b546:	f7fe f9ee 	bl	8009926 <vListInsertEnd>
 800b54a:	e005      	b.n	800b558 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	3318      	adds	r3, #24
 800b550:	4619      	mov	r1, r3
 800b552:	480e      	ldr	r0, [pc, #56]	@ (800b58c <xTaskRemoveFromEventList+0xbc>)
 800b554:	f7fe f9e7 	bl	8009926 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b55c:	4b0c      	ldr	r3, [pc, #48]	@ (800b590 <xTaskRemoveFromEventList+0xc0>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b562:	429a      	cmp	r2, r3
 800b564:	d905      	bls.n	800b572 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b566:	2301      	movs	r3, #1
 800b568:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b56a:	4b0a      	ldr	r3, [pc, #40]	@ (800b594 <xTaskRemoveFromEventList+0xc4>)
 800b56c:	2201      	movs	r2, #1
 800b56e:	601a      	str	r2, [r3, #0]
 800b570:	e001      	b.n	800b576 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b572:	2300      	movs	r3, #0
 800b574:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b576:	697b      	ldr	r3, [r7, #20]
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3718      	adds	r7, #24
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	20001180 	.word	0x20001180
 800b584:	20001160 	.word	0x20001160
 800b588:	20000c88 	.word	0x20000c88
 800b58c:	20001118 	.word	0x20001118
 800b590:	20000c84 	.word	0x20000c84
 800b594:	2000116c 	.word	0x2000116c

0800b598 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b5a0:	4b06      	ldr	r3, [pc, #24]	@ (800b5bc <vTaskInternalSetTimeOutState+0x24>)
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b5a8:	4b05      	ldr	r3, [pc, #20]	@ (800b5c0 <vTaskInternalSetTimeOutState+0x28>)
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	605a      	str	r2, [r3, #4]
}
 800b5b0:	bf00      	nop
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	20001170 	.word	0x20001170
 800b5c0:	2000115c 	.word	0x2000115c

0800b5c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b088      	sub	sp, #32
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10b      	bne.n	800b5ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d8:	f383 8811 	msr	BASEPRI, r3
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	613b      	str	r3, [r7, #16]
}
 800b5e6:	bf00      	nop
 800b5e8:	bf00      	nop
 800b5ea:	e7fd      	b.n	800b5e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10b      	bne.n	800b60a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	60fb      	str	r3, [r7, #12]
}
 800b604:	bf00      	nop
 800b606:	bf00      	nop
 800b608:	e7fd      	b.n	800b606 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b60a:	f000 ff9d 	bl	800c548 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b60e:	4b1d      	ldr	r3, [pc, #116]	@ (800b684 <xTaskCheckForTimeOut+0xc0>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	69ba      	ldr	r2, [r7, #24]
 800b61a:	1ad3      	subs	r3, r2, r3
 800b61c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b626:	d102      	bne.n	800b62e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b628:	2300      	movs	r3, #0
 800b62a:	61fb      	str	r3, [r7, #28]
 800b62c:	e023      	b.n	800b676 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	4b15      	ldr	r3, [pc, #84]	@ (800b688 <xTaskCheckForTimeOut+0xc4>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	429a      	cmp	r2, r3
 800b638:	d007      	beq.n	800b64a <xTaskCheckForTimeOut+0x86>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	69ba      	ldr	r2, [r7, #24]
 800b640:	429a      	cmp	r2, r3
 800b642:	d302      	bcc.n	800b64a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b644:	2301      	movs	r3, #1
 800b646:	61fb      	str	r3, [r7, #28]
 800b648:	e015      	b.n	800b676 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	697a      	ldr	r2, [r7, #20]
 800b650:	429a      	cmp	r2, r3
 800b652:	d20b      	bcs.n	800b66c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	1ad2      	subs	r2, r2, r3
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7ff ff99 	bl	800b598 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b666:	2300      	movs	r3, #0
 800b668:	61fb      	str	r3, [r7, #28]
 800b66a:	e004      	b.n	800b676 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	2200      	movs	r2, #0
 800b670:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b672:	2301      	movs	r3, #1
 800b674:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b676:	f000 ff99 	bl	800c5ac <vPortExitCritical>

	return xReturn;
 800b67a:	69fb      	ldr	r3, [r7, #28]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3720      	adds	r7, #32
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	2000115c 	.word	0x2000115c
 800b688:	20001170 	.word	0x20001170

0800b68c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b68c:	b480      	push	{r7}
 800b68e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b690:	4b03      	ldr	r3, [pc, #12]	@ (800b6a0 <vTaskMissedYield+0x14>)
 800b692:	2201      	movs	r2, #1
 800b694:	601a      	str	r2, [r3, #0]
}
 800b696:	bf00      	nop
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr
 800b6a0:	2000116c 	.word	0x2000116c

0800b6a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b6ac:	f000 f852 	bl	800b754 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b6b0:	4b06      	ldr	r3, [pc, #24]	@ (800b6cc <prvIdleTask+0x28>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d9f9      	bls.n	800b6ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800b6b8:	4b05      	ldr	r3, [pc, #20]	@ (800b6d0 <prvIdleTask+0x2c>)
 800b6ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6be:	601a      	str	r2, [r3, #0]
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b6c8:	e7f0      	b.n	800b6ac <prvIdleTask+0x8>
 800b6ca:	bf00      	nop
 800b6cc:	20000c88 	.word	0x20000c88
 800b6d0:	e000ed04 	.word	0xe000ed04

0800b6d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6da:	2300      	movs	r3, #0
 800b6dc:	607b      	str	r3, [r7, #4]
 800b6de:	e00c      	b.n	800b6fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	4413      	add	r3, r2
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	4a12      	ldr	r2, [pc, #72]	@ (800b734 <prvInitialiseTaskLists+0x60>)
 800b6ec:	4413      	add	r3, r2
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe f8ec 	bl	80098cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	607b      	str	r3, [r7, #4]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b37      	cmp	r3, #55	@ 0x37
 800b6fe:	d9ef      	bls.n	800b6e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b700:	480d      	ldr	r0, [pc, #52]	@ (800b738 <prvInitialiseTaskLists+0x64>)
 800b702:	f7fe f8e3 	bl	80098cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b706:	480d      	ldr	r0, [pc, #52]	@ (800b73c <prvInitialiseTaskLists+0x68>)
 800b708:	f7fe f8e0 	bl	80098cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b70c:	480c      	ldr	r0, [pc, #48]	@ (800b740 <prvInitialiseTaskLists+0x6c>)
 800b70e:	f7fe f8dd 	bl	80098cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b712:	480c      	ldr	r0, [pc, #48]	@ (800b744 <prvInitialiseTaskLists+0x70>)
 800b714:	f7fe f8da 	bl	80098cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b718:	480b      	ldr	r0, [pc, #44]	@ (800b748 <prvInitialiseTaskLists+0x74>)
 800b71a:	f7fe f8d7 	bl	80098cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b71e:	4b0b      	ldr	r3, [pc, #44]	@ (800b74c <prvInitialiseTaskLists+0x78>)
 800b720:	4a05      	ldr	r2, [pc, #20]	@ (800b738 <prvInitialiseTaskLists+0x64>)
 800b722:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b724:	4b0a      	ldr	r3, [pc, #40]	@ (800b750 <prvInitialiseTaskLists+0x7c>)
 800b726:	4a05      	ldr	r2, [pc, #20]	@ (800b73c <prvInitialiseTaskLists+0x68>)
 800b728:	601a      	str	r2, [r3, #0]
}
 800b72a:	bf00      	nop
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	20000c88 	.word	0x20000c88
 800b738:	200010e8 	.word	0x200010e8
 800b73c:	200010fc 	.word	0x200010fc
 800b740:	20001118 	.word	0x20001118
 800b744:	2000112c 	.word	0x2000112c
 800b748:	20001144 	.word	0x20001144
 800b74c:	20001110 	.word	0x20001110
 800b750:	20001114 	.word	0x20001114

0800b754 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b75a:	e019      	b.n	800b790 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b75c:	f000 fef4 	bl	800c548 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b760:	4b10      	ldr	r3, [pc, #64]	@ (800b7a4 <prvCheckTasksWaitingTermination+0x50>)
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	3304      	adds	r3, #4
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7fe f937 	bl	80099e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b772:	4b0d      	ldr	r3, [pc, #52]	@ (800b7a8 <prvCheckTasksWaitingTermination+0x54>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3b01      	subs	r3, #1
 800b778:	4a0b      	ldr	r2, [pc, #44]	@ (800b7a8 <prvCheckTasksWaitingTermination+0x54>)
 800b77a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b77c:	4b0b      	ldr	r3, [pc, #44]	@ (800b7ac <prvCheckTasksWaitingTermination+0x58>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	3b01      	subs	r3, #1
 800b782:	4a0a      	ldr	r2, [pc, #40]	@ (800b7ac <prvCheckTasksWaitingTermination+0x58>)
 800b784:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b786:	f000 ff11 	bl	800c5ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 f810 	bl	800b7b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b790:	4b06      	ldr	r3, [pc, #24]	@ (800b7ac <prvCheckTasksWaitingTermination+0x58>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1e1      	bne.n	800b75c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b798:	bf00      	nop
 800b79a:	bf00      	nop
 800b79c:	3708      	adds	r7, #8
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	2000112c 	.word	0x2000112c
 800b7a8:	20001158 	.word	0x20001158
 800b7ac:	20001140 	.word	0x20001140

0800b7b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d108      	bne.n	800b7d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f001 f8ae 	bl	800c928 <vPortFree>
				vPortFree( pxTCB );
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f001 f8ab 	bl	800c928 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b7d2:	e019      	b.n	800b808 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d103      	bne.n	800b7e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f001 f8a2 	bl	800c928 <vPortFree>
	}
 800b7e4:	e010      	b.n	800b808 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d00b      	beq.n	800b808 <prvDeleteTCB+0x58>
	__asm volatile
 800b7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f4:	f383 8811 	msr	BASEPRI, r3
 800b7f8:	f3bf 8f6f 	isb	sy
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	60fb      	str	r3, [r7, #12]
}
 800b802:	bf00      	nop
 800b804:	bf00      	nop
 800b806:	e7fd      	b.n	800b804 <prvDeleteTCB+0x54>
	}
 800b808:	bf00      	nop
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b816:	4b0c      	ldr	r3, [pc, #48]	@ (800b848 <prvResetNextTaskUnblockTime+0x38>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d104      	bne.n	800b82a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b820:	4b0a      	ldr	r3, [pc, #40]	@ (800b84c <prvResetNextTaskUnblockTime+0x3c>)
 800b822:	f04f 32ff 	mov.w	r2, #4294967295
 800b826:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b828:	e008      	b.n	800b83c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b82a:	4b07      	ldr	r3, [pc, #28]	@ (800b848 <prvResetNextTaskUnblockTime+0x38>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	4a04      	ldr	r2, [pc, #16]	@ (800b84c <prvResetNextTaskUnblockTime+0x3c>)
 800b83a:	6013      	str	r3, [r2, #0]
}
 800b83c:	bf00      	nop
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr
 800b848:	20001110 	.word	0x20001110
 800b84c:	20001178 	.word	0x20001178

0800b850 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b856:	4b05      	ldr	r3, [pc, #20]	@ (800b86c <xTaskGetCurrentTaskHandle+0x1c>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b85c:	687b      	ldr	r3, [r7, #4]
	}
 800b85e:	4618      	mov	r0, r3
 800b860:	370c      	adds	r7, #12
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	20000c84 	.word	0x20000c84

0800b870 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b876:	4b0b      	ldr	r3, [pc, #44]	@ (800b8a4 <xTaskGetSchedulerState+0x34>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d102      	bne.n	800b884 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b87e:	2301      	movs	r3, #1
 800b880:	607b      	str	r3, [r7, #4]
 800b882:	e008      	b.n	800b896 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b884:	4b08      	ldr	r3, [pc, #32]	@ (800b8a8 <xTaskGetSchedulerState+0x38>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d102      	bne.n	800b892 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b88c:	2302      	movs	r3, #2
 800b88e:	607b      	str	r3, [r7, #4]
 800b890:	e001      	b.n	800b896 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b892:	2300      	movs	r3, #0
 800b894:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b896:	687b      	ldr	r3, [r7, #4]
	}
 800b898:	4618      	mov	r0, r3
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr
 800b8a4:	20001164 	.word	0x20001164
 800b8a8:	20001180 	.word	0x20001180

0800b8ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d051      	beq.n	800b966 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8c6:	4b2a      	ldr	r3, [pc, #168]	@ (800b970 <xTaskPriorityInherit+0xc4>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d241      	bcs.n	800b954 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	699b      	ldr	r3, [r3, #24]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	db06      	blt.n	800b8e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8d8:	4b25      	ldr	r3, [pc, #148]	@ (800b970 <xTaskPriorityInherit+0xc4>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	6959      	ldr	r1, [r3, #20]
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	4413      	add	r3, r2
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	4a1f      	ldr	r2, [pc, #124]	@ (800b974 <xTaskPriorityInherit+0xc8>)
 800b8f8:	4413      	add	r3, r2
 800b8fa:	4299      	cmp	r1, r3
 800b8fc:	d122      	bne.n	800b944 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	3304      	adds	r3, #4
 800b902:	4618      	mov	r0, r3
 800b904:	f7fe f86c 	bl	80099e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b908:	4b19      	ldr	r3, [pc, #100]	@ (800b970 <xTaskPriorityInherit+0xc4>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b916:	4b18      	ldr	r3, [pc, #96]	@ (800b978 <xTaskPriorityInherit+0xcc>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d903      	bls.n	800b926 <xTaskPriorityInherit+0x7a>
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b922:	4a15      	ldr	r2, [pc, #84]	@ (800b978 <xTaskPriorityInherit+0xcc>)
 800b924:	6013      	str	r3, [r2, #0]
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b92a:	4613      	mov	r3, r2
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	4413      	add	r3, r2
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4a10      	ldr	r2, [pc, #64]	@ (800b974 <xTaskPriorityInherit+0xc8>)
 800b934:	441a      	add	r2, r3
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	3304      	adds	r3, #4
 800b93a:	4619      	mov	r1, r3
 800b93c:	4610      	mov	r0, r2
 800b93e:	f7fd fff2 	bl	8009926 <vListInsertEnd>
 800b942:	e004      	b.n	800b94e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b944:	4b0a      	ldr	r3, [pc, #40]	@ (800b970 <xTaskPriorityInherit+0xc4>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b94e:	2301      	movs	r3, #1
 800b950:	60fb      	str	r3, [r7, #12]
 800b952:	e008      	b.n	800b966 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b958:	4b05      	ldr	r3, [pc, #20]	@ (800b970 <xTaskPriorityInherit+0xc4>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b95e:	429a      	cmp	r2, r3
 800b960:	d201      	bcs.n	800b966 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b962:	2301      	movs	r3, #1
 800b964:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b966:	68fb      	ldr	r3, [r7, #12]
	}
 800b968:	4618      	mov	r0, r3
 800b96a:	3710      	adds	r7, #16
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	20000c84 	.word	0x20000c84
 800b974:	20000c88 	.word	0x20000c88
 800b978:	20001160 	.word	0x20001160

0800b97c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b988:	2300      	movs	r3, #0
 800b98a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d058      	beq.n	800ba44 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b992:	4b2f      	ldr	r3, [pc, #188]	@ (800ba50 <xTaskPriorityDisinherit+0xd4>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	693a      	ldr	r2, [r7, #16]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d00b      	beq.n	800b9b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9a0:	f383 8811 	msr	BASEPRI, r3
 800b9a4:	f3bf 8f6f 	isb	sy
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	60fb      	str	r3, [r7, #12]
}
 800b9ae:	bf00      	nop
 800b9b0:	bf00      	nop
 800b9b2:	e7fd      	b.n	800b9b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10b      	bne.n	800b9d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	60bb      	str	r3, [r7, #8]
}
 800b9ce:	bf00      	nop
 800b9d0:	bf00      	nop
 800b9d2:	e7fd      	b.n	800b9d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9d8:	1e5a      	subs	r2, r3, #1
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d02c      	beq.n	800ba44 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d128      	bne.n	800ba44 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7fd fff2 	bl	80099e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba14:	4b0f      	ldr	r3, [pc, #60]	@ (800ba54 <xTaskPriorityDisinherit+0xd8>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d903      	bls.n	800ba24 <xTaskPriorityDisinherit+0xa8>
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba20:	4a0c      	ldr	r2, [pc, #48]	@ (800ba54 <xTaskPriorityDisinherit+0xd8>)
 800ba22:	6013      	str	r3, [r2, #0]
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba28:	4613      	mov	r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4413      	add	r3, r2
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	4a09      	ldr	r2, [pc, #36]	@ (800ba58 <xTaskPriorityDisinherit+0xdc>)
 800ba32:	441a      	add	r2, r3
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	3304      	adds	r3, #4
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4610      	mov	r0, r2
 800ba3c:	f7fd ff73 	bl	8009926 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba40:	2301      	movs	r3, #1
 800ba42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba44:	697b      	ldr	r3, [r7, #20]
	}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3718      	adds	r7, #24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	20000c84 	.word	0x20000c84
 800ba54:	20001160 	.word	0x20001160
 800ba58:	20000c88 	.word	0x20000c88

0800ba5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b088      	sub	sp, #32
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d06c      	beq.n	800bb4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10b      	bne.n	800ba94 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ba7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba80:	f383 8811 	msr	BASEPRI, r3
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	60fb      	str	r3, [r7, #12]
}
 800ba8e:	bf00      	nop
 800ba90:	bf00      	nop
 800ba92:	e7fd      	b.n	800ba90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ba94:	69bb      	ldr	r3, [r7, #24]
 800ba96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba98:	683a      	ldr	r2, [r7, #0]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d902      	bls.n	800baa4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	61fb      	str	r3, [r7, #28]
 800baa2:	e002      	b.n	800baaa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800baa4:	69bb      	ldr	r3, [r7, #24]
 800baa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baa8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baae:	69fa      	ldr	r2, [r7, #28]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d04c      	beq.n	800bb4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bab8:	697a      	ldr	r2, [r7, #20]
 800baba:	429a      	cmp	r2, r3
 800babc:	d147      	bne.n	800bb4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800babe:	4b26      	ldr	r3, [pc, #152]	@ (800bb58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	69ba      	ldr	r2, [r7, #24]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d10b      	bne.n	800bae0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	60bb      	str	r3, [r7, #8]
}
 800bada:	bf00      	nop
 800badc:	bf00      	nop
 800bade:	e7fd      	b.n	800badc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bae0:	69bb      	ldr	r3, [r7, #24]
 800bae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bae4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	69fa      	ldr	r2, [r7, #28]
 800baea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	699b      	ldr	r3, [r3, #24]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	db04      	blt.n	800bafe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	6959      	ldr	r1, [r3, #20]
 800bb02:	693a      	ldr	r2, [r7, #16]
 800bb04:	4613      	mov	r3, r2
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	4413      	add	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	4a13      	ldr	r2, [pc, #76]	@ (800bb5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bb0e:	4413      	add	r3, r2
 800bb10:	4299      	cmp	r1, r3
 800bb12:	d11c      	bne.n	800bb4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb14:	69bb      	ldr	r3, [r7, #24]
 800bb16:	3304      	adds	r3, #4
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7fd ff61 	bl	80099e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb22:	4b0f      	ldr	r3, [pc, #60]	@ (800bb60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d903      	bls.n	800bb32 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb2e:	4a0c      	ldr	r2, [pc, #48]	@ (800bb60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bb30:	6013      	str	r3, [r2, #0]
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb36:	4613      	mov	r3, r2
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	4413      	add	r3, r2
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	4a07      	ldr	r2, [pc, #28]	@ (800bb5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bb40:	441a      	add	r2, r3
 800bb42:	69bb      	ldr	r3, [r7, #24]
 800bb44:	3304      	adds	r3, #4
 800bb46:	4619      	mov	r1, r3
 800bb48:	4610      	mov	r0, r2
 800bb4a:	f7fd feec 	bl	8009926 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb4e:	bf00      	nop
 800bb50:	3720      	adds	r7, #32
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	20000c84 	.word	0x20000c84
 800bb5c:	20000c88 	.word	0x20000c88
 800bb60:	20001160 	.word	0x20001160

0800bb64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bb64:	b480      	push	{r7}
 800bb66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bb68:	4b07      	ldr	r3, [pc, #28]	@ (800bb88 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d004      	beq.n	800bb7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bb70:	4b05      	ldr	r3, [pc, #20]	@ (800bb88 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb76:	3201      	adds	r2, #1
 800bb78:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bb7a:	4b03      	ldr	r3, [pc, #12]	@ (800bb88 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
	}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr
 800bb88:	20000c84 	.word	0x20000c84

0800bb8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb96:	4b21      	ldr	r3, [pc, #132]	@ (800bc1c <prvAddCurrentTaskToDelayedList+0x90>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb9c:	4b20      	ldr	r3, [pc, #128]	@ (800bc20 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	3304      	adds	r3, #4
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7fd ff1c 	bl	80099e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbae:	d10a      	bne.n	800bbc6 <prvAddCurrentTaskToDelayedList+0x3a>
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d007      	beq.n	800bbc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbb6:	4b1a      	ldr	r3, [pc, #104]	@ (800bc20 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3304      	adds	r3, #4
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	4819      	ldr	r0, [pc, #100]	@ (800bc24 <prvAddCurrentTaskToDelayedList+0x98>)
 800bbc0:	f7fd feb1 	bl	8009926 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bbc4:	e026      	b.n	800bc14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbc6:	68fa      	ldr	r2, [r7, #12]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4413      	add	r3, r2
 800bbcc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bbce:	4b14      	ldr	r3, [pc, #80]	@ (800bc20 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d209      	bcs.n	800bbf2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbde:	4b12      	ldr	r3, [pc, #72]	@ (800bc28 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	4b0f      	ldr	r3, [pc, #60]	@ (800bc20 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	4619      	mov	r1, r3
 800bbea:	4610      	mov	r0, r2
 800bbec:	f7fd febf 	bl	800996e <vListInsert>
}
 800bbf0:	e010      	b.n	800bc14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbf2:	4b0e      	ldr	r3, [pc, #56]	@ (800bc2c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	4b0a      	ldr	r3, [pc, #40]	@ (800bc20 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	3304      	adds	r3, #4
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	4610      	mov	r0, r2
 800bc00:	f7fd feb5 	bl	800996e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc04:	4b0a      	ldr	r3, [pc, #40]	@ (800bc30 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68ba      	ldr	r2, [r7, #8]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d202      	bcs.n	800bc14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc0e:	4a08      	ldr	r2, [pc, #32]	@ (800bc30 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	6013      	str	r3, [r2, #0]
}
 800bc14:	bf00      	nop
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	2000115c 	.word	0x2000115c
 800bc20:	20000c84 	.word	0x20000c84
 800bc24:	20001144 	.word	0x20001144
 800bc28:	20001114 	.word	0x20001114
 800bc2c:	20001110 	.word	0x20001110
 800bc30:	20001178 	.word	0x20001178

0800bc34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b08a      	sub	sp, #40	@ 0x28
 800bc38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc3e:	f000 fb13 	bl	800c268 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc42:	4b1d      	ldr	r3, [pc, #116]	@ (800bcb8 <xTimerCreateTimerTask+0x84>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d021      	beq.n	800bc8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc52:	1d3a      	adds	r2, r7, #4
 800bc54:	f107 0108 	add.w	r1, r7, #8
 800bc58:	f107 030c 	add.w	r3, r7, #12
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fd fe1b 	bl	8009898 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc62:	6879      	ldr	r1, [r7, #4]
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	9202      	str	r2, [sp, #8]
 800bc6a:	9301      	str	r3, [sp, #4]
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	2300      	movs	r3, #0
 800bc72:	460a      	mov	r2, r1
 800bc74:	4911      	ldr	r1, [pc, #68]	@ (800bcbc <xTimerCreateTimerTask+0x88>)
 800bc76:	4812      	ldr	r0, [pc, #72]	@ (800bcc0 <xTimerCreateTimerTask+0x8c>)
 800bc78:	f7fe ffc0 	bl	800abfc <xTaskCreateStatic>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	4a11      	ldr	r2, [pc, #68]	@ (800bcc4 <xTimerCreateTimerTask+0x90>)
 800bc80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc82:	4b10      	ldr	r3, [pc, #64]	@ (800bcc4 <xTimerCreateTimerTask+0x90>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d001      	beq.n	800bc8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10b      	bne.n	800bcac <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bc94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc98:	f383 8811 	msr	BASEPRI, r3
 800bc9c:	f3bf 8f6f 	isb	sy
 800bca0:	f3bf 8f4f 	dsb	sy
 800bca4:	613b      	str	r3, [r7, #16]
}
 800bca6:	bf00      	nop
 800bca8:	bf00      	nop
 800bcaa:	e7fd      	b.n	800bca8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bcac:	697b      	ldr	r3, [r7, #20]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3718      	adds	r7, #24
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	200011b4 	.word	0x200011b4
 800bcbc:	0800cc48 	.word	0x0800cc48
 800bcc0:	0800be01 	.word	0x0800be01
 800bcc4:	200011b8 	.word	0x200011b8

0800bcc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08a      	sub	sp, #40	@ 0x28
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
 800bcd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10b      	bne.n	800bcf8 <xTimerGenericCommand+0x30>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	623b      	str	r3, [r7, #32]
}
 800bcf2:	bf00      	nop
 800bcf4:	bf00      	nop
 800bcf6:	e7fd      	b.n	800bcf4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bcf8:	4b19      	ldr	r3, [pc, #100]	@ (800bd60 <xTimerGenericCommand+0x98>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d02a      	beq.n	800bd56 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	2b05      	cmp	r3, #5
 800bd10:	dc18      	bgt.n	800bd44 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd12:	f7ff fdad 	bl	800b870 <xTaskGetSchedulerState>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	d109      	bne.n	800bd30 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd1c:	4b10      	ldr	r3, [pc, #64]	@ (800bd60 <xTimerGenericCommand+0x98>)
 800bd1e:	6818      	ldr	r0, [r3, #0]
 800bd20:	f107 0110 	add.w	r1, r7, #16
 800bd24:	2300      	movs	r3, #0
 800bd26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd28:	f7fe f8f0 	bl	8009f0c <xQueueGenericSend>
 800bd2c:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd2e:	e012      	b.n	800bd56 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd30:	4b0b      	ldr	r3, [pc, #44]	@ (800bd60 <xTimerGenericCommand+0x98>)
 800bd32:	6818      	ldr	r0, [r3, #0]
 800bd34:	f107 0110 	add.w	r1, r7, #16
 800bd38:	2300      	movs	r3, #0
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f7fe f8e6 	bl	8009f0c <xQueueGenericSend>
 800bd40:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd42:	e008      	b.n	800bd56 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd44:	4b06      	ldr	r3, [pc, #24]	@ (800bd60 <xTimerGenericCommand+0x98>)
 800bd46:	6818      	ldr	r0, [r3, #0]
 800bd48:	f107 0110 	add.w	r1, r7, #16
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	683a      	ldr	r2, [r7, #0]
 800bd50:	f7fe f9de 	bl	800a110 <xQueueGenericSendFromISR>
 800bd54:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3728      	adds	r7, #40	@ 0x28
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	200011b4 	.word	0x200011b4

0800bd64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b088      	sub	sp, #32
 800bd68:	af02      	add	r7, sp, #8
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd6e:	4b23      	ldr	r3, [pc, #140]	@ (800bdfc <prvProcessExpiredTimer+0x98>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	3304      	adds	r3, #4
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7fd fe2f 	bl	80099e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd88:	f003 0304 	and.w	r3, r3, #4
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d023      	beq.n	800bdd8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	699a      	ldr	r2, [r3, #24]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	18d1      	adds	r1, r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	683a      	ldr	r2, [r7, #0]
 800bd9c:	6978      	ldr	r0, [r7, #20]
 800bd9e:	f000 f8d5 	bl	800bf4c <prvInsertTimerInActiveList>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d020      	beq.n	800bdea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bda8:	2300      	movs	r3, #0
 800bdaa:	9300      	str	r3, [sp, #0]
 800bdac:	2300      	movs	r3, #0
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	6978      	ldr	r0, [r7, #20]
 800bdb4:	f7ff ff88 	bl	800bcc8 <xTimerGenericCommand>
 800bdb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d114      	bne.n	800bdea <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	60fb      	str	r3, [r7, #12]
}
 800bdd2:	bf00      	nop
 800bdd4:	bf00      	nop
 800bdd6:	e7fd      	b.n	800bdd4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdde:	f023 0301 	bic.w	r3, r3, #1
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	6a1b      	ldr	r3, [r3, #32]
 800bdee:	6978      	ldr	r0, [r7, #20]
 800bdf0:	4798      	blx	r3
}
 800bdf2:	bf00      	nop
 800bdf4:	3718      	adds	r7, #24
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	200011ac 	.word	0x200011ac

0800be00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be08:	f107 0308 	add.w	r3, r7, #8
 800be0c:	4618      	mov	r0, r3
 800be0e:	f000 f859 	bl	800bec4 <prvGetNextExpireTime>
 800be12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	4619      	mov	r1, r3
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f000 f805 	bl	800be28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be1e:	f000 f8d7 	bl	800bfd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be22:	bf00      	nop
 800be24:	e7f0      	b.n	800be08 <prvTimerTask+0x8>
	...

0800be28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be32:	f7ff f927 	bl	800b084 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be36:	f107 0308 	add.w	r3, r7, #8
 800be3a:	4618      	mov	r0, r3
 800be3c:	f000 f866 	bl	800bf0c <prvSampleTimeNow>
 800be40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d130      	bne.n	800beaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d10a      	bne.n	800be64 <prvProcessTimerOrBlockTask+0x3c>
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	429a      	cmp	r2, r3
 800be54:	d806      	bhi.n	800be64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be56:	f7ff f923 	bl	800b0a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be5a:	68f9      	ldr	r1, [r7, #12]
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f7ff ff81 	bl	800bd64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be62:	e024      	b.n	800beae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d008      	beq.n	800be7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be6a:	4b13      	ldr	r3, [pc, #76]	@ (800beb8 <prvProcessTimerOrBlockTask+0x90>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d101      	bne.n	800be78 <prvProcessTimerOrBlockTask+0x50>
 800be74:	2301      	movs	r3, #1
 800be76:	e000      	b.n	800be7a <prvProcessTimerOrBlockTask+0x52>
 800be78:	2300      	movs	r3, #0
 800be7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be7c:	4b0f      	ldr	r3, [pc, #60]	@ (800bebc <prvProcessTimerOrBlockTask+0x94>)
 800be7e:	6818      	ldr	r0, [r3, #0]
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	4619      	mov	r1, r3
 800be8a:	f7fe fe83 	bl	800ab94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be8e:	f7ff f907 	bl	800b0a0 <xTaskResumeAll>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10a      	bne.n	800beae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800be98:	4b09      	ldr	r3, [pc, #36]	@ (800bec0 <prvProcessTimerOrBlockTask+0x98>)
 800be9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be9e:	601a      	str	r2, [r3, #0]
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	f3bf 8f6f 	isb	sy
}
 800bea8:	e001      	b.n	800beae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800beaa:	f7ff f8f9 	bl	800b0a0 <xTaskResumeAll>
}
 800beae:	bf00      	nop
 800beb0:	3710      	adds	r7, #16
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	200011b0 	.word	0x200011b0
 800bebc:	200011b4 	.word	0x200011b4
 800bec0:	e000ed04 	.word	0xe000ed04

0800bec4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800becc:	4b0e      	ldr	r3, [pc, #56]	@ (800bf08 <prvGetNextExpireTime+0x44>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d101      	bne.n	800beda <prvGetNextExpireTime+0x16>
 800bed6:	2201      	movs	r2, #1
 800bed8:	e000      	b.n	800bedc <prvGetNextExpireTime+0x18>
 800beda:	2200      	movs	r2, #0
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d105      	bne.n	800bef4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bee8:	4b07      	ldr	r3, [pc, #28]	@ (800bf08 <prvGetNextExpireTime+0x44>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	68db      	ldr	r3, [r3, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	60fb      	str	r3, [r7, #12]
 800bef2:	e001      	b.n	800bef8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bef4:	2300      	movs	r3, #0
 800bef6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bef8:	68fb      	ldr	r3, [r7, #12]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	200011ac 	.word	0x200011ac

0800bf0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf14:	f7ff f962 	bl	800b1dc <xTaskGetTickCount>
 800bf18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf1a:	4b0b      	ldr	r3, [pc, #44]	@ (800bf48 <prvSampleTimeNow+0x3c>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d205      	bcs.n	800bf30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf24:	f000 f93a 	bl	800c19c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	601a      	str	r2, [r3, #0]
 800bf2e:	e002      	b.n	800bf36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf36:	4a04      	ldr	r2, [pc, #16]	@ (800bf48 <prvSampleTimeNow+0x3c>)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	200011bc 	.word	0x200011bc

0800bf4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b086      	sub	sp, #24
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
 800bf58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf6a:	68ba      	ldr	r2, [r7, #8]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d812      	bhi.n	800bf98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	1ad2      	subs	r2, r2, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	699b      	ldr	r3, [r3, #24]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d302      	bcc.n	800bf86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf80:	2301      	movs	r3, #1
 800bf82:	617b      	str	r3, [r7, #20]
 800bf84:	e01b      	b.n	800bfbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf86:	4b10      	ldr	r3, [pc, #64]	@ (800bfc8 <prvInsertTimerInActiveList+0x7c>)
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	4619      	mov	r1, r3
 800bf90:	4610      	mov	r0, r2
 800bf92:	f7fd fcec 	bl	800996e <vListInsert>
 800bf96:	e012      	b.n	800bfbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d206      	bcs.n	800bfae <prvInsertTimerInActiveList+0x62>
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d302      	bcc.n	800bfae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	617b      	str	r3, [r7, #20]
 800bfac:	e007      	b.n	800bfbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfae:	4b07      	ldr	r3, [pc, #28]	@ (800bfcc <prvInsertTimerInActiveList+0x80>)
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	3304      	adds	r3, #4
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	4610      	mov	r0, r2
 800bfba:	f7fd fcd8 	bl	800996e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bfbe:	697b      	ldr	r3, [r7, #20]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3718      	adds	r7, #24
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	200011b0 	.word	0x200011b0
 800bfcc:	200011ac 	.word	0x200011ac

0800bfd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b08e      	sub	sp, #56	@ 0x38
 800bfd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfd6:	e0ce      	b.n	800c176 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	da19      	bge.n	800c012 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bfde:	1d3b      	adds	r3, r7, #4
 800bfe0:	3304      	adds	r3, #4
 800bfe2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d10b      	bne.n	800c002 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bfea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfee:	f383 8811 	msr	BASEPRI, r3
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	f3bf 8f4f 	dsb	sy
 800bffa:	61fb      	str	r3, [r7, #28]
}
 800bffc:	bf00      	nop
 800bffe:	bf00      	nop
 800c000:	e7fd      	b.n	800bffe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c008:	6850      	ldr	r0, [r2, #4]
 800c00a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c00c:	6892      	ldr	r2, [r2, #8]
 800c00e:	4611      	mov	r1, r2
 800c010:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2b00      	cmp	r3, #0
 800c016:	f2c0 80ae 	blt.w	800c176 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c020:	695b      	ldr	r3, [r3, #20]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d004      	beq.n	800c030 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c028:	3304      	adds	r3, #4
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7fd fcd8 	bl	80099e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c030:	463b      	mov	r3, r7
 800c032:	4618      	mov	r0, r3
 800c034:	f7ff ff6a 	bl	800bf0c <prvSampleTimeNow>
 800c038:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2b09      	cmp	r3, #9
 800c03e:	f200 8097 	bhi.w	800c170 <prvProcessReceivedCommands+0x1a0>
 800c042:	a201      	add	r2, pc, #4	@ (adr r2, 800c048 <prvProcessReceivedCommands+0x78>)
 800c044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c048:	0800c071 	.word	0x0800c071
 800c04c:	0800c071 	.word	0x0800c071
 800c050:	0800c071 	.word	0x0800c071
 800c054:	0800c0e7 	.word	0x0800c0e7
 800c058:	0800c0fb 	.word	0x0800c0fb
 800c05c:	0800c147 	.word	0x0800c147
 800c060:	0800c071 	.word	0x0800c071
 800c064:	0800c071 	.word	0x0800c071
 800c068:	0800c0e7 	.word	0x0800c0e7
 800c06c:	0800c0fb 	.word	0x0800c0fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c072:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c076:	f043 0301 	orr.w	r3, r3, #1
 800c07a:	b2da      	uxtb	r2, r3
 800c07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c07e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c082:	68ba      	ldr	r2, [r7, #8]
 800c084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c086:	699b      	ldr	r3, [r3, #24]
 800c088:	18d1      	adds	r1, r2, r3
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c08e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c090:	f7ff ff5c 	bl	800bf4c <prvInsertTimerInActiveList>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d06c      	beq.n	800c174 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c09c:	6a1b      	ldr	r3, [r3, #32]
 800c09e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0a8:	f003 0304 	and.w	r3, r3, #4
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d061      	beq.n	800c174 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c0b0:	68ba      	ldr	r2, [r7, #8]
 800c0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b4:	699b      	ldr	r3, [r3, #24]
 800c0b6:	441a      	add	r2, r3
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	2300      	movs	r3, #0
 800c0be:	2100      	movs	r1, #0
 800c0c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0c2:	f7ff fe01 	bl	800bcc8 <xTimerGenericCommand>
 800c0c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c0c8:	6a3b      	ldr	r3, [r7, #32]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d152      	bne.n	800c174 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d2:	f383 8811 	msr	BASEPRI, r3
 800c0d6:	f3bf 8f6f 	isb	sy
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	61bb      	str	r3, [r7, #24]
}
 800c0e0:	bf00      	nop
 800c0e2:	bf00      	nop
 800c0e4:	e7fd      	b.n	800c0e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0ec:	f023 0301 	bic.w	r3, r3, #1
 800c0f0:	b2da      	uxtb	r2, r3
 800c0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c0f8:	e03d      	b.n	800c176 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c100:	f043 0301 	orr.w	r3, r3, #1
 800c104:	b2da      	uxtb	r2, r3
 800c106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c108:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c10c:	68ba      	ldr	r2, [r7, #8]
 800c10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c110:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c114:	699b      	ldr	r3, [r3, #24]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10b      	bne.n	800c132 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c11a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c11e:	f383 8811 	msr	BASEPRI, r3
 800c122:	f3bf 8f6f 	isb	sy
 800c126:	f3bf 8f4f 	dsb	sy
 800c12a:	617b      	str	r3, [r7, #20]
}
 800c12c:	bf00      	nop
 800c12e:	bf00      	nop
 800c130:	e7fd      	b.n	800c12e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c134:	699a      	ldr	r2, [r3, #24]
 800c136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c138:	18d1      	adds	r1, r2, r3
 800c13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c13c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c13e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c140:	f7ff ff04 	bl	800bf4c <prvInsertTimerInActiveList>
					break;
 800c144:	e017      	b.n	800c176 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c148:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c14c:	f003 0302 	and.w	r3, r3, #2
 800c150:	2b00      	cmp	r3, #0
 800c152:	d103      	bne.n	800c15c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c154:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c156:	f000 fbe7 	bl	800c928 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c15a:	e00c      	b.n	800c176 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c15e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c162:	f023 0301 	bic.w	r3, r3, #1
 800c166:	b2da      	uxtb	r2, r3
 800c168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c16a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c16e:	e002      	b.n	800c176 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c170:	bf00      	nop
 800c172:	e000      	b.n	800c176 <prvProcessReceivedCommands+0x1a6>
					break;
 800c174:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c176:	4b08      	ldr	r3, [pc, #32]	@ (800c198 <prvProcessReceivedCommands+0x1c8>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	1d39      	adds	r1, r7, #4
 800c17c:	2200      	movs	r2, #0
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fe f8f4 	bl	800a36c <xQueueReceive>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	f47f af26 	bne.w	800bfd8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c18c:	bf00      	nop
 800c18e:	bf00      	nop
 800c190:	3730      	adds	r7, #48	@ 0x30
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	200011b4 	.word	0x200011b4

0800c19c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b088      	sub	sp, #32
 800c1a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1a2:	e049      	b.n	800c238 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1a4:	4b2e      	ldr	r3, [pc, #184]	@ (800c260 <prvSwitchTimerLists+0xc4>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1ae:	4b2c      	ldr	r3, [pc, #176]	@ (800c260 <prvSwitchTimerLists+0xc4>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	68db      	ldr	r3, [r3, #12]
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	3304      	adds	r3, #4
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7fd fc0f 	bl	80099e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	6a1b      	ldr	r3, [r3, #32]
 800c1c6:	68f8      	ldr	r0, [r7, #12]
 800c1c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1d0:	f003 0304 	and.w	r3, r3, #4
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d02f      	beq.n	800c238 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	699b      	ldr	r3, [r3, #24]
 800c1dc:	693a      	ldr	r2, [r7, #16]
 800c1de:	4413      	add	r3, r2
 800c1e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c1e2:	68ba      	ldr	r2, [r7, #8]
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d90e      	bls.n	800c208 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	68fa      	ldr	r2, [r7, #12]
 800c1f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1f6:	4b1a      	ldr	r3, [pc, #104]	@ (800c260 <prvSwitchTimerLists+0xc4>)
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	3304      	adds	r3, #4
 800c1fe:	4619      	mov	r1, r3
 800c200:	4610      	mov	r0, r2
 800c202:	f7fd fbb4 	bl	800996e <vListInsert>
 800c206:	e017      	b.n	800c238 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c208:	2300      	movs	r3, #0
 800c20a:	9300      	str	r3, [sp, #0]
 800c20c:	2300      	movs	r3, #0
 800c20e:	693a      	ldr	r2, [r7, #16]
 800c210:	2100      	movs	r1, #0
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f7ff fd58 	bl	800bcc8 <xTimerGenericCommand>
 800c218:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d10b      	bne.n	800c238 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c224:	f383 8811 	msr	BASEPRI, r3
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	603b      	str	r3, [r7, #0]
}
 800c232:	bf00      	nop
 800c234:	bf00      	nop
 800c236:	e7fd      	b.n	800c234 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c238:	4b09      	ldr	r3, [pc, #36]	@ (800c260 <prvSwitchTimerLists+0xc4>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d1b0      	bne.n	800c1a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c242:	4b07      	ldr	r3, [pc, #28]	@ (800c260 <prvSwitchTimerLists+0xc4>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c248:	4b06      	ldr	r3, [pc, #24]	@ (800c264 <prvSwitchTimerLists+0xc8>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a04      	ldr	r2, [pc, #16]	@ (800c260 <prvSwitchTimerLists+0xc4>)
 800c24e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c250:	4a04      	ldr	r2, [pc, #16]	@ (800c264 <prvSwitchTimerLists+0xc8>)
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	6013      	str	r3, [r2, #0]
}
 800c256:	bf00      	nop
 800c258:	3718      	adds	r7, #24
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	200011ac 	.word	0x200011ac
 800c264:	200011b0 	.word	0x200011b0

0800c268 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c26e:	f000 f96b 	bl	800c548 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c272:	4b15      	ldr	r3, [pc, #84]	@ (800c2c8 <prvCheckForValidListAndQueue+0x60>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d120      	bne.n	800c2bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c27a:	4814      	ldr	r0, [pc, #80]	@ (800c2cc <prvCheckForValidListAndQueue+0x64>)
 800c27c:	f7fd fb26 	bl	80098cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c280:	4813      	ldr	r0, [pc, #76]	@ (800c2d0 <prvCheckForValidListAndQueue+0x68>)
 800c282:	f7fd fb23 	bl	80098cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c286:	4b13      	ldr	r3, [pc, #76]	@ (800c2d4 <prvCheckForValidListAndQueue+0x6c>)
 800c288:	4a10      	ldr	r2, [pc, #64]	@ (800c2cc <prvCheckForValidListAndQueue+0x64>)
 800c28a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c28c:	4b12      	ldr	r3, [pc, #72]	@ (800c2d8 <prvCheckForValidListAndQueue+0x70>)
 800c28e:	4a10      	ldr	r2, [pc, #64]	@ (800c2d0 <prvCheckForValidListAndQueue+0x68>)
 800c290:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c292:	2300      	movs	r3, #0
 800c294:	9300      	str	r3, [sp, #0]
 800c296:	4b11      	ldr	r3, [pc, #68]	@ (800c2dc <prvCheckForValidListAndQueue+0x74>)
 800c298:	4a11      	ldr	r2, [pc, #68]	@ (800c2e0 <prvCheckForValidListAndQueue+0x78>)
 800c29a:	2110      	movs	r1, #16
 800c29c:	200a      	movs	r0, #10
 800c29e:	f7fd fc33 	bl	8009b08 <xQueueGenericCreateStatic>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	4a08      	ldr	r2, [pc, #32]	@ (800c2c8 <prvCheckForValidListAndQueue+0x60>)
 800c2a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c2a8:	4b07      	ldr	r3, [pc, #28]	@ (800c2c8 <prvCheckForValidListAndQueue+0x60>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d005      	beq.n	800c2bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c2b0:	4b05      	ldr	r3, [pc, #20]	@ (800c2c8 <prvCheckForValidListAndQueue+0x60>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	490b      	ldr	r1, [pc, #44]	@ (800c2e4 <prvCheckForValidListAndQueue+0x7c>)
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7fe fc18 	bl	800aaec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2bc:	f000 f976 	bl	800c5ac <vPortExitCritical>
}
 800c2c0:	bf00      	nop
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	200011b4 	.word	0x200011b4
 800c2cc:	20001184 	.word	0x20001184
 800c2d0:	20001198 	.word	0x20001198
 800c2d4:	200011ac 	.word	0x200011ac
 800c2d8:	200011b0 	.word	0x200011b0
 800c2dc:	20001260 	.word	0x20001260
 800c2e0:	200011c0 	.word	0x200011c0
 800c2e4:	0800cc50 	.word	0x0800cc50

0800c2e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	3b04      	subs	r3, #4
 800c2f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c300:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	3b04      	subs	r3, #4
 800c306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	f023 0201 	bic.w	r2, r3, #1
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	3b04      	subs	r3, #4
 800c316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c318:	4a0c      	ldr	r2, [pc, #48]	@ (800c34c <pxPortInitialiseStack+0x64>)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	3b14      	subs	r3, #20
 800c322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	3b04      	subs	r3, #4
 800c32e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f06f 0202 	mvn.w	r2, #2
 800c336:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	3b20      	subs	r3, #32
 800c33c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c33e:	68fb      	ldr	r3, [r7, #12]
}
 800c340:	4618      	mov	r0, r3
 800c342:	3714      	adds	r7, #20
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr
 800c34c:	0800c351 	.word	0x0800c351

0800c350 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c356:	2300      	movs	r3, #0
 800c358:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c35a:	4b13      	ldr	r3, [pc, #76]	@ (800c3a8 <prvTaskExitError+0x58>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c362:	d00b      	beq.n	800c37c <prvTaskExitError+0x2c>
	__asm volatile
 800c364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c368:	f383 8811 	msr	BASEPRI, r3
 800c36c:	f3bf 8f6f 	isb	sy
 800c370:	f3bf 8f4f 	dsb	sy
 800c374:	60fb      	str	r3, [r7, #12]
}
 800c376:	bf00      	nop
 800c378:	bf00      	nop
 800c37a:	e7fd      	b.n	800c378 <prvTaskExitError+0x28>
	__asm volatile
 800c37c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c380:	f383 8811 	msr	BASEPRI, r3
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	60bb      	str	r3, [r7, #8]
}
 800c38e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c390:	bf00      	nop
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d0fc      	beq.n	800c392 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c398:	bf00      	nop
 800c39a:	bf00      	nop
 800c39c:	3714      	adds	r7, #20
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr
 800c3a6:	bf00      	nop
 800c3a8:	2000000c 	.word	0x2000000c
 800c3ac:	00000000 	.word	0x00000000

0800c3b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c3b0:	4b07      	ldr	r3, [pc, #28]	@ (800c3d0 <pxCurrentTCBConst2>)
 800c3b2:	6819      	ldr	r1, [r3, #0]
 800c3b4:	6808      	ldr	r0, [r1, #0]
 800c3b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ba:	f380 8809 	msr	PSP, r0
 800c3be:	f3bf 8f6f 	isb	sy
 800c3c2:	f04f 0000 	mov.w	r0, #0
 800c3c6:	f380 8811 	msr	BASEPRI, r0
 800c3ca:	4770      	bx	lr
 800c3cc:	f3af 8000 	nop.w

0800c3d0 <pxCurrentTCBConst2>:
 800c3d0:	20000c84 	.word	0x20000c84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c3d4:	bf00      	nop
 800c3d6:	bf00      	nop

0800c3d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c3d8:	4808      	ldr	r0, [pc, #32]	@ (800c3fc <prvPortStartFirstTask+0x24>)
 800c3da:	6800      	ldr	r0, [r0, #0]
 800c3dc:	6800      	ldr	r0, [r0, #0]
 800c3de:	f380 8808 	msr	MSP, r0
 800c3e2:	f04f 0000 	mov.w	r0, #0
 800c3e6:	f380 8814 	msr	CONTROL, r0
 800c3ea:	b662      	cpsie	i
 800c3ec:	b661      	cpsie	f
 800c3ee:	f3bf 8f4f 	dsb	sy
 800c3f2:	f3bf 8f6f 	isb	sy
 800c3f6:	df00      	svc	0
 800c3f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c3fa:	bf00      	nop
 800c3fc:	e000ed08 	.word	0xe000ed08

0800c400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b086      	sub	sp, #24
 800c404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c406:	4b47      	ldr	r3, [pc, #284]	@ (800c524 <xPortStartScheduler+0x124>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a47      	ldr	r2, [pc, #284]	@ (800c528 <xPortStartScheduler+0x128>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d10b      	bne.n	800c428 <xPortStartScheduler+0x28>
	__asm volatile
 800c410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c414:	f383 8811 	msr	BASEPRI, r3
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	60fb      	str	r3, [r7, #12]
}
 800c422:	bf00      	nop
 800c424:	bf00      	nop
 800c426:	e7fd      	b.n	800c424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c428:	4b3e      	ldr	r3, [pc, #248]	@ (800c524 <xPortStartScheduler+0x124>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a3f      	ldr	r2, [pc, #252]	@ (800c52c <xPortStartScheduler+0x12c>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d10b      	bne.n	800c44a <xPortStartScheduler+0x4a>
	__asm volatile
 800c432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c436:	f383 8811 	msr	BASEPRI, r3
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	613b      	str	r3, [r7, #16]
}
 800c444:	bf00      	nop
 800c446:	bf00      	nop
 800c448:	e7fd      	b.n	800c446 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c44a:	4b39      	ldr	r3, [pc, #228]	@ (800c530 <xPortStartScheduler+0x130>)
 800c44c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	b2db      	uxtb	r3, r3
 800c454:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	22ff      	movs	r2, #255	@ 0xff
 800c45a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	b2db      	uxtb	r3, r3
 800c462:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c464:	78fb      	ldrb	r3, [r7, #3]
 800c466:	b2db      	uxtb	r3, r3
 800c468:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c46c:	b2da      	uxtb	r2, r3
 800c46e:	4b31      	ldr	r3, [pc, #196]	@ (800c534 <xPortStartScheduler+0x134>)
 800c470:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c472:	4b31      	ldr	r3, [pc, #196]	@ (800c538 <xPortStartScheduler+0x138>)
 800c474:	2207      	movs	r2, #7
 800c476:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c478:	e009      	b.n	800c48e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c47a:	4b2f      	ldr	r3, [pc, #188]	@ (800c538 <xPortStartScheduler+0x138>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3b01      	subs	r3, #1
 800c480:	4a2d      	ldr	r2, [pc, #180]	@ (800c538 <xPortStartScheduler+0x138>)
 800c482:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c484:	78fb      	ldrb	r3, [r7, #3]
 800c486:	b2db      	uxtb	r3, r3
 800c488:	005b      	lsls	r3, r3, #1
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c48e:	78fb      	ldrb	r3, [r7, #3]
 800c490:	b2db      	uxtb	r3, r3
 800c492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c496:	2b80      	cmp	r3, #128	@ 0x80
 800c498:	d0ef      	beq.n	800c47a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c49a:	4b27      	ldr	r3, [pc, #156]	@ (800c538 <xPortStartScheduler+0x138>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f1c3 0307 	rsb	r3, r3, #7
 800c4a2:	2b04      	cmp	r3, #4
 800c4a4:	d00b      	beq.n	800c4be <xPortStartScheduler+0xbe>
	__asm volatile
 800c4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4aa:	f383 8811 	msr	BASEPRI, r3
 800c4ae:	f3bf 8f6f 	isb	sy
 800c4b2:	f3bf 8f4f 	dsb	sy
 800c4b6:	60bb      	str	r3, [r7, #8]
}
 800c4b8:	bf00      	nop
 800c4ba:	bf00      	nop
 800c4bc:	e7fd      	b.n	800c4ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c4be:	4b1e      	ldr	r3, [pc, #120]	@ (800c538 <xPortStartScheduler+0x138>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	021b      	lsls	r3, r3, #8
 800c4c4:	4a1c      	ldr	r2, [pc, #112]	@ (800c538 <xPortStartScheduler+0x138>)
 800c4c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c4c8:	4b1b      	ldr	r3, [pc, #108]	@ (800c538 <xPortStartScheduler+0x138>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c4d0:	4a19      	ldr	r2, [pc, #100]	@ (800c538 <xPortStartScheduler+0x138>)
 800c4d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	b2da      	uxtb	r2, r3
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4dc:	4b17      	ldr	r3, [pc, #92]	@ (800c53c <xPortStartScheduler+0x13c>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a16      	ldr	r2, [pc, #88]	@ (800c53c <xPortStartScheduler+0x13c>)
 800c4e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c4e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c4e8:	4b14      	ldr	r3, [pc, #80]	@ (800c53c <xPortStartScheduler+0x13c>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a13      	ldr	r2, [pc, #76]	@ (800c53c <xPortStartScheduler+0x13c>)
 800c4ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c4f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c4f4:	f000 f8da 	bl	800c6ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c4f8:	4b11      	ldr	r3, [pc, #68]	@ (800c540 <xPortStartScheduler+0x140>)
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c4fe:	f000 f8f9 	bl	800c6f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c502:	4b10      	ldr	r3, [pc, #64]	@ (800c544 <xPortStartScheduler+0x144>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a0f      	ldr	r2, [pc, #60]	@ (800c544 <xPortStartScheduler+0x144>)
 800c508:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c50c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c50e:	f7ff ff63 	bl	800c3d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c512:	f7fe ff2d 	bl	800b370 <vTaskSwitchContext>
	prvTaskExitError();
 800c516:	f7ff ff1b 	bl	800c350 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3718      	adds	r7, #24
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	e000ed00 	.word	0xe000ed00
 800c528:	410fc271 	.word	0x410fc271
 800c52c:	410fc270 	.word	0x410fc270
 800c530:	e000e400 	.word	0xe000e400
 800c534:	200012b0 	.word	0x200012b0
 800c538:	200012b4 	.word	0x200012b4
 800c53c:	e000ed20 	.word	0xe000ed20
 800c540:	2000000c 	.word	0x2000000c
 800c544:	e000ef34 	.word	0xe000ef34

0800c548 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c548:	b480      	push	{r7}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
	__asm volatile
 800c54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	607b      	str	r3, [r7, #4]
}
 800c560:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c562:	4b10      	ldr	r3, [pc, #64]	@ (800c5a4 <vPortEnterCritical+0x5c>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	3301      	adds	r3, #1
 800c568:	4a0e      	ldr	r2, [pc, #56]	@ (800c5a4 <vPortEnterCritical+0x5c>)
 800c56a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c56c:	4b0d      	ldr	r3, [pc, #52]	@ (800c5a4 <vPortEnterCritical+0x5c>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2b01      	cmp	r3, #1
 800c572:	d110      	bne.n	800c596 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c574:	4b0c      	ldr	r3, [pc, #48]	@ (800c5a8 <vPortEnterCritical+0x60>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00b      	beq.n	800c596 <vPortEnterCritical+0x4e>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	603b      	str	r3, [r7, #0]
}
 800c590:	bf00      	nop
 800c592:	bf00      	nop
 800c594:	e7fd      	b.n	800c592 <vPortEnterCritical+0x4a>
	}
}
 800c596:	bf00      	nop
 800c598:	370c      	adds	r7, #12
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr
 800c5a2:	bf00      	nop
 800c5a4:	2000000c 	.word	0x2000000c
 800c5a8:	e000ed04 	.word	0xe000ed04

0800c5ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b083      	sub	sp, #12
 800c5b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5b2:	4b12      	ldr	r3, [pc, #72]	@ (800c5fc <vPortExitCritical+0x50>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d10b      	bne.n	800c5d2 <vPortExitCritical+0x26>
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	607b      	str	r3, [r7, #4]
}
 800c5cc:	bf00      	nop
 800c5ce:	bf00      	nop
 800c5d0:	e7fd      	b.n	800c5ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c5d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c5fc <vPortExitCritical+0x50>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	3b01      	subs	r3, #1
 800c5d8:	4a08      	ldr	r2, [pc, #32]	@ (800c5fc <vPortExitCritical+0x50>)
 800c5da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5dc:	4b07      	ldr	r3, [pc, #28]	@ (800c5fc <vPortExitCritical+0x50>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d105      	bne.n	800c5f0 <vPortExitCritical+0x44>
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	f383 8811 	msr	BASEPRI, r3
}
 800c5ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c5f0:	bf00      	nop
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr
 800c5fc:	2000000c 	.word	0x2000000c

0800c600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c600:	f3ef 8009 	mrs	r0, PSP
 800c604:	f3bf 8f6f 	isb	sy
 800c608:	4b15      	ldr	r3, [pc, #84]	@ (800c660 <pxCurrentTCBConst>)
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	f01e 0f10 	tst.w	lr, #16
 800c610:	bf08      	it	eq
 800c612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61a:	6010      	str	r0, [r2, #0]
 800c61c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c620:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c624:	f380 8811 	msr	BASEPRI, r0
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f7fe fe9e 	bl	800b370 <vTaskSwitchContext>
 800c634:	f04f 0000 	mov.w	r0, #0
 800c638:	f380 8811 	msr	BASEPRI, r0
 800c63c:	bc09      	pop	{r0, r3}
 800c63e:	6819      	ldr	r1, [r3, #0]
 800c640:	6808      	ldr	r0, [r1, #0]
 800c642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c646:	f01e 0f10 	tst.w	lr, #16
 800c64a:	bf08      	it	eq
 800c64c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c650:	f380 8809 	msr	PSP, r0
 800c654:	f3bf 8f6f 	isb	sy
 800c658:	4770      	bx	lr
 800c65a:	bf00      	nop
 800c65c:	f3af 8000 	nop.w

0800c660 <pxCurrentTCBConst>:
 800c660:	20000c84 	.word	0x20000c84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c664:	bf00      	nop
 800c666:	bf00      	nop

0800c668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
	__asm volatile
 800c66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c672:	f383 8811 	msr	BASEPRI, r3
 800c676:	f3bf 8f6f 	isb	sy
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	607b      	str	r3, [r7, #4]
}
 800c680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c682:	f7fe fdbb 	bl	800b1fc <xTaskIncrementTick>
 800c686:	4603      	mov	r3, r0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d003      	beq.n	800c694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c68c:	4b06      	ldr	r3, [pc, #24]	@ (800c6a8 <xPortSysTickHandler+0x40>)
 800c68e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	2300      	movs	r3, #0
 800c696:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	f383 8811 	msr	BASEPRI, r3
}
 800c69e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6a0:	bf00      	nop
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	e000ed04 	.word	0xe000ed04

0800c6ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c6e0 <vPortSetupTimerInterrupt+0x34>)
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c6e4 <vPortSetupTimerInterrupt+0x38>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c6e8 <vPortSetupTimerInterrupt+0x3c>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a0a      	ldr	r2, [pc, #40]	@ (800c6ec <vPortSetupTimerInterrupt+0x40>)
 800c6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6c6:	099b      	lsrs	r3, r3, #6
 800c6c8:	4a09      	ldr	r2, [pc, #36]	@ (800c6f0 <vPortSetupTimerInterrupt+0x44>)
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6ce:	4b04      	ldr	r3, [pc, #16]	@ (800c6e0 <vPortSetupTimerInterrupt+0x34>)
 800c6d0:	2207      	movs	r2, #7
 800c6d2:	601a      	str	r2, [r3, #0]
}
 800c6d4:	bf00      	nop
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	e000e010 	.word	0xe000e010
 800c6e4:	e000e018 	.word	0xe000e018
 800c6e8:	20000000 	.word	0x20000000
 800c6ec:	10624dd3 	.word	0x10624dd3
 800c6f0:	e000e014 	.word	0xe000e014

0800c6f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c6f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c704 <vPortEnableVFP+0x10>
 800c6f8:	6801      	ldr	r1, [r0, #0]
 800c6fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c6fe:	6001      	str	r1, [r0, #0]
 800c700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c702:	bf00      	nop
 800c704:	e000ed88 	.word	0xe000ed88

0800c708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c708:	b480      	push	{r7}
 800c70a:	b085      	sub	sp, #20
 800c70c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c70e:	f3ef 8305 	mrs	r3, IPSR
 800c712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2b0f      	cmp	r3, #15
 800c718:	d915      	bls.n	800c746 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c71a:	4a18      	ldr	r2, [pc, #96]	@ (800c77c <vPortValidateInterruptPriority+0x74>)
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	4413      	add	r3, r2
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c724:	4b16      	ldr	r3, [pc, #88]	@ (800c780 <vPortValidateInterruptPriority+0x78>)
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	7afa      	ldrb	r2, [r7, #11]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d20b      	bcs.n	800c746 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c732:	f383 8811 	msr	BASEPRI, r3
 800c736:	f3bf 8f6f 	isb	sy
 800c73a:	f3bf 8f4f 	dsb	sy
 800c73e:	607b      	str	r3, [r7, #4]
}
 800c740:	bf00      	nop
 800c742:	bf00      	nop
 800c744:	e7fd      	b.n	800c742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c746:	4b0f      	ldr	r3, [pc, #60]	@ (800c784 <vPortValidateInterruptPriority+0x7c>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c74e:	4b0e      	ldr	r3, [pc, #56]	@ (800c788 <vPortValidateInterruptPriority+0x80>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	429a      	cmp	r2, r3
 800c754:	d90b      	bls.n	800c76e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c75a:	f383 8811 	msr	BASEPRI, r3
 800c75e:	f3bf 8f6f 	isb	sy
 800c762:	f3bf 8f4f 	dsb	sy
 800c766:	603b      	str	r3, [r7, #0]
}
 800c768:	bf00      	nop
 800c76a:	bf00      	nop
 800c76c:	e7fd      	b.n	800c76a <vPortValidateInterruptPriority+0x62>
	}
 800c76e:	bf00      	nop
 800c770:	3714      	adds	r7, #20
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	e000e3f0 	.word	0xe000e3f0
 800c780:	200012b0 	.word	0x200012b0
 800c784:	e000ed0c 	.word	0xe000ed0c
 800c788:	200012b4 	.word	0x200012b4

0800c78c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b08a      	sub	sp, #40	@ 0x28
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c794:	2300      	movs	r3, #0
 800c796:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c798:	f7fe fc74 	bl	800b084 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c79c:	4b5c      	ldr	r3, [pc, #368]	@ (800c910 <pvPortMalloc+0x184>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d101      	bne.n	800c7a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c7a4:	f000 f924 	bl	800c9f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c7a8:	4b5a      	ldr	r3, [pc, #360]	@ (800c914 <pvPortMalloc+0x188>)
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f040 8095 	bne.w	800c8e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d01e      	beq.n	800c7fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c7bc:	2208      	movs	r2, #8
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f003 0307 	and.w	r3, r3, #7
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d015      	beq.n	800c7fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f023 0307 	bic.w	r3, r3, #7
 800c7d4:	3308      	adds	r3, #8
 800c7d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f003 0307 	and.w	r3, r3, #7
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d00b      	beq.n	800c7fa <pvPortMalloc+0x6e>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	617b      	str	r3, [r7, #20]
}
 800c7f4:	bf00      	nop
 800c7f6:	bf00      	nop
 800c7f8:	e7fd      	b.n	800c7f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d06f      	beq.n	800c8e0 <pvPortMalloc+0x154>
 800c800:	4b45      	ldr	r3, [pc, #276]	@ (800c918 <pvPortMalloc+0x18c>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	429a      	cmp	r2, r3
 800c808:	d86a      	bhi.n	800c8e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c80a:	4b44      	ldr	r3, [pc, #272]	@ (800c91c <pvPortMalloc+0x190>)
 800c80c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c80e:	4b43      	ldr	r3, [pc, #268]	@ (800c91c <pvPortMalloc+0x190>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c814:	e004      	b.n	800c820 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c818:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	429a      	cmp	r2, r3
 800c828:	d903      	bls.n	800c832 <pvPortMalloc+0xa6>
 800c82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d1f1      	bne.n	800c816 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c832:	4b37      	ldr	r3, [pc, #220]	@ (800c910 <pvPortMalloc+0x184>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c838:	429a      	cmp	r2, r3
 800c83a:	d051      	beq.n	800c8e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c83c:	6a3b      	ldr	r3, [r7, #32]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2208      	movs	r2, #8
 800c842:	4413      	add	r3, r2
 800c844:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	6a3b      	ldr	r3, [r7, #32]
 800c84c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c850:	685a      	ldr	r2, [r3, #4]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	1ad2      	subs	r2, r2, r3
 800c856:	2308      	movs	r3, #8
 800c858:	005b      	lsls	r3, r3, #1
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d920      	bls.n	800c8a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c85e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4413      	add	r3, r2
 800c864:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	f003 0307 	and.w	r3, r3, #7
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00b      	beq.n	800c888 <pvPortMalloc+0xfc>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	613b      	str	r3, [r7, #16]
}
 800c882:	bf00      	nop
 800c884:	bf00      	nop
 800c886:	e7fd      	b.n	800c884 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88a:	685a      	ldr	r2, [r3, #4]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	1ad2      	subs	r2, r2, r3
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c89a:	69b8      	ldr	r0, [r7, #24]
 800c89c:	f000 f90a 	bl	800cab4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c8a0:	4b1d      	ldr	r3, [pc, #116]	@ (800c918 <pvPortMalloc+0x18c>)
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	1ad3      	subs	r3, r2, r3
 800c8aa:	4a1b      	ldr	r2, [pc, #108]	@ (800c918 <pvPortMalloc+0x18c>)
 800c8ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c8ae:	4b1a      	ldr	r3, [pc, #104]	@ (800c918 <pvPortMalloc+0x18c>)
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	4b1b      	ldr	r3, [pc, #108]	@ (800c920 <pvPortMalloc+0x194>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d203      	bcs.n	800c8c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c8ba:	4b17      	ldr	r3, [pc, #92]	@ (800c918 <pvPortMalloc+0x18c>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a18      	ldr	r2, [pc, #96]	@ (800c920 <pvPortMalloc+0x194>)
 800c8c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c4:	685a      	ldr	r2, [r3, #4]
 800c8c6:	4b13      	ldr	r3, [pc, #76]	@ (800c914 <pvPortMalloc+0x188>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	431a      	orrs	r2, r3
 800c8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c8d6:	4b13      	ldr	r3, [pc, #76]	@ (800c924 <pvPortMalloc+0x198>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	4a11      	ldr	r2, [pc, #68]	@ (800c924 <pvPortMalloc+0x198>)
 800c8de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c8e0:	f7fe fbde 	bl	800b0a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	f003 0307 	and.w	r3, r3, #7
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00b      	beq.n	800c906 <pvPortMalloc+0x17a>
	__asm volatile
 800c8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f2:	f383 8811 	msr	BASEPRI, r3
 800c8f6:	f3bf 8f6f 	isb	sy
 800c8fa:	f3bf 8f4f 	dsb	sy
 800c8fe:	60fb      	str	r3, [r7, #12]
}
 800c900:	bf00      	nop
 800c902:	bf00      	nop
 800c904:	e7fd      	b.n	800c902 <pvPortMalloc+0x176>
	return pvReturn;
 800c906:	69fb      	ldr	r3, [r7, #28]
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3728      	adds	r7, #40	@ 0x28
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	20004ec0 	.word	0x20004ec0
 800c914:	20004ed4 	.word	0x20004ed4
 800c918:	20004ec4 	.word	0x20004ec4
 800c91c:	20004eb8 	.word	0x20004eb8
 800c920:	20004ec8 	.word	0x20004ec8
 800c924:	20004ecc 	.word	0x20004ecc

0800c928 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b086      	sub	sp, #24
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d04f      	beq.n	800c9da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c93a:	2308      	movs	r3, #8
 800c93c:	425b      	negs	r3, r3
 800c93e:	697a      	ldr	r2, [r7, #20]
 800c940:	4413      	add	r3, r2
 800c942:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	4b25      	ldr	r3, [pc, #148]	@ (800c9e4 <vPortFree+0xbc>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4013      	ands	r3, r2
 800c952:	2b00      	cmp	r3, #0
 800c954:	d10b      	bne.n	800c96e <vPortFree+0x46>
	__asm volatile
 800c956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c95a:	f383 8811 	msr	BASEPRI, r3
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	60fb      	str	r3, [r7, #12]
}
 800c968:	bf00      	nop
 800c96a:	bf00      	nop
 800c96c:	e7fd      	b.n	800c96a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00b      	beq.n	800c98e <vPortFree+0x66>
	__asm volatile
 800c976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c97a:	f383 8811 	msr	BASEPRI, r3
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	f3bf 8f4f 	dsb	sy
 800c986:	60bb      	str	r3, [r7, #8]
}
 800c988:	bf00      	nop
 800c98a:	bf00      	nop
 800c98c:	e7fd      	b.n	800c98a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	685a      	ldr	r2, [r3, #4]
 800c992:	4b14      	ldr	r3, [pc, #80]	@ (800c9e4 <vPortFree+0xbc>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4013      	ands	r3, r2
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d01e      	beq.n	800c9da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d11a      	bne.n	800c9da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	685a      	ldr	r2, [r3, #4]
 800c9a8:	4b0e      	ldr	r3, [pc, #56]	@ (800c9e4 <vPortFree+0xbc>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	43db      	mvns	r3, r3
 800c9ae:	401a      	ands	r2, r3
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c9b4:	f7fe fb66 	bl	800b084 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c9e8 <vPortFree+0xc0>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	4a09      	ldr	r2, [pc, #36]	@ (800c9e8 <vPortFree+0xc0>)
 800c9c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9c6:	6938      	ldr	r0, [r7, #16]
 800c9c8:	f000 f874 	bl	800cab4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c9cc:	4b07      	ldr	r3, [pc, #28]	@ (800c9ec <vPortFree+0xc4>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	4a06      	ldr	r2, [pc, #24]	@ (800c9ec <vPortFree+0xc4>)
 800c9d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c9d6:	f7fe fb63 	bl	800b0a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c9da:	bf00      	nop
 800c9dc:	3718      	adds	r7, #24
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	20004ed4 	.word	0x20004ed4
 800c9e8:	20004ec4 	.word	0x20004ec4
 800c9ec:	20004ed0 	.word	0x20004ed0

0800c9f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c9f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c9fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c9fc:	4b27      	ldr	r3, [pc, #156]	@ (800ca9c <prvHeapInit+0xac>)
 800c9fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f003 0307 	and.w	r3, r3, #7
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d00c      	beq.n	800ca24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	3307      	adds	r3, #7
 800ca0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f023 0307 	bic.w	r3, r3, #7
 800ca16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca18:	68ba      	ldr	r2, [r7, #8]
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	1ad3      	subs	r3, r2, r3
 800ca1e:	4a1f      	ldr	r2, [pc, #124]	@ (800ca9c <prvHeapInit+0xac>)
 800ca20:	4413      	add	r3, r2
 800ca22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca28:	4a1d      	ldr	r2, [pc, #116]	@ (800caa0 <prvHeapInit+0xb0>)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca2e:	4b1c      	ldr	r3, [pc, #112]	@ (800caa0 <prvHeapInit+0xb0>)
 800ca30:	2200      	movs	r2, #0
 800ca32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	68ba      	ldr	r2, [r7, #8]
 800ca38:	4413      	add	r3, r2
 800ca3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca3c:	2208      	movs	r2, #8
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	1a9b      	subs	r3, r3, r2
 800ca42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f023 0307 	bic.w	r3, r3, #7
 800ca4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	4a15      	ldr	r2, [pc, #84]	@ (800caa4 <prvHeapInit+0xb4>)
 800ca50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca52:	4b14      	ldr	r3, [pc, #80]	@ (800caa4 <prvHeapInit+0xb4>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2200      	movs	r2, #0
 800ca58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca5a:	4b12      	ldr	r3, [pc, #72]	@ (800caa4 <prvHeapInit+0xb4>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	1ad2      	subs	r2, r2, r3
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca70:	4b0c      	ldr	r3, [pc, #48]	@ (800caa4 <prvHeapInit+0xb4>)
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	4a0a      	ldr	r2, [pc, #40]	@ (800caa8 <prvHeapInit+0xb8>)
 800ca7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	4a09      	ldr	r2, [pc, #36]	@ (800caac <prvHeapInit+0xbc>)
 800ca86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca88:	4b09      	ldr	r3, [pc, #36]	@ (800cab0 <prvHeapInit+0xc0>)
 800ca8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ca8e:	601a      	str	r2, [r3, #0]
}
 800ca90:	bf00      	nop
 800ca92:	3714      	adds	r7, #20
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr
 800ca9c:	200012b8 	.word	0x200012b8
 800caa0:	20004eb8 	.word	0x20004eb8
 800caa4:	20004ec0 	.word	0x20004ec0
 800caa8:	20004ec8 	.word	0x20004ec8
 800caac:	20004ec4 	.word	0x20004ec4
 800cab0:	20004ed4 	.word	0x20004ed4

0800cab4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cabc:	4b28      	ldr	r3, [pc, #160]	@ (800cb60 <prvInsertBlockIntoFreeList+0xac>)
 800cabe:	60fb      	str	r3, [r7, #12]
 800cac0:	e002      	b.n	800cac8 <prvInsertBlockIntoFreeList+0x14>
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	60fb      	str	r3, [r7, #12]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	429a      	cmp	r2, r3
 800cad0:	d8f7      	bhi.n	800cac2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	4413      	add	r3, r2
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d108      	bne.n	800caf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	685a      	ldr	r2, [r3, #4]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	441a      	add	r2, r3
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	68ba      	ldr	r2, [r7, #8]
 800cb00:	441a      	add	r2, r3
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d118      	bne.n	800cb3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	4b15      	ldr	r3, [pc, #84]	@ (800cb64 <prvInsertBlockIntoFreeList+0xb0>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d00d      	beq.n	800cb32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	685a      	ldr	r2, [r3, #4]
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	441a      	add	r2, r3
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	601a      	str	r2, [r3, #0]
 800cb30:	e008      	b.n	800cb44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb32:	4b0c      	ldr	r3, [pc, #48]	@ (800cb64 <prvInsertBlockIntoFreeList+0xb0>)
 800cb34:	681a      	ldr	r2, [r3, #0]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	601a      	str	r2, [r3, #0]
 800cb3a:	e003      	b.n	800cb44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb44:	68fa      	ldr	r2, [r7, #12]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d002      	beq.n	800cb52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb52:	bf00      	nop
 800cb54:	3714      	adds	r7, #20
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	20004eb8 	.word	0x20004eb8
 800cb64:	20004ec0 	.word	0x20004ec0

0800cb68 <memset>:
 800cb68:	4402      	add	r2, r0
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d100      	bne.n	800cb72 <memset+0xa>
 800cb70:	4770      	bx	lr
 800cb72:	f803 1b01 	strb.w	r1, [r3], #1
 800cb76:	e7f9      	b.n	800cb6c <memset+0x4>

0800cb78 <__libc_init_array>:
 800cb78:	b570      	push	{r4, r5, r6, lr}
 800cb7a:	4d0d      	ldr	r5, [pc, #52]	@ (800cbb0 <__libc_init_array+0x38>)
 800cb7c:	4c0d      	ldr	r4, [pc, #52]	@ (800cbb4 <__libc_init_array+0x3c>)
 800cb7e:	1b64      	subs	r4, r4, r5
 800cb80:	10a4      	asrs	r4, r4, #2
 800cb82:	2600      	movs	r6, #0
 800cb84:	42a6      	cmp	r6, r4
 800cb86:	d109      	bne.n	800cb9c <__libc_init_array+0x24>
 800cb88:	4d0b      	ldr	r5, [pc, #44]	@ (800cbb8 <__libc_init_array+0x40>)
 800cb8a:	4c0c      	ldr	r4, [pc, #48]	@ (800cbbc <__libc_init_array+0x44>)
 800cb8c:	f000 f826 	bl	800cbdc <_init>
 800cb90:	1b64      	subs	r4, r4, r5
 800cb92:	10a4      	asrs	r4, r4, #2
 800cb94:	2600      	movs	r6, #0
 800cb96:	42a6      	cmp	r6, r4
 800cb98:	d105      	bne.n	800cba6 <__libc_init_array+0x2e>
 800cb9a:	bd70      	pop	{r4, r5, r6, pc}
 800cb9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cba0:	4798      	blx	r3
 800cba2:	3601      	adds	r6, #1
 800cba4:	e7ee      	b.n	800cb84 <__libc_init_array+0xc>
 800cba6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbaa:	4798      	blx	r3
 800cbac:	3601      	adds	r6, #1
 800cbae:	e7f2      	b.n	800cb96 <__libc_init_array+0x1e>
 800cbb0:	0800cd5c 	.word	0x0800cd5c
 800cbb4:	0800cd5c 	.word	0x0800cd5c
 800cbb8:	0800cd5c 	.word	0x0800cd5c
 800cbbc:	0800cd60 	.word	0x0800cd60

0800cbc0 <memcpy>:
 800cbc0:	440a      	add	r2, r1
 800cbc2:	4291      	cmp	r1, r2
 800cbc4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbc8:	d100      	bne.n	800cbcc <memcpy+0xc>
 800cbca:	4770      	bx	lr
 800cbcc:	b510      	push	{r4, lr}
 800cbce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbd6:	4291      	cmp	r1, r2
 800cbd8:	d1f9      	bne.n	800cbce <memcpy+0xe>
 800cbda:	bd10      	pop	{r4, pc}

0800cbdc <_init>:
 800cbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbde:	bf00      	nop
 800cbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbe2:	bc08      	pop	{r3}
 800cbe4:	469e      	mov	lr, r3
 800cbe6:	4770      	bx	lr

0800cbe8 <_fini>:
 800cbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbea:	bf00      	nop
 800cbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbee:	bc08      	pop	{r3}
 800cbf0:	469e      	mov	lr, r3
 800cbf2:	4770      	bx	lr
